1st Post (Feb 8th)
* (BluGenie)			- You can now display a list of commands that can be ran inside BlueGenie by typing "Commands" in the console
* (BluGenie)			- All the funtions have been updated to support a dynamic console level menu system to help with understanding the command and all the parameters
* (BluGenie)			- There is a new self contained function called Build-HelpMenu which is now part of the BluGenie console.
							You can call this function by typing "HelpMenu" -or any of the HelpMenu Commands above.
							This will walk you through all the parameters, help, examples, and command syntax for both 
							the normal function and syntax using it inside the BluGenie console. Slightly different 
							than -Help parameter on the (.ps1) file
* (BluGenie)			- All the functions have been updated with a complete list of help information and examples
* (BluGenie)			- Functions are now loaded when the BluGenie console is started. They are loaded into a super-object (similar to Python) which contains all the functions. 
							They are now passed from the parent to each (Invoke-Process). This is also the framework to 
							create a service on the fly on the client if needed (This is a work in progress)

2nd Post (Feb 11th)
* (Get-ServiceList) 	- Fixed the Validation Set for ManageType and ManageServicetype
* (Invoke-NetStat) 		- Fixed the Validation Set for ManageType

3rd Post (Feb 12th)
* (Get-ChildItemList) 	- Updated the %UserProfiles% variable flag to 'AllUsers'
* (Get-ServiceList) 	- Converted the entire function to use the new search process
* (Get-ChildItemList) 	- Updated the SearchPath value to process the (Get-LiteralPath) function to validate the path 
* (Get-ChildItemList) 	- Rebuilt the [Remove] file or folder check. 
* (Get-HashInfo) 		- Updated the script to support better error control when managing a null path

4th Post (Feb 13th)
* (Get-Signature) 		- Created a function to pull Authentication Signature Information for a file / process (Issuer, ThumbPrint, Subject, OSBinary, and Validation Signature)
* (Get-ServiceList) 	- Removed the $PSItem variable and replaced with with $_. $PSItem was causing issues.
* (Invoke-NetStat) 		- Converted the entire function to use the new search process
* (Invoke-NetStat) 		- Added the Authentication Signature Information to the report

5th Post (Feb 14th)
* (Update-Sysinternals) - Posted. This will 'download' and bind itself to the BGConsole. The zip archive will download to '.\ScriptDirectory\Tools' and extract to the same name as the zip.
* (Build-HelpMenu) 		- Updated the Validation Set list to support the new command

6th Post (Feb 18th)
* (BindTools) 			- BindTools will Import External Tools (.EXE) files into BluGenie.  (BGConsole / Responder Function Only)
						  Note: The BindTools uses a Config.JSON to manage the files and their configure.  The file is under '.\Tools'.
						  Note: This is not a copy process, but can be used as one.  This process runs with every launch of the BGAgent and using it to copy files is not a good idea.  A copy command will be built soon.

						  - Sample Config -
							{
							"CopyTools":  [
											  {
												  "Name":  "AutoRunSc.exe",
												  "Path":  ".\\Tools\\SysinternalsSuite",
												  "RemoteDestination":  "%WinDir%\\Temp",
												  "RemoveOnExit":  "True"
											  },
											  {
												  "Name":  "SigCheck.exe",
												  "Path":  ".\\Tools\\SysinternalsSuite",
												  "RemoteDestination":  "%WinDir%\\Temp",
												  "RemoveOnExit":  "True"
											  },
											  {
												  "Name":  "Sysmon.exe",
												  "Path":  ".\\Tools\\SysinternalsSuite",
												  "RemoteDestination":  "%WinDir%\\Temp",
												  "RemoveOnExit":  "False"
											  }
										  ]
							}
							
* (Combine-Objects) 	- Combine 2 Object into 1 Super Object. (BGConsole / Responder Function Only)
						  Note:  This was created to build 1 single Object with all the BGAgent methods nested in it.  This makes it easier to pass the object to each machine.  This also nests the tools base64 information
* (BGCon)				- Set the default script location to $ScriptDirectory before running any other functions / tool injection.  This will help resolve any path issues.
* (Build-HelpMenu)		- Added Command Get-Signature to the Validation Set List for Help
* (Get-Signature)		- Completly rewritten to support the SysInternals Exec SigCheck.exe.  Can now pull clean from all Windows OS's. 

7th Post (Feb 19th)
* (Invoke-NetStat)		- Updated the Authentication Signature Information method.  This will pull the Signature information using SigCheck.exe
						- Add Try/Catch to the Get-Signature call.  This is done to prevent errors if the function wasn't loaded for any reason.
                        - Added Signature switch.  This will pull the Signature information for the giving file or process.
                        - Added the Signature Search options to the -FilterType Search string
						- Note: The Signature switch is optional and when active it is searchable
* (Get-AppTaskMgrList)	- Removed from the BGAgent function list.  This wasn't working as intended and is not being used right now.
* (Get-ChildItemList)   - Added Signature switch.  This will pull the Signature information for the giving file or process.
                          Added the Signature Search options to the -FilterType Search string	
* (Update-Sysinternals) - Updated the Source path to a new link.  The old link was invalid / unsecure.

8th Post (Feb 20th)
* (BGCon.lib) 			- Fixed the issue (if the tools were missing the custom object being passed to the client would not be created)
* (Get-ProcessList)		- Added Signature switch.  This will pull the Signature information for the giving file or process.
                        - Added the Signature Search options to the -FilterType Search string	
                        - Redesigned the Internal search filter to look more like the new functions
                        - Updated the Hash Query to use the external function
                        - Removed FitlerTyper (NoFilter). Updated the search process so this is not needed.  By default just running the function there will be no filters.
* (Get-SchTaskInfo)		- Added Signature switch.  This will pull the Signature information for the giving file or process.
                        - Added the Signature Search options to the -FilterType Search string	
						
9th Post (Feb 21st)
* (Get-SystemInfo)		- Updated the Disk Query.  It was not pulling disk information if there is only 1 disk.  
* (Build-HelpMenu)		- Removed the Get-AppTaskMgrList parameter
* (BGCon)				- Removed the Get-AppTaskMgrList parameter (Causing issues when compiling the BGAgent object.  

10th Post (Feb 26th)
* (Get-ProcessList) 	- Updated to pull the Signature Authentication Information with SigCheck.exe
* (Get-SchTaskInfo)		- Updated to pull the Signature Authentication Information with SigCheck.exe
* (Get-ServiceList)		- Added Signature switch.  This will pull the Signature information for the giving file or process.
                        - Added the Signature Search options to the -FilterType Search string	
                        - Update the Hash path to point to the ServiceExecPath Object.  This was done due to the system PID coming back as (Zero) and no process path found.
* (BGCon)				- Tested the (Reload) command.  It will pull the 'Config.JSON' and reload the tools
						- Updated the Agent Tools push.  Now the Agent will create a new directory on the client side if the "RemoteDestination" path doesn't exist.  Path is in the Config.JSON
* (Config.JSON)			- SysMon is now pushed and saved to %WinDir%\BluGenie\SysMon.


11th post (Feb 27th)
* (Get-COMObjectInfo)	- New function to query all COM objects with a default load value of an .EXE or .DLL with the Signature Authenication Information
						- BenchMark: To pull Default Information, Convert File Literal Path, Determine if the file is on Disk, and get Hash it takes (20 min for 7000 objects)
						- BenchMark: To pull Default Information, Convert File Literal Path, Determine if the file is on Disk, Hash, and with Signature Authenication Information it takes (44 min for 7000 objects)
						- BenchMark: To pull Default Information, Convert File Literal Path, Determine if the file is on Disk, Hash, with Signature Authenication Information, and filter based on search pattern it takes (44 min for 7000 objects)
* (Build-HelpMenu)		- Added Command Get-COMObjectInfo to the validation Set List

12th post (Feb 28th)
* (Get-ChildItemList) - * Added MaxReturnCount into the Automated Help section
					  - * Updated the Search Process for Temp folders to located hidden folders
					  - * Updated the Search Process for AllUsers folders to located hidden folders
					  - * Updated the File / Directory check with Test-Path instead of Get-item 
					  - * Updated the File Check counter. The counter was still set for the original testing.

13th post (March 7th)
* (New-TimeStamp)	     		- * Posted New (Internal Function Only) - Returns the default TimeStamp value for all logging
* (New-UID)			     		- * Posted New (Internal Function Only) - Create a New UID.  This will output a random UID based on the settings you specify
* (Convert-UserName2SID) 		- * Posted New (Internal Function Only) - Convert UserName to Security ID (SID)
* (Convert-SID2UserName) 		- * Posted New (Internal Function Only) - Convert Security ID (SID) to UserName
* (Get-LoadedRegHives)   		- * Posted New - Query all loaded registry hives
* (Invoke-LoadAllProfileHives)	- * Posted New - Load all known users profile hives.  Load all profile NTUSER.DAT from %SystemDrive%\Users
									Note:  All current functions that parse HKEY_USERS will query any loaded registry hive.  So if this command is ran prior to running any registry queries the data will be pulled and there is no code changes to the other functions.
* (Invoke-UnLoadAllProfileHives)- * Posted New - Unload all (unmanaged / not logged into) users hives
* (Build-HelpMenu)		 		- * Added Command Get-LoadedRegHives to the validation Set List
								- * Added Command Invoke-LoadAllProfileHives to the validation Set List
								- * Added Command Invoke-UnLoadAllProfileHives to the validation Set List
								
14th post (March 11th)
* (Get-MRUActivityView)		- * Query MRU Activity.  Pull all known MRU information from any loaded user registry hive from the following location.

								'HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPidlMRU'
								'HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPidlMRULegacy'
								'HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\FirstFolder'
								'HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU'
								'HKEY_USERS\*\Software\IvoSoft\ClassicStartMenu\MRU'
								'HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs'
* (Build-HelpMenu)			- * Added Command Get-MRUActivityView to the validation Set List	

15th post (March 12th)
* (Get-COMObjectInfo) - * 	Added external call to New-TimeStamp for logging			
                      - *   Added external call to Get-LoadedRegHives to query all the loaded users hives
					  - *   Removed the Argument split from the InprocServer32.  This was causing issues.
* (Get-LiteralPath)   - *  	Removed the Parameter argument to check for $null strings.  The code was doing this already, and it was causing issues for other calling scripts.

16th post (March 13th)
* (Get-COMObjectInfo) - * 	Added more error trapping
                      - *   Added the -ReturnObject switch
					  
17th post (March 16th)
* (Get-LoadedRegHives)	- * Added PSPath as a new Object entry
                        - * Added RegPrefix as a new Object entry
* (Get-ADMachineInfo )	- * Finished on (3/15) only to realize the script was processing a double hop and all AD data was lost.  The script worked fine on all OS's during development and when manually ran.
* (Get-ADMachineInfo )	- * Updated - Pulling Data from AD using .NET [ADSI] instead of System.DirectoryServices.Protocols
						- * Removed all sub functions for System.DirectoryServices.Protocols
						- * Check for pre-existing AD Info if the process is running remotly.  You cannot run this type of code normally as it tries to double hop to the LDAP Server.  BGCon detects you are trying to 
							run a process that needs (Double Hop / Not on Remote Client) data and it gathers that data prior to connecting to the client.  The client detects there is data waiting for it and it uses 
							it to build the rest of the report.  (Smart!!!)
						- * Removed the Add to Object section and added a Key / Value pair in an array based on the new LDAP collections object
						
						Note: This function will 
								* Query for all AD properties with a value
								* Query for Group Membership
								* Query for GPO Assignment
								
							  Also to mitigate unknown errors this function and functions being created in the future will have a results section per process execution.  Much more error notification in the JSON return to help manage issues.
* (Build-HelpMenu)		- * Added Command Get-ADMachineInfo to the validation Set List

18th post (March 18th)
* (BGCon)				- * Updated the AD Query pre function call.  When converting the IP address to a hostname the system is now fully qualified.  However the AD query prarser doesn't like that.  So I now remove the suffix and the call is working. 

19th post (March 19th)
* (BGCon) 				- * Updated the error return to match the normal headers.  
						- * Added a new process to report on machines that are offline
						- * Updated the Get-ADMachineInfo return on offline machines.  The data headers match a system that is online as well.
* (Enable-WinRMoverWMI) ~ * Updated the looptimer variable to 0/Zero. By default each Invoke-Command has a 20 sec delay if the system is having issues or slow. 
                        ~ * Updated the termloopcounter variable to 1. By default each Invoke-Command has a 20 sec delay if the system is having issues or slow. 
                        ~ * Changed the Do While counter and the got this function down to less then 2 min on failed computer.
						
20th post (March 21th)
* (BGCon) 				~ * Added a information header to the main script
                        ~ * Updated the Parallel process to now capture and report error messages in the main .csv log                            
                        ~ * Updated the offline json output to look the same as the online json output
                        ~ * Modified the Get-ADMachineInfo function to pass data from the Console to remote machine
* (Get-ADMachineInfo)   ~ * Added a process to pass Active Directory data from the main console to the remote machine
                        ~ * Moved the AD data parsing code to an area that will only process if the process is ran manually.  Not from the console.  The console is now doing this step.
					    ~ * Added more error control around data being sent from the console
						
21st post (March 21th)
* (BGCon) 				~ * Updated the PSComputerName value for an offline / non-existing system.  It was getting chopped if it was an IP Address.

22nd post (March 24th)
* (Get-RegistryProcessTracking)	~ * Query User Registry Hives for Process Tracking Information
									Note:  If Prefect data is available (Last Known Start time is pulled)
* (BG-Con)						~ * Added (Get-LoadedRegHives).  The function was updated but not posted to the main script.
* (Build-HelpMenu)				~ * Added Command Get-RegistryProcessTracking to the validation Set List

23rd Post (March 25th)
* (Set-Prefetch)				~ * Enable or Disable and Report on the Super Prefetching Process
* (Get-RegistryProcessTracking)	~ * Updated Error Msg return
* (Build-HelpMenu)				~ * Added Command Set-Prefetch to the validation Set List

24th Post (March 26th)
* (Get-RegistryProcessTracking)	~ * Updated the Get-HashInfo parameters.  It was not updating the Algorithm.

25th Post (March 27th)
* (Get-AuditProcessTracking)	~ * Query the event log for Created and Exited processes.
									Note:  To manually enable Process Auditing 
										auditpol.exe /set /category:"Detailed Tracking" /subcategory:"Process Creation" /success:enable /failure:enable
										auditpol.exe /set /category:"Detailed Tracking" /subcategory:"Process Termination" /success:enable /failure:enable
* (Set-Prefetch)				~ * Updated the Registery Query.  It was coming back $null in some instances
                                ~ * Added a sleep timer of 5 seconds to help poll the registry in time.
* (Format-Event)				~ * (Helper Function, not used by itself).  This function can dynamically parse an Event log msg and turn it into Object Properties and bind the data back to the original Object.
* (Build-HelpMenu)				~ * Added Command Get-AuditProcessTracking to the validation Set List

26th Post (March 28th)
* (Set-AuditProcessPol)	~ * Enable or Disable Audit Process Tracking
* (Build-HelpMenu)		~ * Added Command Set-AuditProcessPol to the validation Set List

27th Post (April 1st)
* (Get-WindowsUpdates)	~ * Get-WindowsUpdates is a much more robust version of Get-HotFix.

							Get-Hotfix commandlet leverages the Win32_QuickFixEngineering WMI class to list Windows Updates, 
							but only returns updates supplied by Component Based Servicing (CBS). Updates supplied by the 
							Microsoft Windows Installer (MSI) or the Windows Update Site are not returned.
							
							Get-Hotfix is also not very descriptive.
							
							Get-WindowsUpdates uses 3 different methods to pull Windows Update, Patch, Rollup, Service Pack, Hotfix, and Definition Update Information
								
								Methods (1) - Installer Files for Servicing\Packages 
								Methods (2) - The Microsoft.Update.Session COMObject
								Methods (3) - HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Installer\Patches

							Example Return:
								HotFixID      : KB915597
								Title         : Definition Update for Windows Defender Antivirus - KB915597 (Definition 1.277.195.0)
								ReleaseType   : Definition Update
								InstalledDate : 9/29/2018 9:50:46 PM
								QueryLocation : Microsoft.Update.Session
								ID            : 915597
								SupportUrl    : http://support.microsoft.com/?kbid=915597
* (Build-HelpMenu)		~ * Added Command Get-WindowsUpdates to the validation Set List

28th Post (April 3rd)
* (Get-ChildItemList)	~ * Updated the -FilterType parameter to have a default value of (Any)
                        ~ * Removed the Security Search Properties.  These values are still logged but not searchable.  
                            Note: Alternate Data Streams, and Permissions are also not searchable but are logged.
                        ~ * Updated the -Pattern parameter to have a default value of '^(?s:.)*' which equals (Starting Position at the 
                            beginning of the string, matching any single char including line breaks)
                        ~ * Added the ReturnObject switch.  This will return the data as an object instead of the normal Hash Table
                        ~ * Added the Permissions switch to Query the Access Control List of each found item
                        ~ * Added the Parameter Set Results to display and log what flags were set on function startup.  This is to help manage any errors.
                        ~ * Added the NotMatch switch to enable Not Matching pattern queries
                        ~ * Added an ADS [True\False] property for tracking
                        ~ * Added the ShowStreamValue switch to display each stream name and stream content if an Alternate Data Stream is found
                        ~ * Redesigned the search function to make it more dynamic.  With all the added functions/updates above this function is 
                            roughly 1000 lines smaller than before!!!
							
29th Post (April 4th)
* (Get-WindowsUpdates)	~ * Updated error controls around the compare objects
* (Get-WindowsUpdates)	~ * Updated registry patch results.  The function is cleaner.

30th Post (April 5th)
* (Get-AutoRuns)		~ * Get-AutoRuns is a new function that reports on what programs are configured to run during system bootup or login, and when you start various built-in 
							Windows applications like Internet Explorer, Explorer and media players. These programs and drivers include ones 
							in your startup folder, Run, RunOnce, and other Registry keys.
* (Get-Signature)		~ * Added LiteralPath Property to the main object
* (Get-Signature)		~ * Updated the file check process
* (Get-Signature)		~ * Updated the error control around Get-HashInfo
* (Get-ChildItemList)   ~ * Removed the Signature properties from the Help validation set.  This is no longer used and was causing issues in the dynamic help menu.
* (Build-HelpMenu)		~ * Added Command Get-AutoRuns to the validation Set List

** Related work - Troubleshooting Command line issues with Get-ChildItemList and esacped char's.

31st Post (April 9th)
* (Dynamic Help Function) 	~ * Updated the error control for the entire process to support External Help (XML) files
* (Dynamic Help Function) 	~ * Updated the ** Parameters ** section to bypass the Help indicator to support External Help (XML) files
* (Dynamic Help Function) 	~ * Updated the ** Options ** section to bypass the Help indicator to support External Help (XML) files
* (Build-HelpMenu) 			~ * Updated the error control for the entire process to support External Help (XML) files
* (Build-HelpMenu) 			~ * Updated the ** Parameters ** section to bypass the Help indicator to support External Help (XML) files
* (Build-HelpMenu) 			~ * Updated the ** Options ** section to bypass the Help indicator to support External Help (XML) files
* (Build-HelpMenu) 			~ * Added an Export function to export the configured BluGenie Console Command to a JSON Pack file
								Note:  Files are saved under "$ScriptDirectory\JSONPacks"

32nd Post (April 16th)
*(Get-SystemInfo)	~ * Added the ReturnObject switch to return an Object instead of the default Hash Table
*(Get-SystemInfo)	~ * Updated the WalkThrough (Dynamic Help) sub process
*(Get-SystemInfo)	~ * Added more error control to all methods (Process was working but there was an error being flagged in the job .csv)
*(Get-SystemInfo)	~ * Cleaned up the code syntax for LoggedOnUsers.  Converted roughly 30 lines of code to 3
*(Get-SystemInfo)	~ * Cleaned up the code syntax for Memory.  Converted roughly 100 lines of code to 8	
*(Get-Registry)     ~ * Added a default value to StartKey 'HKEY_LOCAL_MACHINE\SOFTWARE'
*(Get-Registry)     ~ * Added a default value to Pattern '^(?s:.)*'
*(Get-Registry)     ~ * Added the ReturnObject Switch to return an Object instead of a HashTable
*(Get-Registry)     ~ * Added the NotMatch Switch to allow for an exclusion query
*(Get-Registry)     ~ * Updated the WalkThrough Function to Support External Help .XML Files (Version 1904.0801)
*(Get-Registry)     ~ * Removed the StartKey and Pattern parameter check
*(Build-HelpMenu)   ~ * Updated the JSON output to a Here String with new parameters
*(Build-HelpMenu)   ~ * Added a pause after saving Output
*(Build-HelpMenu)   ~ * Added Command Get-RegSnapshot to the validation Set List
*(BGConsole)        ~ * Updated JSON Import to Validate both the JSON System Names and the passed parameter System Names
*(BGConsole)        ~ * Updated JSON Import to Validate both the JSON JobID and the passed parameter JobID value
*(Get-AutoRuns)		~ * Updated the WalkThrough Function to Support External Help .XML Files (Version 1904.0801)
*(Get-AutoRuns)		~ * Added the ReturnObject Help header.  This was causing issues with the Dynamic Help menu 
*(Get-ChildItems)	~ * Added the ReturnObject Help header.  This was causing issues with the Dynamic Help menu 
*(Get-RegSnapshot)  ~ * Get-RegSnapshot is a new function that will take a snapshot of the Registry as is.  The snapshot is used to create a reference view of the registry key and all subkeys specified.  
						It also allows for a quick and easy view of what is currently set in the registry based on a .REG format.
*(JSON Pack Files)	~ * Note:  Files are saved under "$ScriptDirectory\JSONPacks"
*(JSON Pack Files)	~ * T1015_ATT&CK-HKLM_Image_File_Execution_Options.json
*(JSON Pack Files)	~ * T1131_ATT&CK-HKLM_SYSTEM_CurrentControlSet_Control_Lsa.json
*(JSON Pack Files)	~ * T1138_ATT&CK-HKLM_AppCompatFlags_InstalledSDB.json

33rd Post 
~ Date: April 23rd
~ BuildNum#: 1904.1703
*(Show-More)		~ * Show-More is a new "Internal" function that is used to view content one screen at a time in case the file or content is large.  You can 
                        define how many lines are diplayed to the screen as well.  The default is 25.
*(BGConsole)        ~ * Updated function (Commands) to use the new helper function Show-More to display data in the [More] format.
*(Get-Registry)		~ * Added the -NotMatch help header.  It was missing and the dynamical help menu would return errors
*(Get-Registry)		~ * Added the -ExactMatch help header.  It was missing and the dynamical help menu would return errors
*(Get-FileSnapShot) ~ * Get-FileSnapshot takes a snapshot of the requested direcotry path.  This can be the parent directory and / or a recursive sub directory snapshot.
					~ * Note: 	If you specify "Temp" in the begining of the Path field all the %SystemDrive%\Users\* Temp directories will be prefixed to the rest of the path and a snapshot will be taken for each Path
								If you specify "AllUsers" in the begining of the Path field, all the User Profiles directories from %SystemDrive%\Users will be prefixed to the rest of the path and a snapshot will be taken for each Path

									Example:  -Path 'AllUsers\AppData\Roaming'

									Output:   C:\Users\Administrator\AppData\Roaming
											  C:\Users\User1\AppData\Roaming
											  C:\Users\User2\AppData\Roaming
											  C:\Users\User3\AppData\Roaming
											  C:\Users\User4\AppData\Roaming
*(Build-HelpMenu)	~ * Removed the Build-HelpMenu item from the Help menu validation list.  This is causing a loop as the command it calling itself.
*(Build-HelpMenu)	~ * Added Command Get-FileSnapshot to the validation Set List

34th Post
~ PostedDate: May 6th
~ BuildNum# : 1904.2505
~ Notes:  BluGenie was originally designed to spawn a thread per remote host.  However, over time we have added new processes that do not need or use the remote system to do any work.
		  Example: Get-ADMachineInfo, Send-Items, Build-Command (Helper Function)
		  
		  After creating the Sent-Items process I couldn't get the function to work without nesting the function in each scope.  There are 3 scopes.
		  1)  Parent
		  2)  Spawned Thread
		  3)  Remote Host
		  
		  There were also unfamiliar output information being sent to the console.  This was do to the spawned thread running code on it's own and not giving all the work to the remote host.
		  
		  I had to revampe the entire core function to support the new objectives.  Information below.
(Invoke-Parallel)	~ Rewrote and Updated the entire function.  Invoke-Parallel is the core of BGConsole.  
						* Functions are now passed from the parent scope to each new scope.
						* Removed all duplicate functions from each scope.
						* Items moved to the parent scope and are no longer duplicated or only in a sub scope are below.
							1) Build-Command
							2) Send-Item
							3) ConvertTo-Date
							4) Convert-UTCtoLocal
							5) Enable-WinRMoverWMI
							6) Pull-FirewallRules
							Note:  This makes it much easier to update or create new functions.  All functions are now assigned to the parent scope and work in each spawned thread.
(Invoke-Parallel) 	~ All event data are now displayed to the Console in real time.
						Sample:
							* Starting Jobs - 05.03.2019_17.28.12
							~ Creating runspace pool and session states
							~ Creating empty collection to hold runspace jobs
							~ Adding win7sp1001 to collection at 5/3/2019 5:28:12 PM
							~ Adding win10001 to collection at 5/3/2019 5:28:12 PM
							~ Adding c1 to collection at 5/3/2019 5:28:12 PM
							~ Adding c2 to collection at 5/3/2019 5:28:12 PM
							~ Adding c3 to collection at 5/3/2019 5:28:12 PM
							~ Adding c4 to collection at 5/3/2019 5:28:12 PM
							~ Finish processing the remaining runspace jobs: 6
							~ "5/3/2019 5:28:18 PM";"Removing:'win7sp1001'";"0.1 minutes";"Completed";
							~ "5/3/2019 5:28:20 PM";"Removing:'win10001'";"0.13 minutes";"Completed";
							~ "5/3/2019 5:28:29 PM";"Removing:'c1'";"0.27 minutes";"CompletedWithErrors";
							~ "5/3/2019 5:28:29 PM";"Removing:'c2'";"0.28 minutes";"CompletedWithErrors";
							~ "5/3/2019 5:28:29 PM";"Removing:'c3'";"0.27 minutes";"CompletedWithErrors";
							~ "5/3/2019 5:28:29 PM";"Removing:'c4'";"0.27 minutes";"CompletedWithErrors";
							~ Closing the runspace pool
							* Completed Jobs - 05.03.2019_17.28.30
(Invoke-Parallel)	~ Created a job status indicator in the Console.  Very similar to the spinning baton in UNIX.
(Invoke-Parallel)	~ Updated the function to better code standards and added the default (Dynamic Help Menu) that all the other functions have.
(Invoke-Parallel)	~ Removed the Mandatory -InputObject parameter value to allow the Dynamic Help Menu to work
(Invoke-Parallel)	~ Added a Parameter Check after the (Dynamic Help Menu) function to make sure a Remote Host name is specified.
(Invoke-Parallel)	~ Updated the thread throttle limit from 20 to 50
(BGConsole)			~ Updated the passing of the commands process.  So functions like (Send-Item,Get-ADMachineInfo, etc.) can process from a parrallel thread without trying to connect to a remote host.
						Prior all newly invoked parrallel threads connected to a remote host by default, even if there were no action.
(BGConsole)			~ Updated the JSON return to validate if any commands were sent to a remote host.  If only using commands like (Send-Item, Get-ADMachineInfo, etc.) these commands do not process on the remote host.
(BGConsole)			~ Updated all the main regions to identify functions from processes and or scriptblocks.
(BGConsole)			~ Removed the Create Alias internal process.  Aliases are now part of the functions themselves.
(BGConsole)			~ Added Version as a allowed commands (Alias for Get-HostingVersion)
(BGConsole)			~ Added Ver as a allowed commands (Alias for Get-HostingVersion)
(BGConsole)			~ Added HM as a allowed commands (Alias for Build-HelpMenu)
(BGConsole)			~ Added ?? as an allowed commands(Alias for Build-HelpMenu)
(BGConsole)			~ Added LogDir as an allowed commands (Alias for Open-LogDir)
(BGConsole)			~ Added OLD as an allowed commands (Alias for Open-LogDir)
(BGConsole)			~ Added Open-LogDir as an allowed commands
(BGConsole)			~ Added Log as an allowed commands (Alias for Open-Log)
(BGConsole)			~ Added OL as an allowed commands (Alias for Open-Log)
(BGConsole)			~ Added Open-Log as an allowed commands
(BGConsole)			~ Added ScriptDir as an allowed commands (Alias for Open-ScriptDir)
(BGConsole)			~ Added OSD as an allowed commands (Alias for Open-ScriptDir)
(BGConsole)			~ Added Open-ScriptDir as an allowed commands
(BGConsole)			~ Added TransDir as an allowed commands (Alias for Open-TransDir)
(BGConsole)			~ Added OTD as an allowed commands (Alias for Open-TransDir)
(BGConsole)			~ Added Open-TransDir as an allowed commands
(BGConsole)			~ Added ToolsDir as an allowed commands (Alias for Open-ToolsDir)
(BGConsole)			~ Added OTools as an allowed commands (Alias for Open-ToolsDir)
(BGConsole)			~ Added Open-ToolsDir as an allowed commands
(BGConsole)			~ Added a BluGenie Initialization Header on load and reload
(BGConsole)			~ Updated the JSON return process to merge all offline (BGConsole) command and online (BGAgent) commands per (stream / Powershell Thread) 
(Build-HelpMenu)	~ Added Aliases (HelpMenu, HM, and ??).  These Alias are now part of the function instead of being created in BGCon.
(Get-VersionInfo)  	~ Updated the associated aliases to also support (Version,and Ver) in the BGConsole 
(Get-VersionInfo)  	~ Updated the entire function on how it displays requested information
(Send-Item)			~ New Agent function - Send-Item will copy files and folders to a new location.  Copying items can be over SMB and a WinRM Sesson.  
						Note: You can also copy items from a remote machine.
(Build-Command)		~ New Agent function - Build-Command will take a list of arguments and build out a command line string for [ScriptBlock] execution.
						The advantage of this script is to take arguments from the parent functions $PSBoundParameters and use them to execute nested cmdlets
(Open-LogDir)		~ New Console function - Open-LogDir is a quick way to open up the last processed log directory from the Console
(Open-Log)			~ New Console function - Open-Log is a quick way to open up the last processed log file from the Console
(Open-ScriptDir)	~ New Console function - Open-ScriptDir is a quick way to open up the current $ScriptDirectory from the Console
(Open-TransDir)		~ New Console function - Open-TransDir is a quick way to open up the current $TranscriptsDir from the Console
(Open-ToolDir)		~ New Console function - Open-ToolDir is a quick way to open up the current Tools Directory from the Console

35th Post
~ PostedDate: 	5/11/2019
~ BuildNum# : 	1905.0701
~ Notes:		Make sure the extract the .bin\x64\Tools\Blubin\WinlogBeat.zip to the current folder.  
				
(BGConsole)			~ Added $ToolsDirectory to the allowed commands
(BGConsole)			~ Fixed occuring error when running remote commands ("Error";"Cannot bind argument to parameter 'Name' because it is an empty string.")
(BGConsole)			~ Added agent function Install-Harvester
(Install-Harvester)	~ Added a new agent function called Install-Harvester.  Install-Harvester will copy and install the Windows Event Harvester (WinLogBeat)

36th Post
~ PostedDate: 	5/20/2019
~ BuildNum# : 	1905.1301
~ Notes:		

* Added Alias (Run) to function Invoke-Process
* Added client function Extract-ArchivePS2 to replace the PowerShell 5.0 version of the command
* Added Open-Log to Allowed Commands
* Added Open-LogDir to Allowed Commands
* Add Parameter ThreadCount to Invoke-Process
* Ran BluGenie Core Lib through a Code Analyzer and fix all outstanding flagged issues, warnings, and incompatibilities.
* Updated function Get-SystemInfo
    ~ Added Parameter and Function for OutUnEscapedJSON
    ~ Added Query for Domain Joined Information (This is a little more info than what is already there).  However the domain name is already being pulled.
    ~ Added Query for PowerShell Information
    ~ Added Query for Dot Net Information	

36th Post
~ PostedDate: 	5/22/2019
~ BuildNum# : 	1905.2001
~ Notes		:	* Created a separate script to Query PowerShell version information over WMI	

* Updated all source to support PowerShell 3.
* Updated process (Tools Config) to support PowerShell 3.0 
* Updated function Invoke-Process, Read the function help for details
* Updated function Pull-FirewallRules, Read the function help for details


37th Post
~ PostedDate: 	5/27/2019
~ BuildNum# : 	1905.2202
~ Notes		:	* Created a separate script to run a multi-threaded Decryption process

* Removed dependency for reverse DSN to be enabled
* Updated all the Dynamic help sub functions to version 1905.2401
* Added a section to copy downloaded files (sysinternal utilities or other) to their appropriate blubin sub directory locations
* Added function Install-SysMon, Read the function help for details
* Updated the Config.JSON file and removed the SysMon configuration.  BluGenie can now install SysMon on a remote host

38th Post
~ PostedDate: 	5/29/2019
~ BuildNum# : 	1905.2701
~ Notes		:	

 * [Invoke-NetStat] Process a quick filter using the default NetStat properties [ Foreign_Address | Local_Address | PID | Proto | State ]
 * [Invoke-NetStat] Process a second filter to process all other properties if none of the above are used to filter.
 * [Invoke-NetStat] Append all WMI Process information to each found NetStat process
 * [Invoke-NetStat] Updated the Walktrough Function to version 1905.2401
 * [Invoke-NetStat] Added Parameter ReturnObject, to return the needed information in an Object
 * [Invoke-NetStat] Added Parameter OutUnEscapedJSON, this will beautify the json data and clean up the formatting.
 * [Invoke-NetStat] Added Parameter -NotMatch, this will filter out references that do not match the -Pattern information.
 * [Invoke-NetStat] Added Parameter Check for all Bound parameters
 * [Invoke-NetStat] Changed the default FilterType value to [ Foreign_Address ]
 * [Get-SystemInfo] Added Query for OS Information
 * [Get-SystemInfo] Updated the LoggedOnUser query to remove ASCII Characters that will cause issues when converting to JSON.
 * [Get-SystemInfo] Updated the Walktrough Function to version 1905.2401

39th Post
~ PostedDate: 	5/30/2019
~ BuildNum# : 	1905.2702
~ Notes		:	Also updated Query-PowerShellVer (under the HelperScripts directory).  
				Same as BluGenie Console - Updated the reverse DNS call.  After further testing it was determined  that WMI does a reverse lookup anyway.
				Same as BluGenie Console - Updated the CurSytem reference to be the computer name from the remote machine validated with WMI

 * [BluGenie Console] 	Updated function Send-Item
 * [BluGenie Console] 	Updated the reverse DNS call.  After further testing it was determined  that WMI does a reverse lookup anyway.
 * [BluGenie Console] 	Updated the CurSytem reference to be the computer name from the remote machine validated with WMI
 * [Send-Item] 			Updated the Dynamic help sub functions to version 1905.2401

40th Post
~ PostedDate: 	6/01/2019
~ BuildNum# : 	1905.2703
~ Notes		:	After the initial testing I found that using the -Include param (Which is the param that made the search faster) doesn't work with -Force.  Meaning you can't
			    search hidden or system files with this option.  I made some last min adjustments but a good part of the speed inprovement was removed because of this.
				
				An issue I have not resolved as of yet.  If you have a file with "[" or "]" in it like
				** UPSLIC.TXT.bin.info@hos4your[dot]com **
				Powershell cannot action some cmdlet parameters.  One is pulling the stream information.  Not only does the cmdlet fail but all data in memory that is being queried
				with that file goes out the door as well.  This is a very ugly bug and it will take some time to fix.  
				
				I was able to query the entire C:\ for 3 files un under 10min.  Time may vary.
				
				The "CompletedWithErrors" is a known issue on Windows if the search path exceeds 248 characters.  Rem, I was search the entire C: drive from the root.
				
				"Date";"Action";"Runtime";"Status";"Details"
				"6/1/2019 6:45:19 PM";"Batch processing started";;"Started";
				"6/1/2019 6:54:11 PM";"ErrorMsg:'win7sp1001'";"8.87 minutes";"Error";"The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters."
				

				BluGenie.1901.2501.3.64:: run -system win7sp1001 -command 'Get-ChildItemList -SearchType File -Pattern "notepad.exe|cmd.exe|wordpad.*" -Recurse -SearchHidden'

				* Job Settings
				~ ThreadCount: 50
				~ SleepTimer: 200
				~ RunSpaceTimeout: 0
				~ MaxQueue: 0
				~ LogFile: C:\Source\kgkzcode\bluegenie\1905.2701\bin\x64\Transcripts\06.01.2019.18.45.19\06.01.2019.18.45.19.csv

				* Starting Jobs - 06.01.2019_18.45.19
				~ Creating runspace pool and session states
				~ Creating empty collection to hold runspace jobs
				~ Adding win7sp1001 to collection at 6/1/2019 6:45:19 PM
				~ Finish processing the remaining runspace jobs: 1
				~ "6/1/2019 6:54:11 PM";"Removing:'win7sp1001'";"8.87 minutes";"CompletedWithErrors";
				~ Closing the runspace pool
				* Completed Jobs - 06.01.2019_18.54.14				

 * [BluGenie Console] 	Updated function Get-ChildItemList
 * [Get-ChildItemList] 	Updated the Walktrough Function to version 1905.2401
 * [Get-ChildItemList] 	Updated ParameterSetResults with $PSBoundParameters and removed each seperate call.
 * [Get-ChildItemList] 	Updated the Search for FilterType Property (Name) to be Faster
 * [Get-ChildItemList] 	Cleaned up the entire search function
 * [Get-ChildItemList] 	Added Parameter OutUnEscapedJSON to show beautify the JSON file and clean up the formatting.
 * [Get-ChildItemList] 	Removed the need for the -ExactMatch 
 * [Get-ChildItemList] 	Added Parameter SearchHidden, this will search system and hidden files as well.  This will slow down the results a bit.  Default this is not set.
 * [Get-ChildItemList] 	Passing all paths at once.  Prior this was being sent 1 at a time through a loop.

41th Post
~ PostedDate:  6/03/2019
~ BuildNum# :  1905.2704
~ Notes  : 

Updates:
 * [Get-ChildItemList]  Updated the Path search to accommodate for double \\ in the path.
 * [Get-registry] Updated the Walktrough Function to version 1905.2401
 * [Get-registry] Updated the failed flag.  The process will no longer exit early.
 
Tested Command:
[Get-Childitemlist]
1. get-childitemlist -searchpath c:\ -pattern *.bat
2. get-childitemlist -searchpath c:\,c:\windows -pattern *.bat
3. get-childitemlist -searchpath c:\,c:\windows -pattern .*bat -SearchHidden
4. get-childitemlist -searchpath c:\windows -pattern notepad.exe -Recurse

Note the difference is wildcard usuage with test item 2 and test item 3.  
Item 2 is a Command Console Wildcard search
Item 3 is a RegEx Wildcard search

[Get-Registry]
1. Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options" -MatchData
2. Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options" -MatchValue
3. Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion" -MatchValue'

Note:  The above commands worked.  However the below command does not.  

4. Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ADs\Arroyo" -MatchValue (Failed - Still looking into it)


[42nd Post]
~ PostedDate:  6/04/2019
~ BuildNum# :  1905.2705
~ Notes  : 

** Updates **
 [Get-registry] Updated the Search function to the new script standards.  This fixed some searches coming back (Null).
 [Get-registry] Added parameter OutUnEscapedJSON to beautify the JSON Return data into a cleaner format
 [Get-registry] Removed parameter MaximumMatches, No longer needed
 [Get-registry] Added parameter RootKeyOnly.  This option will search only the search path.  It will not query sub keys.
 [Get-registry] Removed parameter ComputerName.  No longer needed
 [Get-registry] Added a total number of keys found to the return results
 [Get-registry] Updated the Array to be static.  This will speed up longer queries so the array doesn't get rebuilt each time, which is a default behavior for Powershell.

** Tested Command(s) **
# [Users] -> Volatile Environment (Pattern = * / MatchData = True)
Get-Registry -StartKey "HKEY_CURRENT_USER\Volatile Environment"

# [Users] -> Volatile Environment (Pattern = admin / MatchData = True)
Get-Registry -StartKey "HKEY_CURRENT_USER\Volatile Environment" -Pattern "admin" -MatchData

# [Users] -> Volatile Environment (Pattern = [RegEx]Start string with "HOME" / MatchData = True)
Get-Registry -StartKey "HKEY_CURRENT_USER\Volatile Environment" -Pattern "^HOME" -MatchData

# [Users] -> Volatile Environment (Pattern = [ExactMatch] NOT REGEX "USERDomain" / MatchValue = True)
Get-Registry -StartKey "HKEY_CURRENT_USER\Volatile Environment" -Pattern "USERDOMAIN" -MatchValue -ExactMatch

# [LOCAL_MACHINE] -> Image File Execution Options (Pattern = * / MatchData = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options"

# [LOCAL_MACHINE] -> Windows\CurrentVersion (Pattern = * / MatchData = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion"

# [LOCAL_MACHINE] -> Microsoft\ADs (Pattern = * / MatchData = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ADs" -MatchKey

# [LOCAL_MACHINE] -> Microsoft\ADs\Arroyo (Pattern = * / MatchData = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ADs\Arroyo" -MatchData

# [LOCAL_MACHINE] -> Microsoft\ADs\Arroyo (Pattern = [RegEx] ExactMatch with Regex looking for "Arroyo" / MatchKey Only = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ADs" -Pattern "^Arroyo$" -MatchKey

# [LOCAL_MACHINE] -> Microsoft\ADs\Arroyo (Pattern = [ExactMatch] NOT REGEX "Arroyo" / MatchKey Only = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ADs" -Pattern "Arroyo" -MatchKey -ExactMatch

# [LOCAL_MACHINE] -> CurrentVersion\Uninstall (Pattern = * / MatchValue = True)
Get-Registry -StartKey "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -Pattern "DisplayName" -MatchValue

# [Users] -> CurrentVersion\Uninstall (Pattern = * / MatchValue = True)
Get-Registry -StartKey "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall" -Pattern "DisplayName" -MatchValue

[43rd Post]
~ PostedDate:  6/05/2019
~ BuildNum# :  1905.2706
~ Notes  : 

** Updates **
 [BGConsole] Updated the current thread count from 50 to 200

** Tested Command(s) **

		
[44th Post]
~ PostedDate:  6/10/2019
~ BuildNum# :  1906.0701
~ Notes  : 

** Updates **
 [Get-ChildItemList]	Updated the Pattern to ( * ).  If -SearchHidden switch is used and the pattern equals ( * ), the RegEx equivalent will be used.
 [Get-ChildItemList]	Removed the -ExactMatch example as it is longer longer used
 [Get-ChildItemList]	Updated the search results query

** Tested Command(s) **

# Search All files and folders in C:\Temp
- Worked - Get-Childitemlist -searchpath c:\temp

# Search all *.txt files in C:\temp
- Worked - Get-Childitemlist -Searchpath c:\temp -pattern *.txt

# Search all *.txt and *.ps1 files in C:\temp
- Worked - Get-Childitemlist -searchpath c:\temp -pattern *.txt,*.ps1

# Search for Notepad.exe in C:\Users and C:\temp
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern notepad.exe

# Search for Notepad.exe in C:\Users and C:\temp and each sub directory
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern notepad.exe -Recurse

# Search for all files and folders named Notepad.exe in C:\Users and C:\temp.  Search even hidden items
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern ^notepad.exe$ -SearchHidden

# Search for all files and folders named Notepad.exe using [RegEx] in C:\Users and C:\temp.  Search even hidden items and search all sub directories
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern ^notepad.exe$ -SearchHidden -Recurse

# Search for all files and folders named Notepad.* using [RegEx] in C:\Users and C:\temp.  Search even hidden items
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern ^notepad.* -SearchHidden

# Search All files and folders files named Notepad.* using [RegEx] in C:\Users and C:\temp.  Search even hidden items and all sub directories
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern ^notepad.* -SearchHidden -Recurse

# Search for all files named Notepad.* in C:\Users and C:\temp.  Search even hidden items
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern notepad.* -SearchHidden -Recurse -SearchType File

# Search for all Directories named Notepad.* in C:\Users and C:\temp.  Search even hidden items
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern notepad.* -SearchHidden -Recurse -SearchType Directory

# Search for Notepad.exe in C:\Users and C:\temp and each sub directory
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern notepad.exe -Recurse -Signature

# Search for all files and folders named Notepad.exe using [RegEx] in C:\Users and C:\temp.  Search even hidden items and search all sub directories
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern ^notepad.* -SearchHidden -Recurse  -Signature

# Search for all files named Notepad.* in C:\Users and C:\temp.  Search even hidden items and Sub directories
- Worked - Get-Childitemlist -Searchpath c:\users,c:\temp -pattern "f2c7bb8acc97f92e987a2d4087d021b1" -SearchHidden -Recurse -SearchType File -FilterType Hash

45th Post]
~ PostedDate:  6/17/2019
~ BuildNum# :  1906.1001
~ Notes  : 

** Updates **
 [Get-ChildItemList]	Updated the entire search function to process the data quicker
 [Get-ChildItemList]	Removed the -SearchHidden parameter as it is no longer needed.  All searches look for hidden and system files without a parameter
 [Get-ChildItemList]	Added a parameter called Quick.  This will process the search in (CMD.EXE) which is faster than any .NET command
 [Get-ChildItemList]	Added Start, End, and Time Spane values to the returning JSON
 [Get-ChildItemList]	Updated all the Examples
 [Get-ChildItemList]	Added Error redirection for -Quick so long file path errors do not flood the main error log.
 [Get-ChildItemList]	Updated the Query to filter out nested (Junction Folder / Or Redirected Folder) information.  This happens because Windows supports Juntion Paths and AppData is also 'Application Data' and Local is also 'Local Settings' and running a query as Admin can continues to loop the Juntion path
 [Get-HashInfo]			Updated the Get-Item call to pull hidden file information.

** Tested Command(s) **

## OLD Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        0          0          141             Get-ChildItemList -SearchPath C:\Temp -Recurse -SearchHidden -Pattern '^notepad\.\w{3}$' 

## New Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        0          0          14              Get-ChildItemList -SearchPath C:\Temp -Recurse -Pattern '^notepad\.\w{3}$'

## New Process with Quick ( Quick is faster with more files and slightly slower with fewer files )
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        0          0          29              Get-ChildItemList -SearchPath C:\Temp -Recurse -Pattern '^notepad\.\w{3}$' -Quick

********************************

## OLD Process ( Note: Missing Data (1 Item found) )
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        1          50         54              Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -SearchHidden -Pattern '^notepad\.\w{3}$'

## New Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        0          24         93              Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '^notepad\.\w{3}$'

## New Process with Quick ( Quick is faster with more files and slightly slower with fewer files )
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        0          23         403             Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '^notepad\.\w{3}$' -Quick

********************************

## OLD Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 1        25         39         383             Get-ChildItemList -SearchPath C:\ -Recurse -Pattern '^notepad\.\w{3}$' -SearchHidden

## New Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        5          24         32              Get-ChildItemList -SearchPath C:\ -Recurse -Pattern '^notepad\.\w{3}$'
 
## New Process with Quick ( Quick is faster with more files and slightly slower with fewer files )
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        4          56         813             Get-ChildItemList -SearchPath C:\ -Recurse -Pattern '^notepad\.\w{3}$' -Quick

********************************

## OLD Process ( No Command Processed )

## New Process
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        6          52         527             Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '0e61079d3283687d2e279272966ae99d' -FilterType Hash

 
## New Process with Quick ( Quick is faster with more files and slightly slower with fewer files )
## Hours    Minutes    Seconds    Milliseconds    Command
## 0        5          4          236             Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '0e61079d3283687d2e279272966ae99d' -FilterType Hash -Quick

********************************

## Overall the biggest advantage is querying a lot of files.  I was able to query my entire C: drive for Notepad.* and it went from ( 1 hour 25 min ) to ( 5 min and 32 seconds )

Commands Tested:
* Get-ChildItemList -SearchPath C:\Temp -Recurse -Pattern '^notepad\.\w{3}$'
* Get-ChildItemList -SearchPath C:\Temp -Recurse -Pattern '^notepad\.\w{3}$' -Quick
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '^notepad\.\w{3}$'
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '^notepad\.\w{3}$' -Quick
* Get-ChildItemList -SearchPath C:\ -Recurse -Pattern '^notepad\.\w{3}$'
* Get-ChildItemList -SearchPath C:\ -Recurse -Pattern '^notepad\.\w{3}$' -Quick
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '0e61079d3283687d2e279272966ae99d' -FilterType Hash
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '0e61079d3283687d2e279272966ae99d' -FilterType Hash -Quick
* Get-ChildItemList -SearchPath C:\Windows -Pattern '^notepad\.\w{3}$'
* Get-ChildItemList -SearchPath C:\Windows -Pattern '^notepad\.\w{3}$' -Recurse
* Get-ChildItemList -SearchPath C:\Windows -Pattern '^notepad\.\w{3}$' -Permissions -ShowStreamValue -Signature
* Get-ChildItemList -SearchPath Temp -Recurse -SearchType File
* Get-ChildItemList -SearchPath Temp -Recurse -SearchType Directory
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '.*\.log|.*\.ps1|.*\.txt|^notepad\.\w{3}$'
* Get-ChildItemList -SearchPath C:\Temp,C:\Trash,C:\Users -Recurse -Pattern '.*\.log|.*\.ps1|.*\.txt|^notepad\.\w{3}$' -Quick -SearchType File


46th [Post]
 ~ PostedDate:  	6/20/2019
 ~ BuildNum# :  	1906.1701
 ~ Notes  	 : 		Overall speed improvement to Get-ComObjectInfo.  The old process would take up to 45 min to return.  If you just query the COM Objects and process the default data
					you will normally get results in less then 1 minute.  If resolving the paths of any file that doesn't have a default path in the registry it will double the time
					to roughly 2+ minutes and Resolving all information including the Root and Parent registry keys will delta the process roughly 4*.  However resolving the registry
					key is not normally needed which is why it is disabled by default.
				
## Updates ##
 * [Get-ComObjectInfo] Added the OutUnEscapedJSON switch to return an UnEscaped JSON report.
 * [Get-ComObjectInfo] Removed the ExactMatch switch.  The process will use RegEx only.
 * [Get-ComObjectInfo] Update the Walkthrough function to (Ver: 1905.2401)
 * [Get-ComObjectInfo] Rebuilt the ComObject Query to be faster
 * [Get-ComObjectInfo] Added a Start, End, and Time Span entry in the JSON Report
 * [Get-ComObjectInfo] Added the Parameter Set Results query to the JSON Report
 * [Get-ComObjectInfo] Added the Parameter ResolveRegKeyPaths which will identify and resolve the Component ID to the parent registry key.
 * [Get-ComObjectInfo] Added the Parameter TryToResolvePath which will query the $env:windir for the file that does not have a defined path in the Registry by default.
 * [Get-ComObjectInfo] Updated the FilterType Parameter to match all the neccessary Object Properties
 * [Get-ComObjectInfo] Added new file idendtifiers to the COM search list (*.exe, *.dll, *.ax, *.cpl, *.ocx).  Previsouly it was just (*.exe, & *.dll).
 * [Get-ComObjectInfo] Updated Help Examples
 
## BenchMark ##
 * Hours    Minutes    Seconds    Milliseconds    Command
 * 0        1          54         686             Get-COMObjectInfo
 
 * Hours    Minutes    Seconds    Milliseconds    Command
 * 0        2          36         265             Get-COMObjectInfo -TryToResolvePath
 
 * Hours    Minutes    Seconds    Milliseconds    Command
 * 0        9          47         925      		  Get-COMObjectInfo -TryToResolvePath -ResolveRegKeyPaths

## Tested Command(s) ##
 * Get-COMObjectInfo
 * Get-COMObjectInfo -TryToResolvePath
 * Get-COMObjectInfo -TryToResolvePath -ResolveRegKeyPaths
 * Get-COMObjectInfo -TryToResolvePath -FilterType OnDisk -NotMatch -Pattern 'True'
 * Get-COMObjectInfo -FilterType ComponentId -Pattern '{581b6888-ba70-3d90-a5f9-865f03d29c6b1}'
 * Get-COMObjectInfo -TryToResolvePath -FilterType Hash -Pattern '5808c2e483c1e42bdd69d8227e80b96f|7a53101d82f382fcbc883b485b01f4e4|a54e980e453ed712a6ecf639ca70f4db'
 * Get-COMObjectInfo -Pattern 'Security'
 * Get-COMObjectInfo -Pattern 'Security' -Algorithm SHA256
 
47th [Post]
 ~ PostedDate:  	6/25/2019
 ~ BuildNum# :  	1906.1702
 ~ Notes  	 : 		
				
## Updates ##
 * [Get-ComObjectInfo] 	Updated the default path for Where.exe.  On some clients the default path is corrupt.
 * [Invoke-NetStat] 	Added support for setting the Foreign Address as an IP or a Domain name.
 
## BenchMark ##
 
## Tested Command(s) ##

48th [Post]
 ~ PostedDate:  	07/01/2019
 ~ BuildNum# :  	1906.2501
 ~ Notes  	 : 		Updated the blu_sysmonconfig.xml to also exclude the sysmon64.exe
				
## Updates ##
 * [Install-SysMon] Updated installation default settings.
 * [Install-SysMon] Updated copy command to use Send-Item
 * [Install-SysMon] Added Start, End, and Time Spane values to the returning JSON
 * [Install-SysMon] Added parameter CopyOnly.  This will copy the files specified but not process an install
 * [Install-SysMon] Added a PSSession Manager to clean up any bad or offline PS Sessions per host
 * [Install-SysMon] Added a process to allow for low level errors to be sent to the main log.  By default only script fault errors would be sent.
 * [Install-SysMon] Updated the installation process to use Start-Process
 * [Install-SysMon] Updated application from Sysmon.exe to SysMon64.exe.  (Microsoft updated their process and Sysmon.exe will no longer process on x64 systems)
 * [Send-Item] Updated the default powershell copy command.  If the directory doesn't exist the data would be copied to the newly created directory, however
			   if the directory does exist the origianl directory will get copied to the new directory as a nested directory.  Now all copied directories
			   will get processed as nested directories.
 * [Send-Item] Added Start, End, and Time Spane values to the returning JSON
 * [Send-Item] Updated the error controls.
 * [BGCon] Updated function Send-Item, Read the function help for details
 * [BGCon] Updated function Install-Sysmon, Read the function help for details
 * [BGCon] Updated the Offline process for Install-Sysmon to push the (Computer Name) on the fly
 * [BGCon] Updated the Offline process for Install-Sysmon to only process the -CopyOnly parameter and all other parameters will get sent to the remote client
 
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * Install-Sysmon -install -forcecopy -forceinstall
 * Install-Sysmon -uninstall
 * Install-Sysmon
 * Install-Sysmon -forcecopy
 * Install-Sysmon -copyonly
 
 49th [Post]
 ~ PostedDate:  	07/02/2019
 ~ BuildNum# :  	1907.0201
 ~ Notes  	 : 		
				
## Updates ##
 * [Install-SysMon] Added support for both X86 and X64 systems.
 * [Install-SysMon] Added a Last Pass Uninstall Process to make sure there is no left over service information.
 
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * Install-SysMon -install -forcecopy -forceinstall
 * Install-SysMon -Uninstall
 * Install-SysMon
 * Install-SysMon -Destination "C:\BluGenie" -Path "C:\BluGenie\SysMon"
 * Install-SysMon -Destination "C:\BluGenie" -Path "C:\BluGenie\SysMon" -Forcecopy
 * Install-SysMon -Destination "C:\BluGenie\BluBin" -Forcecopy -CopyOnly
 * Install-SysMon -Destination "C:\BluGenie" -Path "C:\BluGenie\SysMon" -ForceCopy -ForceInstall
 * Install-SysMon -Uninstall -Path "C:\BluGenie\SysMon"
 
 50th [Post]
 ~ PostedDate:  	07/03/2019
 ~ BuildNum# :  	1907.0202
 ~ Notes  	 : 		I could not get Update-sysinternal to reload the current session.   Reload is a method of the core engine.
					They are in a sense seperate sessions.  The engine loads the (.lib) into memory and can interact with it.  However the
					internal functions cannot interact with the engine.
				
## Updates ##
 * [BGCon] 					Updated function Install-Harvester, Read the function help for details
 * [BGCon] 					Updated function Install-Sysmon, Read the function help for details
 * [BGCon] 					Updated function Send-Item, Read the function help for details
 * [BGCon] 					Updated function Build-Command (Helper Script Only), Read the function help for details
 * [BGCon] 					Updated function Install-Sysmon, Read the function help for details
 * [BGCon] 					Updated the Offline process for Install-Harvester to push the (Computer Name) on the fly
 * [BGCon] 					Updated the Offline process for Install-Harvester to only process the -CopyOnly parameter and all other parameters will get sent to the remote client
 * [Install-SysMon] 		Removed the Session Management process.  This is now done by the sub function Send-Item (Only).
 * [Install-SysMon] 		Updated the Source String to included all files.  This is no longer copying the directory.
 * [Install-Harvester] 		Removed the Session Management process.  This is now done by the sub function Send-Item (Only).
 * [Install-Harvester] 		Updated the Source String to included all files.  This is no longer copying the directory.
 * [Install-Harvester] 		Updated copy command to use Send-Item
 * [Install-Harvester] 		Added Start, End, and Time Spane values to the returning JSON
 * [Install-Harvester] 		Added parameter CopyOnly.  This will copy the files specified but not process an install
 * [Install-Harvester] 		Added a process to allow for low level errors to be sent to the main log.  By default only script fault errors would be sent.
 * [Install-Harvester] 		Updated the installation process to use Start-Process
 * [Install-Harvester] 		Removed WorkDir variable and updated the Installtion settings
 * [Send-Item] 				Added a PSSession Manager process to stop Other sessions from being removed or updated
 * [Send-Item] 				Updated the Copy Session sub functions to manage directory creation prior to item copy
 * [Build-Command] 			Update the Walkthrough Sub Function to (Ver: 1905.2401)
 * [Build-Command] 			Cleaned up any strings being processed that already have double quotes.  Prior, the string would end up with two pairs of double quotes in some instances.
 * [Update-Sysinternals] 	Update the Walkthrough Sub Function to (Ver: 1905.2401)
 * [Update-Sysinternals] 	Added Start, End, and Time Spane values to the output data
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * Install-Harvester -Install -Forcecopy -Forceinstall
 * Install-Harvester -Uninstall
 * Install-Harvester
 * Install-Harvester -Destination "C:\BluGenie\Harvester" -Path "C:\BluGenie\Harvester\winlogbeat.exe"
 * Install-Harvester -Destination "C:\BluGenie\Harvester" -Path "C:\BluGenie\Harvester\winlogbeat.exe" -Forcecopy
 * Install-Harvester -Destination "C:\BluGenie\Harvester" -Forcecopy -CopyOnly
 * Install-Harvester -Destination "C:\BluGenie\Harvester" -Path "C:\BluGenie\Harvester\winlogbeat.exe" -ForceCopy -ForceInstall
 * Install-Harvester -Uninstall -Path "C:\BluGenie\Harvester\winlogbeat.exe"


51th [Post]
 ~ PostedDate:  	07/05/2019
 ~ BuildNum# :  	1907.0203
 ~ Notes  	 : 		
				
## Updates ##
 * [Get-ComObjectInfo] Added utility data capturing for Where.exe
 * [Get-ComObjectInfo] Updated the default path for Where.exe.  The path is still not found when using $env:windir.  Updated to $env:systemdrive\Windows.
 * [Send-Item] Updated the Session name to escape any (-)'s in the computer name. 
 * [Get-ChildItemList] Updated the Temp directory Query to validate all paths before processing any searches.  This will speed up the query and help the quick search process.
 * [Install-Harvester] Added Path validation and reporting
 * [Install-Harvester] Updated the Path check process so if the path doesn't exits an error is processes and passed back to the main report.
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 
52nd [Post]
 ~ PostedDate:  	07/05/2019
 ~ BuildNum# :  	1907.0501
 ~ Notes  	 : 		There are 2 JSON configuration files attached to this post.
						1) Config.JSON_NormalSettings = This is the Normal configuration for a BluGenie Server.  These settings are higher than a default server configuration
						2) Config.JSON_MaxSettings = This is the Max configuration for a BluGenie Server.  These settings are the highest you can process on a server.  
					The WsMan configuration is also captured in the TransScript log file.
					
					Sample:
						Console Version: 1901.2501.3.64 
						Start Time: UID.9718.6263.9187.5746_2019.05.07_06.08.23.PM
						Loading Lib: C:\Source\kgkzcode\blugenie\1907.0501\bin\x64\BGCon.lib
						Lib Info: BGCon:1907.0501
						WSMan:\localhost\Shell

						Name                   Value     
						----                   -----     
						AllowRemoteShellAccess true      
						IdleTimeout            7200000   
						MaxConcurrentUsers     2147483647
						MaxShellRunTime        2147483647
						MaxProcessesPerShell   2147483647
						MaxMemoryPerShellMB    2147483647
						MaxShellsPerUser       2147483647

						WSMan:\localhost\Plugin\microsoft.powershell\Quotas

						Name                          Value     
						----                          -----     
						MaxMemoryPerShellMB           2147483647
						MaxIdleTimeoutms              2147483647
						MaxConcurrentUsers            2147483647
						IdleTimeoutms                 7200000   
						MaxProcessesPerShell          2147483647
						MaxConcurrentCommandsPerShell 2147483647
						MaxShells                     2147483647
						MaxShellsPerUser              2147483647

						WSManConfigUpdated = True
						BluGenie Core Libs Initialized - (07.05.2019_18.08.36)
						Hosting Version: 5.1.17763.503
						BGConLib: 1907.0501
						Complete Time: 2019.05.07_06.09.PM
				
## Updates ##
 * [BGCon] Added WSMan ConCurrent Session, Shell, Memory, User, and Command limit management.  The configuation is in Config.JSON and set when Blu Genie if first launched or Reloaded.
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * 

53rd [Post]
 ~ PostedDate:  	07/08/2019
 ~ BuildNum# :  	1907.0502
 ~ Notes  	 : 		
				
## Updates ##
 * [Get-ComObjectInfo] Updated the Where.exe process to only look for the file name.  When an item isn't found it was pulling the entire keyvalue string.  The string can still be a path and it would fail to search correctly.
 * [Get-ComObjectInfo] Added error management to the Command Where.exe.
 * [Send-Item] Removed the (-) from the Computer Name prior to building the Session Name variable.  PowerShell doesn't like (-)'s in variable names.
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * 
 
54th [Post]
 ~ PostedDate:  	07/10/2019
 ~ BuildNum# :  	1907.0503
 ~ Notes  	 : 		
				
## Updates ##
 * [Get-ChildItemList] Updated / Added back the (AllUsers) path process to automatically build a path to each user in the $env:SystemDrive\Users directory.  If there is an extended path it will be appended.
 * [Get-ChildItemList] Updated the (AllUsers) directory Query to validate all paths before processing any searches.  This will speed up the query and help the quick search process.
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * Get-ChildItemList -SearchPath "AllUsers\Downloads" -Recurse
 
55th [Post]
 ~ PostedDate:  	07/10/2019
 ~ BuildNum# :  	1907.0504
 ~ Notes  	 : 		
			
## Updates ##
 * [BGCon] Added a process to convert all (INT) types in the (JSON) output to (String) types prior to saving the output.  This was done for ES.
  
## BenchMark ##
 * None
 
## Tested Command(s) ##
 * Get-SystemInfo


56th *[Post]*
 ~ PostedDate:  	07/11/2019
 ~ BuildNum# :  	1907.1001
 ~ Notes  	 : 		
				
*## Updates ##*
 * [BGCon] Added a process to convert all output ( Command ) sections to an Array of Objects for ES.
 * [BGCon] Added a process to convert all output ( Hash ) sections to a ( String ) type for ES.
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * Get-SchTaskInfo
 
 
57th *[Post]*
 ~ PostedDate:  	07/12/2019
 ~ BuildNum# :  	1907.1002
 ~ Notes  	 : 		
				
*## Updates ##*
 * [BGCon] Added a process to convert all ( Value ) type properties to a ( String ) type for ES.
 * [BGCon] Added a process to convert all ( LastTaskResult ) properties to a ( String ) type for ES.
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * Get-SchTaskInfo
 * Invoke-NetStat
 
 
58th *[Post]*
 ~ PostedDate:  	07/15/2019
 ~ BuildNum# :  	1907.1003
 ~ Notes  	 : 		
				
*## Updates ##*
 * [BGCon] 				Updated the agent function Get-SystemInfo, Read the function help for more detials
 * [BGCon] 				Added host function Resolve-BgDnsName (Alias -> Ping), Read the function help for more detials
 * [BGCon] 				Added host function Connect-ToSystem (Alias -> Connect), Read the function help for more detials
 * [Get-SystemInfo] 	Updated the LoggedOnUsers type to an ( Array of Objects ) to support ES readability
 * [Resolve-BgDnsName]	(Resolve-BgDnsName) or (Ping) will validate a Domain Name and test if the system is online.
                        Validating a Domain Name will resolve an IP to a hostname.
                        If the system is pingable the OS type will be identified as well.
 * [Connect-ToSystem] 	(Connect-ToSystem) or (Connect) will spawn a remote session into the computer you specify
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * Get-SystemInfo
 * Resolve-BgDnsName 10.20.136.52
 * Resolve-BgDnsName -computername Win7SP1001
 * Ping 10.20.136.52
 * Ping -computerName Win7SP1001
 * Ping 10.20.136.52 -testconnection:$false
 * Ping 172.217.7.238 -timetolive 25
 * Connect-ToSystem -computername 10.20.136.52
 * Connect-ToSystem 10.20.136.52
 * Connect 10.20.136.52
 * Connect -computername 10.20.136.52
 * Connect Win7SP1001


59th *[Post]*
 ~ PostedDate:  	07/16/2019
 ~ BuildNum# :  	1907.1004
 ~ Notes  	 : 		
				
*## Updates ##*
 ** [Resolve-BgDnsName]* Added the TTL / TimeToLive object property.  This gives more info on the connection.
 ** [Connect-ToSystem]*  Added the -Force switch to bypass (the OS info, the Result Info, and the Resolved Info) checks
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * Ping 10.20.136.52
 * Ping Win7SP1001
 * Ping 10.20.136.59 (invalid host)
 * Connect 10.20.136.52
 * Connect Win7SP1001
 * Connect 10.20.136.59 (invalid host)
 * Connect 10.20.136.59 -force (invalid host)
 
60th *[Post]*
 ~ PostedDate:  	07/26/2019
 ~ BuildNum# :  	1907.1501
 ~ Notes  	 : 		Blugenie now supports command ordering and parallel command processing.  Currently this can only be done in the JSON file.
					Phase 1) commands          (normal synchronous command execution - no change from earlier versions)
					Phase 2) parallel commands (parallel command execution - this will start after all the commands from the "command section" finish executing)
					Phase 3) post commands     (synchronous command execution - this will start after all the commands from the "parallel section" finish executing)
					
					2 files have been added for testing.
						1) generichunt_ver_0007_non_parallel.json for (synchronous command execution)
						2) generichunt_ver_0007_parallel.json for (command ordering and parallel command execution)
				
*## Updates ##*
 ** [Get-ProcessList]** Updated the Walktrough Function to version 1905.2401
 ** [Get-ProcessList]** Updated ParameterSetResults with $PSBoundParameters and removed each seperate call.
 ** [Get-ProcessList]** Added Parameter OutUnEscapedJSON to show beautify the JSON file and clean up the formatting.
 ** [Get-ProcessList]** Removed the need for the -ExactMatch parameter
 ** [Get-ProcessList]** Added Start, End, and Time Spane values to the returning JSON
 ** [Get-ProcessList]** Added the ReturnObject switch.  This will return the data as an object instead of the normal Hash Table
 ** [Get-ProcessList]** Updated the Hash Table return data.  All values are now bound to a single object/header called ProcessList
 ** [Get-ProcessList]** Added the NotMatch switch to enable Not Matching pattern queries
 ** [BgCon]** 			Added agent parallel command processing
 ** [BgCon]** 			Added agent post command processing
 ** [BgCon]** 			Updated the JSON job process to support parallel commands
 ** [BgCon]** 			Updated the JSON job process to support post commands
 ** [BgCon]** 			Updated the JSON job process to support thread count management
 ** [BgCon]** 			Added agent function Start-RunSpace, Read the function help for more details.  
						You cannot make a direct call to this function
						This is a hidden function and can only be tested using a JSON job with parallel commands
 ** [BgCon]** 			Updated the agent function Get-ProcessList, Read the function help for details
 ** [BgCon]** 			Added BluGenie ASCII Art to the loading screen
 ** [BgCon]** 			Updated the Commands List to be more descriptive
  
  
*## BenchMark ##*
 *Command*    - run -system win7sp1001 -jsonjob "C:\Source\blugenie\1907.1501\bin\x64\JSONPacks\generichunt_ver_0007_non_parallel.json"
 *Results*    - ~ Starting Jobs - 07.25.2019_17.09.37
				~ "7/25/2019 5:14:56 PM";"Removing:'win7sp1001'";"*5.3 minutes*"
				~ Completed Jobs - 07.25.2019_17.14.56
 *Time Taken* - *5.3 minutes*
				
 *Command* - 	run -system win7sp1001 -jsonjob "C:\Source\blugenie\1907.1501\bin\x64\JSONPacks\generichunt_ver_0007_parallel.json"
 *Results* - 	~ Starting Jobs - 07.25.2019_17.45.46
				~ "7/25/2019 5:48:02 PM";"Removing:'win7sp1001'";"*2.26 minutes*"
				~ Completed Jobs - 07.25.2019_17.48.02
 *Time Taken* - *2.26 minutes*			
				
 
*## Tested Command(s) ##*
 * run -system win7sp1001 -command "Get-SystemInfo"
 * run -system win7sp1001 -jsonjob "C:\Source\blugenie\1907.1501\bin\x64\JSONPacks\generichunt_ver_0007_non_parallel.json"
 * run -system win7sp1001 -jsonjob "C:\Source\blugenie\1907.1501\bin\x64\JSONPacks\generichunt_ver_0007_parallel.json"


61st [Post]
 ~ PostedDate:  	07/29/2019
 ~ BuildNum# :  	1907.2901
 ~ Notes  	 : 		
				
## Updates ##
 * [BGCon] 				Updated agent function Start-RunSpace, Read the function help for more details.  
						You cannot make a direct call to this function
						This is a hidden function and can only be tested using a JSON job with parallel commands
 * [BGCon] 				Updated the JSON return so the parallel and post commands are reassembled back to the older format (single command list)
 * [BGCon] 				Added a header in the JSON return for parallel commands.  This way you can track what commands were sent in parallel
 * [BGCon] 				Added a header in the JSON return for post commands.  This way you can track what commands were sent in post
 * [BGCon] 				Updated agent function Get-ProcessList, Read the function help for more details.  
 * [Get-ProcessList] 	Updated the Process Object to always have the (Process_Hash) property.  If the item is $null a value of "not on disk" is assigned.
 * [Get-ProcessList] 	Updated the Help to support the -NotMatch switch.
 * [Get-ProcessList] 	Added Error controls around the Process ID Query.  If an item closes while Get-ProcessList is querying for information it can generate an error that the process no longer exist.
 * [Start-RunSpace] 	Added the Command String to the Job results.  This was done to identify which command ran which job item.
 * [Start-RunSpace] 	Updated the JobData value to only show Results data.  There is no other internally captured job data
 * [Start-RunSpace] 	Updated the return data from an object to a hashtable based on an error 'The specified wildcard pattern is not valid'
 * [Start-RunSpace] 	Added property management to the RunSpace pool.  The pool is being generated so fast the properties are not all in a settled state.
 
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * run -system win7sp1001 -jsonjob "C:\Source\blugenie\bin\x64\JSONPacks\generichunt_ver_0007_parallel.json"
 
 
 
62nd [Post]
 ~ PostedDate:  	08/01/2019
 ~ BuildNum# :  	1907.2902
 ~ Notes  	 : 		This was to help resolve a client issue based on their hostname naming standards.
				
## Updates ##
 * [BGCon]	Updated the IP detection method.  The older method would process a false positive of an IP if there were 3 ( Periods ) in the FQDN (<hostname>.<domain>.<domain>.com)
 * [BGCon]	Renamed the Commands function to BGCommands.
 * [BGCon]	Setup an Alias for Help to point to BGCommands.  The internal PowerShell Help is no longer valid.
 
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * ping win7sp1001
 * ping 10.20.136.52
 * ping WIN7SP1001.TestLab.Com
 * Connect 10.20.136.52
 * Connect WIN7SP1001.TestLab.Com
 * Run -System 10.20.136.52 -Command 'Get-SystemInfo'
 
 
 
62rd [Post]
 ~ PostedDate:  	08/01/2019
 ~ BuildNum# :  	1907.2903
 ~ Notes  	 : 		This was to help resolve a client issue with the IP to hostname resolution process not using the FQDN (fully qualified domain name)
				
## Updates ##
 * [BGCon]	Updated the IP to Hostname resolver.  This will now use whatever name is given back from DNS as the (connection/remote management) point
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * ping win7sp1001
 * ping 10.20.136.52
 * ping WIN7SP1001.TestLab.Com
 * Run -System 10.20.136.52 -Command 'Get-SystemInfo'
 * Run -System win7sp1001 -Command 'Get-SystemInfo'
 * Run -System WIN7SP1001.TestLab.Com -Command 'Get-SystemInfo'
 
 
 
63rd [Post]
 ~ PostedDate:  	08/01/2019
 ~ BuildNum# :  	1907.2904
 ~ Notes  	 : 		
				
## Updates ##
 * [BGCon]	Updated the Hostname to IP resolver to support the use of a FQDN (fully qualifed domain name)
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 * Run -System WIN7SP1001.TestLab.Com -Command 'Get-Processlist'
 
 
 
64th [Post]
 ~ PostedDate:  	08/01/2019
 ~ BuildNum# :  	1908.0101
 ~ Notes  	 : 		This update is to the helper script ( .\1907.2904\HelperScripts\Query-PowerShellVer\Query-PowerShellVer.ps1 )
				
## Updates ##
 * [Query-PowerShellVer]	Updated the IP detection method.  The older method would process a false positive of an IP if there were 3 ( Periods ) in the FQDN (<hostname>.<sub-domain>.<domain>.com)
 * [Query-PowerShellVer]	Added FQDN as a display property
 * [Query-PowerShellVer]	Updated the connection method to use the FQDN
 * [Query-PowerShellVer]	Updated the Address property.  This property was set based on what you specified as the computer name.  Now a Hostname or FQDN will be resolved to an IP and the value will be IP based.
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 # I used an IP, Valid Hostname, Invalid Hostname, and Valid FQDN in the test command below.
 * .\Query-PowerShellVer.ps1 -IP 10.20.136.10,win7sp1001,win10,win10001.testlab.com
 
 ## Output ##
 
"Address"		,"Online"	,"ComputerName"		,"FQDN"							,"OS"										,"OSVersion"	,"PowerShell3"	,"PowerShellVer"
"10.20.136.10"	,"True"		,"NYCWTSTADC001"	,"NYCWTSTADC001.TestLab.Com"	,"Microsoft Windows Server 2019 Standard"	,"10.0.17763"	,"True"			,"5.1.17763.1"
"10.20.136.52"	,"True"		,"WIN7SP1001"		,"WIN7SP1001.TestLab.Com"		,"Microsoft Windows 7 Enterprise "			,"6.1.7601"		,"True"			,"3.0"
"win10"			,"False"	,""					,""								,""											,""				,""				,""
"10.20.136.51"	,"True"		,"WIN10001"			,"Win10001.TestLab.Com"			,"Microsoft Windows 10 Enterprise"			,"10.0.18362"	,"True"			,"5.1.18362.1"
 
 
65th [Post]
 ~ PostedDate:  	08/06/2019
 ~ BuildNum# :  	1907.2905
 ~ Notes  	 : 		This was to resolve an issue with the JSON file being configured to run (1 command) in the parallel command section.  Previsouly the parallel command
					section was designed to run multiple commands.  If a single command was defined to that section the process would bypass it because it was looking for multiple
					commands.  Running a single command in the Parallel command section was not a normal thing but in testing this became an issue so it has been resolved.
					
					(6) New Json files have been added for testing.
					
					GenericHunt for both (non_parallel) and Parallel commands has been updated to Ver 0008.  Please be careful when editing the .JSON file.  I noticed the Range header
					was removed and a new IP header was put in it's place.  That would not work with BluGenie.
				
# Updates #
 * [BGCon] 			Updated the BluGenie Agent function called ( Start-RunSpace ).  Read the function help for more details.
 * [BGCon] 			Updated the ParallelCommands process to fix the error ("Property 'parallelcommands' cannot be found on this object; make sure it exists and is settable.")
 * [BGCon] 			Updated the ParallelCommands section variables to track issues better.  There were no errors but based on the values being the same name it was harder to track the above error
 * [BGCon] 			Updated the PostCommands section variables to track issues better.  There were no errors but based on the values being the same name it was harder to track
 * [Start-RunSpace] Updated the process to create a new PowerShell instance (Short Hand - Easier to manage)
 * [Start-RunSpace] Added a process to remove any hung Job Data.  This could cause the session to freeze.
 * [Start-RunSpace] Updated the internal function ( Process-FinishedJobs ).  Added a new data capture process.
 * [Start-RunSpace] Updated Job manager to double check the job count
 * [Start-RunSpace] Updated the entire process to support a single command/job.  Previously it was only working with multiple commands/jobs.
  
# BenchMark #
 * None
 
# Tested Command(s) #
	~ Command Section JSON Test Files
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Command_Section_Single_Command.json'
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Command_Section_Multiple_Commands.json'
 
	~ Parallel Section JSON Test Files
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Parallel_Section_Single_Command.json'
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Parallel_Section_Mulitple_Commands.json'
 
	~ Post Section JSON Test Files #
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Post_Section_Single_Command.json'
		 * run -system win7sp1001 -jsonjob 'C:\Source\blugenie\1907.2905\bin\x64\JSONPacks\Test_Post_Section_Mulitple_Commands.json'


66th [Post]
 ~ PostedDate:  	08/07/2019
 ~ BuildNum# :  	1907.2906
 ~ Notes  	 : 		Added x86 support for BluGenie under \bin\x86
				
*## Updates ##*
 * [Systems] 			Systems is an add-on to manage the System list in the BluGenie Console
 * [Commands]			Commands is an add-on to manage the Command list in the BluGenie Console
 * [ParallelCommands]	ParallelCommands is an add-on to manage the Parallel Command list in the BluGenie Console
 * [PostCommands]		PostCommands is an add-on to manage the Post Command list in the BluGenie Console
 * [Range]				Range is an add-on to manage the IP Range in the BluGenie Console
 * [Invoke-FileBrowser]	Invoke-FileBrowser will display a graphical user interface to select a file.
						Note:  This is an internal command.  Current it can be tested using ( Json -Job '' ) or the ( JSON -Import ) commands
 * [Wipe]				Wipe is an add-on to reset all set options in the BluGenie Console
 * [Json]				JSON is an add-on to manage the JSON job data in the BluGenie Console
 * [Settings]			Settings is an add-on to show all defined values for the current session in the BluGenie Console
 * [Build-HelpMenu]		Added Command ( Systems ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( ParallelCommands ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( PostCommands ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( ThreadCount ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Range ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Json ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Wipe ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Settings ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Resolve-BgDnsName ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Ping ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Connect-ToSystem ) to the validation Set List
 * [Build-HelpMenu]		Added Command ( Connect ) to the validation Set List
 * [BGCon]				Added a BluGenie Host function called ( Systems ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host function called ( Commands ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( ParallelCommands ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( PostCommands ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( ThreadCount ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( Range ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( Invoke-FileBrowser ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( JSON ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( Wipe ).  Read the function help for more details.
 * [BGCon]				Updated BGCon.ps1 to run in PowerShell for testing purposes.  The .lib detects if the session is a console session or an ISE session.  
						If an ISE session is detected, all console related actions are silenced.
 * [BGCon]				Updated the BluGenie Client function called ( Build-HelpMenu ).  Read the function help for more details.
 * [BGCon]				Added a BluGenie Host fucntion called ( Settings ).  Read the function help for more details.
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
Command: 		Systems
Description: 	This will give you a list of identified systems

Command: 		Systems 'TestPC1'
Description: 	This will add the specified systems to the system list

Command: 		Systems -Add 'TestPC1','TestPC2','10.20.136.50','10.20.136.50'
Description: 	This will add all of the specified systems to the system list

Command: 		Systems -Remove ^\d
Description: 	The -Remove command excepts (RegEx).  This will remove all items with a digit as the first character

Command: 		System -Remove Test
Description: 	The -Remove command excepts (RegEx).  This will remove all items with Test in the name

Command: 		Systems -Remove '^TestPC1$','^TestPC2$'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with that have an exact match of the system name

Command: 		Systems -RemoveIndex 1
Description: 	This will remove the first item in the system list

Command: 		Systems -RemoveIndex 1,10,12,15
Description: 	This will remove all the items from the system list that have the specified index value.
				Note:  To get the Index value you can run (Systems).  This will show the system list and the index values.

Command: 		Systems -RemoveAll
Description: 	This will remove all the systems from the System list

Command:		Commands
Description: 	This will give you a list of identified Commands
    
Command:		Commands 'Get-SystemInfo'
Description: 	 This will add the specified Commands to the Command list
    
Command:		Commands -Add 'Get-SystemInfo','Invoke-Netstat','Get-ProcessList'
Description: 	This will add all of the specified Commands to the Command list
    
Command:		Commands -Remove '^G'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with a ( G ) as the first character
    
Command:		Command -Remove 'Get-SystemInfo'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with 'Get-SystemInfo' in the name
    
Command:		Commands -Remove '^Get-SystemInfo$','^Get-ProcessList$'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with that have an exact match of the Command name
    
Command:		Commands -RemoveIndex 1
Description: 	This will remove the first item in the Command list
    
Command:		Commands -RemoveIndex 1,10,12,15
Description: 	This will remove all the items from the Command list that have the specified index value.
				Note:  To get the Index value you can run (Commands).  This will show the Command list and the index values.
    
Command:		Command -RemoveAll
Description: 	This will remove all commands from the Command list

Command:		ParallelCommands
Description: 	This will give you a list of identified Parallel Commands
    
Command:		ParallelCommands 'Get-SystemInfo'
Description: 	This will add the specified Command to the Parallel Command list
    
Command:		ParallelCommands -Add 'Get-SystemInfo','Invoke-Netstat','Get-ProcessList'
Description: 	This will add all of the specified Commands to the Parallel Command list
   
Command:		ParallelCommands -Remove '^G'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with a ( G ) as the first character
  
Command:		ParallelCommands -Remove 'Get-SystemInfo'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with 'Get-SystemInfo' in the name
   
Command:		ParallelCommands -Remove '^Get-SystemInfo$','^Get-ProcessList$'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with that have an exact match of the Parallel Command name
    
Command:		ParallelCommands -RemoveAll
Description: 	This will remove all items from the Parallel Command List
   
Command:		ParallelCommands -RemoveIndex 1
Description: 	This will remove the first item in the Command list
    
Command:		ParallelCommands -RemoveIndex 1,10,12,15
Description: 	This will remove all the items from the Command list that have the specified index value.
				Note:  To get the Index value you can run ( ParallelCommands ).  This will show the Parallel Command list and the index values. 

Command:		PostCommands
Description: 	This will give you a list of identified Post Commands
    
Command:		PostCommands 'Get-SystemInfo'
Description: 	This will add the specified Command to the Post Command list
    
Command:		PostCommands -Add 'Get-SystemInfo','Invoke-Netstat','Get-ProcessList'
Description: 	This will add all of the specified Commands to the Post Command list
    
Command:		PostCommands -Remove '^G'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with a ( G ) as the first character
    
Command:		PostCommands -Remove 'Get-SystemInfo'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with 'Get-SystemInfo' in the name
    
Command:		PostCommands -Remove '^Get-SystemInfo$','^Get-ProcessList$'
Description: 	The -Remove command excepts (RegEx).  This will remove all items with that have an exact match of the Post Command name
    
Command:		PostCommands -RemoveIndex 1
Description: 	This will remove the first item in the Command list
    
Command:		PostCommands -RemoveIndex 1,10,12,15
Description: 	This will remove all the items from the Command list that have the specified index value.
				Note:  To get the Index value you can run ( PostCommands ).  This will show the Post Command list and the index values.
    
Command:		PostCommands -RemoveAll
Description: 	This will remove all the items from the Post Command list

Command:		Range
Description: 	This will give you the currect IP Range value
    
Command:		Range 10.20.136.1-10.20.136.50
Description: 	This will update the current IP Range value to 10.20.136.1-10.20.136.50
    
Command:		Range -Update 10.20.136.1-10.20.136.150
Description: 	This will update the current IP Range value to 10.20.136.1-10.20.136.150
    
Command:		Range -Remove
Description: 	This will remove the set IP Range value

Command:		Wipe
Description: 	This will reset all options in the BluGenie Console
				*  Systems
				*  Range
				*  Commands
				*  ParallelCommands
				*  PostCommands
				*  JSONJob
				*  ThreadCount

Command:		JSON
Description: 	This will show the currently defined JSON job file
    
Command:		JSON -Job <File Path>
Description: 	This will set the default JSON job to the file you specified
    
Command:		JSON -Job ''
Description: 	This will display a GUI to set the default JSON job to the file you specified
    
Command:		JSON -Review
Description: 	 This will display the current settings in the set JSON job file
    
Command:		JSON -Import
Description: 	This will import the JSON file values into the BluGenie console for editing
				Note:  The JSON Job value will no longer be set.  The options are now in the console.
				Note:  If a Job is not set/defined a GUI will allow you to set the job file before proceeding to import it.
    
Command:		JSON -Remove
Description: 	This will remove the JSON job file value
    
Command:		JSON -Export <File Name>
Description: 	This will save the current BluGenie console configuration to a JSON file with the name you specify.
				Note:  All JSON files are saved in the current applications parent directory under (JSONPacks)

Command:		Settings
Description: 	This will output the current BluGenie Console Settings


67th [Post]
 ~ PostedDate:  	08/14/2019
 ~ BuildNum# :  	1908.0901
 ~ Notes  	 : 		Added a new JSON Pak file called.  TestParallelwGetSystemInfo.json
					This JSON file has all the commands that were sent to me for testing.  Everything is working fine.
				
*## Updates ##*
 * [BGCon] 				Updated the BluGenie Host function called ( Send-Item ).  Read the function help for more details.
 * [BGCon] 				Updated the JSON return structure after supporting FQDN.  Easier data captureing from remote hosts.
 * [BGCon] 				Updated the BluGenie Client function called ( Get-HashInfo ).  Read the function help for more details.
 * [BGCon] 				Updated the BluGenie Client fucntion called ( Get-ProcessList ). Read the function help for more details.
 * [BGCon] 				Updated the BluGenie Client fucntion called ( Get-SystemInfo ). Read the function help for more details.
 * [Send-Item] 			Removed the (.) from the Computer Name prior to building the Session Name variable.  PowerShell doesn't like (.)'s in variable names.
						Note:  This became an issue once we started supporting FQDN's.
 * [Get-HashInfo] 		Updated the overall process of this function so it can be run on its own.  Previsouly this was setup as a helper/sub function for other functions.
 * [Get-HashInfo] 		Updated the Sub Function WalkThrough to (Ver: 1905.2401)
 * [Get-HashInfo] 		Updated the ( Path ) variable to support multiple paths
 * [Get-HashInfo] 		Added a list output for more than 1 item to have the Hash listed for
 * [Get-HashInfo] 		Added parameter and process for ( ReturnObject )
 * [Get-HashInfo] 		Added parameter and process for ( OutUnEscapedJSON )
 * [Get-HashInfo] 		Added $PSBoundParameters to the returning JSON
 * [Get-HashInfo] 		Added Start, End, and Time Span values to the returning JSON
 * [Get-ProcessList] 	Updated the example help section and removed all the -ExactMatch help items
 * [Get-SystemInfo] 	Updated the LoggedOnUsers process to pull a specific property count.  If there was a null value in any of the properties the data would move.
  
*## BenchMark ##*
 * None
 
*## Tested Command(s) ##*
 Command: run -system 'win7sp1001.testlab.com','10.20.136.51','Win10001' -Command 'Install-SysMon'
 Description: Ran (Install-SysMon) on system(s) using FQDN, IP, and NetBios / Host Name.
 
 Command:		Get-HashInfo -Path C:\Windows\Notepad.exe
 Description: 	This will return the (MD5) hash value for C:\Windows\Notepad.exe

 Command:		Get-HashInfo -Path C:\Windows\Note* -Algorithm SHA256
 Description: 	This will return the (SHA256) hash value for C:\Windows\Notepad.exe

 Command:		Get-HashInfo -Path '%Windir%\notepad.exe'
 Description: 	This will convert the path to the literal path and return the (MD5) hash value for C:\Windows\Notepad.exe
 
 Command:		Get-HashInfo -Path '%Windir%\notepad.exe' -ReturnObject
 Description: 	This will convert the path to the literal path and return the (MD5) hash value in an object format
    
    Output: 
    
        Path                 LiteralPath            HashValue                        Comment
        ----                 -----------            ---------                        -------
        %Windir%\notepad.exe C:\Windows\notepad.exe f1139811bbf61362915958806ad30211
    
 Command:		Get-HashInfo -Path '%Windir%\notepad.exe','C:\TestFile.exe','C:\BadFileName.001' -OutUnEscapedJSON
 Description: 	This will convert the path(s) to literal path(s) and return the (MD5) hash value in a beautified JSON format.
    
    Output: 
    
        {
            "HashInfo":  {
                             "Hash":  [
                                          {
                                              "Algorithm":  "MD5",
                                              "Path":  "%Windir%\notepad.exe",
                                              "LiteralPath":  "C:\Windows\notepad.exe",
                                              "HashValue":  "f1139811bbf61362915958806ad30211",
                                              "Comment":  null
                                          },
                                          {
                                              "Algorithm":  "MD5",
                                              "Path":  "C:\TestFile.exe",
                                              "LiteralPath":  "Path Not Found",
                                              "HashValue":  null,
                                              "Comment":  "Cannot find path 'C:\TestFile.exe' because it does not exist."
                                          },
                                          {
                                              "Algorithm":  "MD5",
                                              "Path":  "C:\BadFileName.001",
                                              "LiteralPath":  "Path Not Found",
                                              "HashValue":  null,
                                              "Comment":  "Cannot find path 'C:\BadFileName.001' because it does not exist."
                                          }
                                      ],
                             "EndTime":  "Tuesday, August 13, 2019 1:20:19 PM",
                             "ElapsedTime":  {
                                                 "Days":  0,
                                                 "Hours":  0,
                                                 "Milliseconds":  0,
                                                 "Minutes":  0,
                                                 "Seconds":  0
                                             },
                             "StartTime":  "Tuesday, August 13, 2019 1:20:19 PM"
                         }
        }
     
 Command:		Get-HashInfo -Path $($(Get-ChildItemList -SearchPath 'C:' -SearchType File -ReturnObject).FullName) -Algorithm SHA512
 Description: 	This will search the C:\ drive for all file types and process a return with the (SHA512) hash value(s)

 Command:		?? Get-ProcessList
 Description: 	Review the help section
 
 Command:		run -system 'win7sp1001.testlab.com','10.20.136.51','Win10001','BadComputerName' -Command 'Get-SystemInfo'
 Description: 	Ran (Get-SystemInfo) on system(s) using FQDN, IP, and NetBios / Host Name and a Bad / Offline Computer name.
 
 Command:		run -system win7sp1001 -jsonjob 'C:\Source\BluGenie\bin\x64\JSONPacks\TestParallelwGetSystemInfo.json'
 Description:	This command runs the commands I was asked to test.  There seemed to be an issue with Get-SystemInfo processing twice.  But I have not seen any issues.
 
 
68th [Post]
 ~ PostedDate:  	08/14/2019
 ~ BuildNum# :  	1908.1401
 ~ Notes  	 : 		Update based on request.
				
# Updates #
 * [Get-ProcessList] 	Added new items to the process property table
							* ParentProcessId
							* ParentProcessName
							* ParentProcessPath
							* ParentProcessHash
 * [Get-HashInfo] 		Updated the Path count check.  It was not pulling the count value correctly.
  
# BenchMark #
 * None
 
# Tested Command(s) #
 Command:		Run -System Win7sp1001 -Command "Get-ProcessList -Pattern 'powershell_ise.exe'"
 Description: 	Started cmd.exe > then from Cmd.exe I started PowerShell_Ise.exe.  I ran the command above to give me the process information and the parent process information.  Output below...
				{
					"ProcessList":  {
										"DataPull":  {
														 "status":  true,
														 "timestamp":  "08.14.2019.09.59.26",
														 "comment":  null
													 },
										"TotalProcessCount":  153,
										"ElapsedTime":  {
															"Days":  0,
															"Hours":  0,
															"Milliseconds":  252,
															"Minutes":  0,
															"Seconds":  33
														},
										"StartTime":  "Wednesday, August 14, 2019 9:59:16 AM",
										"ParameterSetResults":  {
																	"Pattern":  "powershell_ise.exe",
																	"OutUnEscapedJSON":  {
																							 "IsPresent":  true
																						 }
																},
										"EndTime":  "Wednesday, August 14, 2019 9:59:50 AM",
										"QueryCount":  1,
										"Processes":  {
														  "Caption":  "powershell_ise.exe",
														  "CommandLine":  "powershell_ise.exe ",
														  "Name":  "powershell_ise.exe",
														  "ProcessId":  5196,
														  "SessionId":  1,
														  "Path":  "C:\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe",
														  "ParentProcessId":  4880,
														  "ParentProcessName":  "cmd",
														  "ParentProcessPath":  "C:\Windows\system32\cmd.exe",
														  "ComputerName":  "WIN10DEV",
														  "ProcessOwner":  "TestLab\Admin",
														  "Process_Hash":  "30a2792a2428cd06cfec23ecb074889a",
														  "ParentProcessHash":  "9d59442313565c2e0860b88bf32b2277"
													  }
									}
				}
				
	Command:		Get-HashInfo -Path '%Windir%\notepad.exe'
	Description: 	This will return the (MD5) hash value (only)
	
	Command:		Get-HashInfo -Path '%Windir%\notepad.exe','C:\Windows\system32\cmd.exe'
	Description: 	This will convert the path(s) to literal path(s) and return the (MD5) hash value
 
 
69th [Post]
 ~ PostedDate:  	08/14/2019
 ~ BuildNum# :  	1908.1402
 ~ Notes  	 : 		Updated based on request.  ELK import is not working with Powershell's standard JSON formatting.	
				
 # Updates #
 * [Get-ProcessList]	Force Type Cast of the following items
							* [String] Caption
							* [String] CommandLine
							* [String] Name
							* [String] Path
							* [Int]    ParentProcessId
							* [String] ParentProcessName
							* [String] ParentProcessPath
							* [String] ComputerName
							* [String] ProcessOwner
							* [String] Process_Hash
							* [String] ParentProcessHash
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 Command:		Run -System Win7sp1001 -Command 'Get-ProcessList' 
 Description:	Standard Get-ProcessList command call.
 
70th [Post]
 ~ PostedDate:  	09/19/2019
 ~ BuildNum# :  	1908.2201
 ~ Notes  	 : 		Removed support for the YAMLNET.dll.  Converted the Settings and Trap information to YAML without any 3rd assemblies.  Updated the 
					Config.JSON and removed the YAMLNET.dll support as well.
				
 # Updates #
 * [BgCon]				Added support for a JobTimeOut.  The default JobTimeOut is set to 120 min.
							Note:  This is only available in the Console right now  with the -JobTimeOut switch used with the Run command.
 * [Resolve-BgDnsName] 	Added 2nd process for TTL detection
 * [Resolve-BgDnsName] 	Added Routing Hop detection.  The OS can still be picked up within ( 10 ) Routing hops.  If TTL is 124 the OS is detected as Windows with a normal TTL of 128.
 * [Resolve-BgDnsName] 	Added Error trapping around TTL Return
 * [Invoke-PSQuery]		Added a new function Invoke-PSQuery with Alias [PSQuery].  Invoke-PSQuery will sweep one or more IP addresses to determine if PowerShell 3 or higher is installed.
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 Command:		Resolve-BgDnsName -ComputerName 172.217.15.110
 Description:	This will try and resolve the IP to a Domain name.  It will also see if the system is online.  The time to live is set to 25ms however the default is 12.
				The items will be returned in an object
 
 Command:		Run -System Win7sp1001 -Command 'Get-SystemInfo' -JobTimeOut 0 
 Description:	This will set the timeout to Infinite
 
 Command:		Run -System Win7sp1001 -Command 'Get-SystemInfo' -JobTimeOut 30 
 Description:	This will set the timeout to 30 per session
 
 Command:		Invoke-PSQuery -System 10.20.136.51
 Description:	This will scan the ip address specified and pull System and PowerShell information if the computer is Online!
				A report is generated by default is the $Transcript directory called "PingReport*.csv"
    
 Command:		Invoke-PSQuery -Range "10.20.136.50-10.20.136.100"
 Description:	This will scan the ip address range specified and pull System and PowerShell information if the computer is Online!
    
 Command:		Invoke-PSQuery -System "10.20.136.1","10.20.136.2","10.20.136.3","10.20.136.4","10.20.136.5","10.20.136.10","10.20.136.11","10.20.136.50","10.20.136.51","10.20.136.52"
 Description:	This will scan the ip addresses specified and pull System and PowerShell information if the computer is Online!
    
 Command:		Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -Force
 Description:	This will scan the hosts and pull System and PowerShell information if the computer is Online!
				Using the -Force switch will force the WMI connection and not run a Pre (Test Connect / Ping) prior

 Command:		Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -Force -PassThrough
 Description:	This will scan the hosts and pull System and PowerShell information if the computer is Online!
				Using the -Force switch will force the WMI connection and not run a Pre (Test Connect / Ping) prior
				Using the -PassThrough switch will update the BGConsole System Array with all systems that are PowerShell 3 compliant and have over 1gb of free memory.

 Command:		Invoke-PSQuery -Range "10.20.136.50-10.20.136.100" -PingTimeOut 5
 Description:	This will scan the ip address range specified and pull System and PowerShell information if the computer is Online!
				The Ping Time Out is set for 5 ms.  This speeds up the process for systems that are not online.  The default value is 15 which is still very fast.
 
 71st [Post]
 ~ PostedDate:  	09/24/2019
 ~ BuildNum# :  	1909.2001
 ~ Notes  	 : 		Added support for node tracking in the transcripts\job directory and fixed the timeout value from 120 seconds to 120 minutes.
				
 # Updates #
 * [BGCon] 				Updated the BluGenie Host function called ( Invoke-Process ). Read the function help for more details.
 * [BGCon] 				Updated the BluGenie Host function called ( Invoke-Parallel ). Read the function help for more details.
 * [BGCon] 				Updated the BGCommands Help Menu to support the new function Invoke-PSQuery and PSQuery
 * [BGCon] 				Updated the Dynamic Help function to support the new function Invoke-PSQuery and PSQuery
 * [Invoke-Parallel] 	Updated the JSON return job, per node, to be managed in a specific diretory - Added two new directories (OutOfMemory, and TimedOut)
							* OutOfMemory          - Default directory.  Each node will get a specific .JSON file created as the parent identifier to show where the process is currently running.
							* TimedOut             - If the Job for that host is successful the identifer will be updated with the return data and moved to the completed directory
 * [Build-HelpMenu] 	Added Command ( Invoke-PSQuery ) to the validation Set List
 * [Build-HelpMenu] 	Added Command ( PSQuery ) to the validation Set List
 * [Build-HelpMenu] 	Added Command ( Run ) to the validation Set List
 * [Build-HelpMenu] 	Added Command ( Invoke-Process ) to the validation Set List
 * [Invoke-PSQuery] 	Updated the internal help information
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 
 Command: 		Invoke-PSQuery -System 10.20.136.51
 Description:	This will scan the ip address specified and pull System and PowerShell information if the computer is Online!
				A report is generated by default is the Transcripts\<Job> directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"
    
 Command: 		Invoke-PSQuery -Range "10.20.136.50-10.20.136.100"
 Description:	This will scan the ip address range specified and pull System and PowerShell information if the computer is Online!
				A report is generated by default is the Transcripts\<Job> directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"

 Command: 		Invoke-PSQuery -System "10.20.136.1","10.20.136.2","10.20.136.3","10.20.136.4","10.20.136.5","10.20.136.10","10.20.136.11","10.20.136.50","10.20.136.51","10.20.136.52"
 Description:	This will scan the ip addresses specified and pull System and PowerShell information if the computer is Online!
				A report is generated by default is the Transcripts\<Job> directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"
    
 Command: 		Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -Force
 Description:	This will scan the hosts and pull System and PowerShell information if the computer is Online!
                Using the -Force switch will force the WMI connection and not run a Pre (Test Connect / Ping) prior
    
 Command: 		Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -Force -PassThrough
 Description:	This will scan the hosts and pull System and PowerShell information if the computer is Online!
				Using the -Force switch will force the WMI connection and not run a Pre (Test Connect / Ping) prior
				Using the -PassThrough switch will update the BGConsole System Array with all systems that are PowerShell 3 complient and have over a 1gb of free memory.

 Command: 		Invoke-PSQuery -Range "10.20.136.50-10.20.136.100" -PingTimeOut 5
 Description:	This will scan the ip address range specified and pull System and PowerShell information if the computer is Online!
				The Ping Time Out is set for 5 ms.  This speeds up the process for systems that are not online.  The default value is 15 which is still very fast.
				A report is generated by default is the Transcripts\<Job> directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"
 
 Command:		Run -System Win7sp1001 -Command 'Get-SystemInfo' -JobTimeOut 0 
 Description:	This will set the timeout to Infinite
 
 Command:		Run -System Win7sp1001 -Command 'Get-SystemInfo' -JobTimeOut 30 
 Description:	This will set the timeout to 30 per session
 
 Command:		?? Run
 Description:	This will display the help information for ( Invoke-Process ) Alias: Run
 
 Command:		?? Invoke-Process
 Description:	This will display the help information for ( Invoke-Process ) Alias: Run 

 Command:		?? Invoke-PSQuery
 Description:	This will display the help information for ( Invoke-PSQuery ) Alias: PSQuery 

 Command:		?? PSQuery
 Description:	This will display the help information for ( Invoke-Process ) Alias: PSQuery  
 
 72nd [Post]
 ~ PostedDate:  	10/03/2019
 ~ BuildNum# :  	1909.2401
 ~ Notes  	 : 		
				
 # Updates #
 * [BGCon]		Updated all BG Agent functions to PowerShell 2.0 compatible
				Note:  All external functions were deleted as they are no longer the correct format.  
				I will have to address this at a later point.
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * 
 
 73rd [Post]
 ~ PostedDate:  	10/11/2019
 ~ BuildNum# :  	1910.0301
 ~ Notes  	 : 	
 ~ Link		 :		https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231910.0301
				
 # Updates #
 * [BGCon]              Added a new BluGenie Host function called ( Invoke-WalkThrough ). Read the function help for more details.
 * [BGCon]              Updated the BluGenie Client function called ( Add-FirewallRule ).  Read the function help for more details.
 * [BGCon]              Updated the BluGenie Client function called ( Start-RunSpace ).  Read the function help for more details.
 * [BGCon]              Moved the default firewall rules path to $ScriptDirectory\Tools\Blubin\FirewallRules
 * [Add-FirewallRule]   Added support for External Firewall Rules
 * [Add-FirewallRule]   Added support for Rule names formated in an Array
 * [Add-FirewallRule]   Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Add-FirewallRule]   Updated the Hash Information to follow the new function standards
 * [Add-FirewallRule]   Added more detailed information to the Return data
 * [Add-FirewallRule]   Added support for OutUnEscapedJSON
 * [Add-FirewallRule]   Added support for ReturnObject
 * [Add-FirewallRule]   Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Start-RunSpace]     Upated reference objects for RunSpace to Fully Qualified names.  PS2 and PS3 didnt like the shorten name reference.
 * [Invoke-WalkThrough] Invoke-WalkThrough is Dynamic Help.  It will convert the static PowerShell help into an interactive menu system (Moved to an External call and updated after having to update the process to support PS2)
                            
							Added a few new tag descriptors for (Parameter and Examples).  This information will structure the help 
                            information displayed and also help with bulding the dynamic menu

 

                            Example
                             PARAMETER <parameter>
                                Description:  Desciption of the Parameter
                                Notes:        Any Notes
                                Alias:        Alias if any
                                ValidateSet:  ValidationSet Array Items

 

                             EXAMPLE
                                Command:     Your command string
                                Description: Decription of what the command above will do
                                Notes:       Any Notes
                                
                            With the updates above the menu system now has valid name fields.
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * 
 
 74th [Post]
 ~ PostedDate:  	10/23/2019
 ~ BuildNum# :  	1910.0302
 ~ Notes  	 : 	
 ~ Link		 :		https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231910.0302/New_Release 
				
 # Updates #
 * [Add-FirewallRule]           Added support for External Firewall Rules
 * [Add-FirewallRule]           Added support for Rule names formated in Array
 * [Add-FirewallRule]           Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Add-FirewallRule]           Updated the Hash Information to follow the new function standards
 * [Add-FirewallRule]           Added more detailed information to the Return data
 * [Add-FirewallRule]           Added support for OutUnEscapedJSON
 * [Add-FirewallRule]           Added support for ReturnObject
 * [Add-FirewallRule]           Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Enable-FirewallRule]        Added support for Rule names formated in Array
 * [Enable-FirewallRule]        Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Enable-FirewallRule]        Updated the Hash Information to follow the new function standards
 * [Enable-FirewallRule]        Added more detailed information to the Return data
 * [Enable-FirewallRule]        Added support for OutUnEscapedJSON
 * [Enable-FirewallRule]        Added support for ReturnObject
 * [Enable-FirewallRule]        Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Enable-AllFirewallRules]    Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Enable-AllFirewallRules]    Updated the Hash Information to follow the new function standards
 * [Enable-AllFirewallRules]    Added more detailed information to the Return data
 * [Enable-AllFirewallRules]    Added support for OutUnEscapedJSON
 * [Enable-AllFirewallRules]    Added support for ReturnObject
 * [Enable-AllFirewallRules]    Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Disable-FirewallRule]       Added support for Rule names formated in Array
 * [Disable-FirewallRule]       Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Disable-FirewallRule]       Updated the Hash Information to follow the new function standards
 * [Disable-FirewallRule]       Added more detailed information to the Return data
 * [Disable-FirewallRule]       Added support for OutUnEscapedJSON
 * [Disable-FirewallRule]       Added support for ReturnObject
 * [Disable-FirewallRule]       Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Disable-AllFirewallRules]   Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Disable-AllFirewallRules]   Updated the Hash Information to follow the new function standards
 * [Disable-AllFirewallRules]   Added more detailed information to the Return data
 * [Disable-AllFirewallRules]   Added support for OutUnEscapedJSON
 * [Disable-AllFirewallRules]   Added support for ReturnObject
 * [Disable-AllFirewallRules]   Updated the -Help | -WalkThrough parameter.  If Invoke-WalkThrough is an active function it will be called.  If not the default help will be called.
 * [Get-ProcessList]         	Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-ProcessList]            Updated the Hash Information to follow the new function standards
 * [Get-ProcessList]            Added more detailed information to the Return data
 * [BGCon]                      Updated the JSON parser.  This was to fix an error where it failed to parse the JSON and fix Type Casting for ES.  The process worked on PS2 but failed on PS3 and PS5.
								Had to remove the JSON parser that would have normally fixed the TypeCast issue with ES.  However since when fixing it to work on PS2 it would break PS3 and 5 and vice versa.  So instead I need every command (1st Hunt Commands, and 2nd Quarantine commands) tested one by one and the return job results imported into ES to make sure there are no import issues.  FYI, there will be import issues.  The JSON will be formatted correctly, however ES doesn't like Dynamic Type Casting.
								Also note most of the commands for Quarantine were original configurations and a while back we discussed moving away from those commands to focus on Hunting.  In recent conversations I was told you're using Quarantine commands again so I started making updates to those commands so they have a standard code framework like the newer functions Hunt commands do.
								Make sure to test each JSON Job result with a JSON validator to make sure the files are correctly formatted.
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * 
 
 75th [Post]
 ~ PostedDate:  	10/25/2019
 ~ BuildNum# :  	1910.2301
 ~ Notes  	 : 	
 ~ Link		 : 		https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231910.2301 
				
 # Updates #
 * [Set-FirewallStatus]             Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Set-FirewallStatus]             Updated the Hash Information to follow the new function standards
 * [Set-FirewallStatus]             Added more detailed information to the Return data
 * [Set-FirewallStatus]             Updated the Return data.  It was coming back as Blocked for both Inbound and Outbound no matter what the parameter value was.
 * [Remove-FirewallRule]            Added support for Rule names formated in Array
 * [Remove-FirewallRule]            Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Remove-FirewallRule]            Updated the Hash Information to follow the new function standards
 * [Remove-FirewallRule]            Added more detailed information to the Return data
 * [Remove-FirewallRule]            Added support for OutUnEscapedJSON
 * [Remove-FirewallRule]            Added support for ReturnObject
 * [Update-FirewallProfileStatus]   Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Update-FirewallProfileStatus]   Updated the Hash Information to follow the new function standards
 * [Update-FirewallProfileStatus]   Added more detailed information to the Return data
 * [Update-FirewallProfileStatus]   Added support for OutUnEscapedJSON
 * [Update-FirewallProfileStatus]   Added support for ReturnObject
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * 
 
 76th [Post]
 ~ PostedDate	 :	11/04/2019
 ~ BuildNum# 	 :  1910.2501
 ~ Notes  	 	 : 	
 ~ Link 	 	 : 	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/Build%231910.2501
 ~ Azure WorkItem:	https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2558/
				
 # Updates #
 * [Invoke-WalkThrough]		Updated Example Title call to pull the exact match.  Prior, if there was more then 10 examples both 1 and 10 would show when only requesting Example 1.
 * [Get-ChildItemList] 		Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-ChildItemList] 		Updated the Hash Information to follow the new function standards
 * [Get-ChildItemList] 		Added more detailed information to the Return data
 * [Manage-ProcessHash] 	Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Manage-ProcessHash] 	Updated the Hash Information to follow the new function standards
 * [Manage-ProcessHash] 	Added more detailed information to the Return data
 * [Get-LiteralPath] 		Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-LiteralPath] 		Updated the Hash Information to follow the new function standards
 * [Get-LiteralPath] 		Added more detailed information to the Return data
 * [Get-FirewallRules] 		Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-FirewallRules] 		Updated the Hash Information to follow the new function standards
 * [Get-FirewallRules] 		Added more detailed information to the Return data
 * [Set-FirewallGPOStatus] 	Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Set-FirewallGPOStatus] 	Updated the Hash Information to follow the new function standards
 * [Set-FirewallGPOStatus] 	Added more detailed information to the Return data
 * [Set-FirewallGPOStatus] 	Rewrote the parent If statement to be a switch statement
 * [Set-FirewallGPOStatus] 	Updated the information in the returning hash table to have more info on the requested actions
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * 
 
 
 77th [Post]
 ~ PostedDate	 : 	11/05/2019
 ~ BuildNum# 	 : 	1911.0401
 ~ Link		 	 : 	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/Build%231911.0401
 ~ Azure WorkItem:	https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2690
 ~ Notes  	 	 : 	This update is focused on chaining PSQuery commands with BluGenies remote management
					BluGenie can now collect general system information over WMI, Filter, and Process remote commands all in 1 command with an external JSON job file.
					
					Captured Data fields (All fields are searchable, and can be filtered with Regex)
						Address                     - Remote IP Address                   ( 10.20.136.121 )
						ComputerName                - Remote Host Name                    ( win7sp1001 )
						FQDN                        - Fully Qualified Domain Name         ( WIN7SP1001.TestLab.Com )
						FreePhysicalMemoryGB        - Free Physical Memory Quote in GB    ( .54 )
						FreePhysicalMemoryMB        - Free Physical Memory Quote in MB    ( 558 )
						Online                      - Online Status                       ( True or False )
						OS                          - Operating System Name               ( Microsoft Windows 7 Enterprise )
						OSVersion                   - Operating Version                   ( 6.1.7601 )
						PowerShell3                 - PowerShell Version 3 or Higher      ( True )
						PowerShellVer               - Installed PowerShell Version        ( 2.0 )
						TotalPhysicalMemoryGB       - Total Physical Memory Quote in GB   ( 6 )
						TotalPhysicalMemoryMB       - Total Physical Memory Quote in MB   ( 6291000 )
						TotalVirtualMemorySizeGB    - Total Virtual Memory Quote in GB    ( 12 )
						TotalVirtualMemorySizeMB    - Total Virtual Memory Quote in MB    ( 12285 )
				
# Updates #
 * [Invoke-PSQuery]  	Added Support for calling information from an external JSON file
 * [Invoke-PSQuery]  	Added a new parameter ( JSONJob ) Use a JSON job file to import settings
 * [Invoke-PSQuery]  	Added a new parameter ( FilterType ) Filter by Custom objects properties
 * [Invoke-PSQuery]  	Added a new parameter ( Pattern ) Search Pattern using RegEx
 * [Invoke-PSQuery]  	Added a new parameter ( Run )Process any command(s) from the JSON Job file on any of the systems filtered by Invoke-PSQuery
 * [Invoke-PSQuery]  	Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-Childitemlist]	Added a directory check before processing the search command.  If a directory didn't exist the default PowerShell cmdlet would search the C:\Users directory on its own.
 
 ***  Check the Azure WorkItem for more notes ***
  
 # BenchMark #
 * None
 
 # Tested Command(s) #
 * Command		: Invoke-PSQuery -System 10.20.136.51
 ~ Description	: Scan the IP address specified and pull System and PowerShell information if the computer is Online!
     
 * Command		: Invoke-PSQuery -Range "10.20.136.50-10.20.136.100"
 ~ Description	: Scan the IP address range specified and pull System and PowerShell information if the computer is Online!
     
 * Command  	: Invoke-PSQuery -System "10.20.136.1","10.20.136.2","10.20.136.3","10.20.136.4","10.20.136.5","10.20.136.10","10.20.136.11","10.20.136.50","10.20.136.51","10.20.136.52"
 ~ Description	: Scan multiple ip addresses specified and pull System and PowerShell information if the computer is Online!
     
 * Command  	: Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -Force
 ~ Description	: Scan the hosts and pull System and PowerShell information. Do not process an [ICMP / Ping] request prior to trying to connect.
 
 * Command  	: Invoke-PSQuery -System 'TestPC001','TestPC002','TestPC003' -PassThrough
 ~ Description	: Scan the hosts and updates the BluGenie Systems list with any remote computer that is PowerShell 3 or higher (Default Filter)
    
 * Command  	: Invoke-PSQuery -Range "10.20.136.50-10.20.136.100" -PingTimeOut 5
 ~ Description	: Scan the IP address range specified, and update the Ping Time Out to 5 ms.

 * Command  	: Invoke-PSQuery -JSONJob '<Path>\Job.JSON'
 ~ Description	: Import settings from a JSON job file and Scan the specified systems from the JSON file and pull System and PowerShell information if the computer are Online!

 * Command  	: Invoke-PSQuery -JSONJob '<Path>\Job.JSON' -PassThrough
 ~ Description	: Import settings from a JSON job file, Scan the specified systems from the JSON file, and update the BluGenie Systems list with any remote computer that are PowerShell 3 or higher (Default Filter)
 
 * Command  	: Invoke-PSQuery -JSONJob '<Path>\Job.JSON' -PassThrough -FilterType 'OS' -Patter 'Windows\s10'
 ~ Description	: Import settings from a JSON job file, Scan the specified systems from the JSON file, and update the BluGenie Systems list with any remote computer that are (Windows 10)
    
 * Command  	: Invoke-PSQuery -JSONJob '<Path>\Job.JSON' -PassThrough -FilterType 'OS' -Patter 'Windows\s10' -Run
 ~ Description	: Import settings from a JSON job file, Scan the specified systems from the JSON file, update the BluGenie Systems list with any remote computer that are (Windows 10) and Run all remote commands on the updates computer list
 
 * Command  	: BluGenie.exe "Invoke-PSQuery -JSONJob '.\JSONPacks\PSQuery.json' -PassThrough -FilterType 'OS' -Patter 'Windows\s10' -Run"
 ~ Description	: Run BluGenie, Automatically import settings from a JSON job file, Scan the specified systems from the JSON file, update the BluGenie Systems list with any remote computer that are (Windows 10) and Run all remote commands on the updates computer list
 
 * Command  	: BluGenie.exe "Invoke-PSQuery -JSONJob '.\JSONPacks\PSQuery.json' -PassThrough -Run"
 ~ Description	: Run BluGenie, Automatically import settings from a JSON job file, Scan the specified systems from the JSON file, update the BluGenie Systems list with any remote computer that is PowerShell 3 Compliant and Run all remote commands on the updates computer list
 
 * Command  	: BluGenie.exe "Invoke-PSQuery -JSONJob '.\JSONPacks\PSQuery.json' -PassThrough -FilterType 'Compliant' -Pattern 'False' -Run"
 ~ Description	: Run BluGenie, Automatically import settings from a JSON job file, Scan the specified systems from the JSON file, update the BluGenie Systems list with any remote computer that is PowerShell 3 Compliant and Run all remote commands on the updates computer list

 * Command  	: Invoke-PSQuery -Help
 ~ Description	: Call Help Information

 * Command  	: Invoke-PSQuery -WalkThrough
 ~ Description	: Call Help Information [2]
 
 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp' -Recurse
 ~ Description	: Directory and 3 files existed (Search results came back correctly)
 
 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse
 ~ Description	: Both directories existed (Search results came back correctly)
 
 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse
 ~ Description	: C:\Trash directory did not exist (Search results came back correctly)

 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp' -Recurse -Pattern '^notepad\.\w{3}$'
 ~ Description	: Directory and 3 files existed (Search results came back correctly)
 
 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp' -Recurse -Pattern '^notepad\.\w{3}$'
 ~ Description	: Directory did not exist (Search results came back correctly)
 
 * Command  	: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse
 ~ Description	: Both directories did not exist (Search results came back correctly)
 
78th [Post]
 ~ PostedDate	 : 	11/07/2019
 ~ BuildNum# 	 : 	1911.0501
 ~ Link		 	 : 	
 ~ Azure WorkItem:	
 ~ Notes  	 	 : 	

				
# Updates #
 * [Invoke-PSQuery]  	Added Support for saving the PS Query report to an external JSON file
 * [Invoke-PSQuery]  	Added new parameter ( LogPath ) Path to save the Log File.  Default is the ( $TranscriptsDir ) Transcript Directory
 * [Invoke-PSQuery]  	Added new parameter ( LogName ) Name of the Report(s).  There are 2 reports that get generated (*.CSV, and *.JSON).  The default file name is ( PingReport_D<Current Date>_T<Current Time>G_<5 Digit UID> )	
 * [Get-ChildItemList]	Added a variable check before processing the search command for (Quick) Searches.  If no directories were found the search pattern was set to a default.  It should end if the paths do not exist.
 
 
 ***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 * Command		: Invoke-PSQuery -System 10.20.136.51
 ~ Description	: Scan the IP address specified, pull System and PowerShell information if the computer is Online!, and save the (.CSV) and (.JSON) report  to the Transcripts directory called "PingReport_D<DATE>_T<TIME>G<GUID>"
     
 * Command		: Invoke-PSQuery -JSONJob '<Path>\Job.JSON' -LogName 'BG_System_Query'
 ~ Description	: Import settings from a JSON job file, Scan the specified systems from the JSON file, and save a report named (BG_System_Query.CSV and BG_System_Query.JSON) to the Transcripts Directory
 
 * Command		: Invoke-PSQuery -JSONJob '<Path>\Job.JSON' -LogName 'BG_System_Query' -LogPath 'C:\Temp'
 ~ Description	: Import settings from a JSON job file, Scan the specified systems from the JSON file, and save a report named (BG_System_Query.CSV and BG_System_Query.JSON) to the ( C:\Temp ) Directory
 
 * Command		: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse
 ~ Description	: Ran the command on PS2, The C:\Trash Directory existed but C:\Temp does not.  
 
 * Command		: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse -ReturnObject
 ~ Description	: Ran the command on PS2, The C:\Temp Directory existed but C:\Trash does not. 
 
 * Command		: Get-ChildItemList -SearchPath 'C:\Temp','C:\Trash' -Recurse -ReturnObject
 ~ Description	: Ran the command on PS2, The C:\Temp and C:\Trash Directories do not exist.

79th [Post]
 ~ PostedDate	 	: 11/11/2019
 ~ BuildNum# 	 	: 1911.0701
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.0701
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2789
 ~ Notes  	 	: Main focus on this build is to speed up the loading time of BGCon.  

				
# Updates #
 * [BluGenie Core] 	Merged BGCon.ps1 into the main script, BluGenie.ps1 for a single compiled engine and zero AES 256 encrypted external .lib files.
 * [BluGenie Core]	Updated the Core Display functions to work in both the PowerShell ISE and the Command Console Framework.
 
 
 ***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 * Command	: BluGenie.exe "Invoke-PSQuery -JSONJob '.\JSONPacks\PSQuery.json' -PassThrough -FilterType 'Compliant' -Pattern 'True' -Run"
 * Description	: I ran this command in the command console in the BluGenie .\X64 directory.  It calls PowerShell to get a valid time stamp and then runs the BluGenie PSQuery command and checks all systems that are compliant (PS3 and above)
 * Note  	: Executed	- 11.11.2019_14.29.21
		  Initialized	- 11.11.2019_14.29.25
		  Starting Jobs	- 11.11.2019_14.29.28
		  Completed Jobs- 11.11.2019_14.30.04    

Queried 4 systems, 3 were compliant, 3 systems ran the remote commands in the JSON, all in under (43 Seconds)  	

80th [Post]
 ~ PostedDate	 	: 11/12/2019
 ~ BuildNum# 	 	: 1911.1101
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.1101
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2808
 ~ Notes  	 	: Focus on bug fix for enabling the Windows Firewall

				
# Updates #
 * [Set-FirewallStatus] Bug fix to manage the Firewall Service.  When trying to enable the service the Display Name was being modified.
 * [Set-FirewallStatus] Added more error control around the Firewall Service
 
 
 ***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 * Command	: Set-FirewallStatus
 * Description	: Tested on a system with the Windows Firewall Stop and Disabled
 * Note  	: 


81st [Post]
 ~ PostedDate	 	: 11/19/2019
 ~ BuildNum# 	 	: 1911.1201
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.1201
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2893
 ~ Notes  	 	: Focus on bug fix for Updating the Windows Firewall Profiles and an update to BluGenie's overall Help and Command Parser processes

				
# Updates #
 * [BluGenie.ps1] 	Updated the CommandLine parser.  The Command line for Blugenies internal functions is the first parameter.  
                  	Other parameters work with or without a command line (/Verbose)
 * [BluGenie.ps1] 	Updated the BluGenie Client function called ( Invoke-WalkThrough ). Read the function help for more details.
 * [BluGenie.ps1] 	Added the BluGenie Host function called ( Write-VerboseMsg ). Read the function help for more details.
 * [BluGenie.ps1] 	Added Verbose TimeStamp output to the Console.  This will help idnetify any loading issues and which section of code is taking the longest to run
 * [BluGenie.ps1] 	Removed Aliases ?? / HelpMenu / and HM
 * [BluGenie.ps1] 	Updated the BluGenie Client function called ( Update-FirewallProfileStatus ). Read the function help for more details.
 * [Get-BGHelp] 	Changed filter for $AllowedCommands.  Commands are now setup with (" -Help")
 * [Write-VerboseMsg]	Write-VerboseMsg is used to display Time Stamped, Verbose Messages to the screen
 
 ***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 * Command	: /Help
 * Description	: Display Help information while in the BluGenie Console
 * Note  	: 

 * Command	: /Help:Firewall
 * Description	: Filter Help information while in the BluGenie Console
 * Note  	: 

 * Command	: /Help:enable\sFirewall
 * Description	: Filter Help information while in the BluGenie Console
 * Note  	: The filter is RegEx enabled

 * Command	: Add-Firewall -Help
 * Description	: Display the help information for any of the BluGenie Commands from inside the BluGenie Console
 * Note  	: 

 * Command	: BluGenie.exe /Help
 * Description	: Display Help information while in the Command Console
 * Note  	: 

 * Command	: BluGenie.exe /Help:Firewall
 * Description	: Filter Help information while in the Command Console
 * Note  	: The filter is RegEx enabled

 * Command	: BluGenie.exe /Help:enable\sFirewall
 * Description	: Filter Help information while in the Command Console
 * Note  	: The filter is RegEx enabled

 * Command	: BluGenie.exe Add-Firewall -Help
 * Description	: Display the help information for any of the BluGenie Commands from inside the Command Console
 * Note  	: 

 * Command	: BluGenie.exe
 * Description	: This will display the TimeStamped loading information showing how long it takes to the BluGenie
 * Note  	: 

 * Command	: BluGenie.exe /Verbose
 * Description	: This will display the TimeStamped loading information for every action showing how long it takes to the BluGenie
 * Note  	: 

 * Command	: BluGenie.exe "Invoke-PSQuery -JSONJob '.\JSONPacks\PSQuery.json' -PassThrough -Run " /Verbose
 * Description	: This will Query all items from the PSQuery.json file and run all commands on any compatiable system all while displaying all actions with a TimeStamp
 * Note  	: 


82nd [Post]
 ~ PostedDate	 	: 11/25/2019
 ~ BuildNum# 	 	: 1911.1202
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.1202
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/2977
 ~ Notes  	 	: 

				
# Updates #
* [BluGenie] 				- Added better screen visibility.  When running in console mode, the screen will automatically resize to a buffersize and screen width of 150
* [BluGenie] 				- Updated External Tool Framework (In this case any SysInternals Tools)
* [BluGenie]	 			- Expose all Internal functions to allow commands to be ran from the Console itself on the local host
* [Get-AutoRuns] 			- Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Get-AutoRuns] 			- Updated the Hash Information to follow the new function standards
* [Get-AutoRuns] 			- Added more detailed information to the Return data
* [Get-AutoRuns] 			- Added a directory lookup table to search for AutoRunSC.exe.  
		 	  		  The 6 Search Paths including the ToolPath Parameter are
				 	  	* ToolPath Parameter
	        				* Path pulled from the BGTools variable on the remote machine
						* Path pulled from the Config.JSON file
						* %SysytemDrive%\Windows\Temp directory
						* %UserProfile%\AppData\Local\Temp directory
						* Executable working/startup directory .\Tools\SysinternalsSuite
* [Get-Signature] 			- Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Get-Signature] 			- Updated the Hash Information to follow the new function standards
* [Get-Signature] 			- Added more detailed information to the Return data
* [Get-Signature] 			- Added option for file(s) to be passed in a sinlge string using a comma separator
* [Get-Signature] 			- Added option for file(s) to be passed in an Array 
* [Get-Signature] 			- Added a directory lookup table to search for SigCheck.exe
		  	  		  The 6 Search Paths including the ToolPath Parameter are
						* ToolPath Parameter
	        				* Path pulled from the BGTools variable on the remote machine
						* Path pulled from the Config.JSON file
						* %SysytemDrive%\Windows\Temp directory
						* %UserProfile%\AppData\Local\Temp directory
						* Executable working/startup directory .\Tools\SysinternalsSuite
* [Get-LockingProcess] 			- Report on which process is locking a file or directory
* [Start-NewProcess] 			- Start-NewProcess is similar to Start-Process but this can capture all Standard Output while keeping the screen hidden.  
		       	  		  Generally used for external tools like the SysInternals Suite
* [Get-BGHelp] 				- Changed filter for $AllowedCommands.  Help will be pulled for every Allowed Command now.
* [Invoke-WalkThrough] 			- Updated the Parameter Validate Set RegEx Parser to support multiple line scrapping
* [Invoke-WalkThrough] 			- Updated the Example Set RegEx Parser to support multiple line scrapping
* [Update-FirewallProfileStatus]	- Set Type Cast for the ProfileType and Status Parameters.  This indentifier is used in the Dynamic Help Meny system
* [Update-FirewallProfileStatus]	- Updated the BluGenie Client function called ( Update-FirewallProfileStatus ). Read the function help for more details.
* [ScriptDirectory]			- Replace the command $ScriptDirectory with a function called ScriptDirectory to look like a normal command	with normal help information
* [ToolsDirectory]			- Replace the command $ToolsDirectory with a function called ToolsDirectory to look like a normal command with normal help information
* [TranscriptsDir]			- Replace the command $TranscriptsDir with a function called TranscriptsDir to look like a normal command with normal help information
* [TranscriptsFile]			- Replace the command $TranscriptsFile with a function called TranscriptsFile to look like a normal command	with normal help information
* [Show-More] 				- Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Show-More] 				- Updated the Hash Information to follow the new function standards
* [Show-More] 				- Added more detailed information to the Return data
* [Show-More] 				- Fixed the Pipeline passthrough
* [Show-More] 				- Added a ( Q - Quit ) switch to exit the processing command in mid stream
* [Get-ChildItemList] 			- Added a Sub Task to Report on Locked files if the file cannot be removed.
* [Get-ChildItemList] 			- Fixed the Error message return when items could not be deleted.

***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command	:  Get-AutoRuns
 * Description	:  Report on currently configured auto-start applications as well as the full list of Registry and file system locations available for auto-start configuration
 * Note  	: 
    
 * Command	:  Get-AutoRuns -Algorithm SHA256
 * Description	:  Report on currently configured auto-start information, also display the Hash Algorithm in "SHA256"
 * Note  	:  The Hash Algorithm will be set to "SHA256".  The default is "MD5"

 * Command	:  Get-AutoRuns -Signature -HideSigned Microsoft
 * Description	:  Report on currently configured auto-start information that do not have an Authorized Signature from Microsoft.
 * Note  	:  This report will quickly identify any 3rd party or unsigned entries.
			       To display Signature information you need to use the (-Signature) switch
    
 * Command	:  Get-AutoRuns -Signature -HideSigned All
 * Description	:  Report on currently configured auto-start information that do not have an Authorized Signature.
 * Note  	:  This report will quickly identify any 3rd party or unsigned entries.
				   To display Signature information you need to use the (-Signature) switch

 * Command	:  Get-AutoRuns -Signature
 * Description	:  Report on currently configured auto-start information with Authorized Signature Information.
 * Note  	: 

 * Command	:  Get-AutoRuns -ToolPath 'C:\Temp\AutoRunSC.exe'
 * Description	:  Locate the AutoRun tool under C:\Temp and Report on currently configured auto-start information
 * Note  	: 
    
 * Command	:  Get-AutoRuns -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
				   -Full parameter
    
 * Command	:  Get-AutoRuns -WalkThrough
 * Description	:  Call Help Information [2]
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
				   -Full parameter
    
 * Command	:  Get-AutoRuns -OutUnEscapedJSON
 * Description	:  Return Output as UnEscaped JSON format
 * Note  	:  The OutUnEscapedJSON is used to beatify the JSON return and not Escape any Characters.  Normal return data is a Hash Table.
    
 * Command	:  Get-AutoRuns -ReturnObject
 * Description	:  Return Output an Object
 * Note  	:  The ReturnObject is used to return a PowerShell Object.  Normal return data is a Hash Table.

 ~ Get-Signature ~
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe'
 * Description	:  Show the Authentication Signature Information for the file given
 * Note  	:  
    		   - Sample Output -
               		Comment         :
               		Path            : c:\windows\system32\cmd.exe
	               	File Version    : 10.0.17134.1 (WinBuild.160101.0800)
	               	Description     : Windows Command Processor
	               	Product Version : 10.0.17134.1
	               	Date            : 5:16 PM 4/11/2018
	               	Company         : Microsoft Corporation
	               	Publisher       : Microsoft Windows
	               	Verified        : Signed
	               	Product         : Microsoft? Windows? Operating System
	               	Machine Type    : 64-bit
	               	Hash            : 4e2acf4f8a396486ab4268c94a6a245f
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe,C:\Windows\system32\cmd.exe'
 * Description	:  Show the Authentication Signature Information for the file(s) in a sinlge string using a comma separator
 * Note  	:  
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe','C:\Windows\system32\cmd.exe'
 * Description	:  Show the Authentication Signature Information for the file(s) in an Array
 * Note  	:  
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe' -ReturnObject:$False
 * Description	:  Reset the default output to a Hash Table
 * Note  	:  
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe' -ToolPath 'C:\Temp\SigCheck.exe'
 * Description	:  Locate the SigCheck.exe tool in C:\Temp and Show the Authentication Signature Information for Notepad.exe
 * Note  	:  
    
 * Command	:  Get-Signature -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    -		   Full parameter
    
 * Command	:  Get-Signature -WalkThrough
 * Description	:  Call Help Information [2]
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    		   -Full parameter
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe' -ReturnObject:$False -OutUnEscapedJSON
 * Description	:  Show the Authentication Signature Information and Return Output as UnEscaped JSON format
 * Note  	:  The OutUnEscapedJSON is used to beatify the JSON return and not Escape any Characters.  Normal return data is a Hash Table.
    
 * Command	:  Get-Signature -Path 'C:\Windows\Notepad.exe' -ReturnObject
 * Description	:  Show the Authentication Signature Information and Return Output an Object
 * Note  	:  The ReturnObject is used to return a PowerShell Object.  This is the default option

 ~ Get-LockingProcess ~
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log'
 * Description	:  Show the Process locking the file given
 * Note  	:   
		   - Sample Output -
			LockedPath        : C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log                     
			ProcessId         : 8020                                                                      
			Name              : OneDrive.exe                                                              
			CommandLine       : "C:\Users\Admin\AppData\Local\Microsoft\OneDrive\OneDrive.exe" /background
			SessionId         : 1                                                                         
			Path              : C:\Users\Admin\AppData\Local\Microsoft\OneDrive\OneDrive.exe              
			Hash              : 78e5e5f44cc67195278179cd60453ec8                                          
			ProcessOwner      : Admin                                                             
			Caption           : OneDrive.exe                                                              
			ParentProcessId   : 5792                                                                      
			ParentProcessName : explorer                                                                  
			ParentProcessPath : C:\Windows\Explorer.EXE                                                   
			ParentHash        : 4e196cea0c9c46a7d656c67e52e8c7c7                                          
			Comment           :
    
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log,C:\Users\Admin\AppData\Local\Temp'
 * Description	:  Show the Process locking the paths in a sinlge string using a comma separator
 * Note  	:  
    
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log','C:\Users\Admin\AppData\Local\Temp'
 * Description	:  Show the Process locking the paths in an Array
 * Note  	:  
    
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log' -ReturnObject:$False
 * Description	:  Reset the default output to a Hash Table
 * Note  	:  
    
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log' -ToolPath 'C:\Temp\Handle.exe'
 * Description	:  Locate the Handle.exe tool in C:\Temp and Show the Process locking the file given
 * Note  	:  
    
 * Command	:  Get-LockingProcess -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    		   -Full parameter
    
 * Command	:  Get-LockingProcess -WalkThrough
 * Description	:  Call Help Information [2]
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    		   -Full parameter
    
 * Command	:  Get-LockingProcess -Path 'C:\Users\Admin\AppData\Local\Temp\aria-debug-8020.log' -OutUnEscapedJSON
 * Description	:  Show the Authentication Handle Information and Return Output as UnEscaped JSON format
 * Note  	:  The OutUnEscapedJSON is used to beatify the JSON return and not Escape any Characters.
    
 * Command	:  Get-LockingProcess -Path 'C:\Windows\Notepad.exe' -ReturnObject
 * Description	:  Show the Authentication Handle Information and Return Output an Object
 * Note  	:  The ReturnObject is used to return a PowerShell Object.  This is the default option

 ~ Start-NewProcess ~
 * Command	:  Start-NewProcess ping.exe 'localhost'
 * Description	:  Start a process and capture the Standard Output using the default parameter position
 * Note  	:  
    		   - Sample Output -
    			FileName         : ping.exe                                                 
    			Arguments        : localhost                                                
    			WorkingDirectory :                                                          
    			StdOut           :                                                          
                      				Pinging Computer1 [::1] with 32 bytes of data:
                      				Reply from ::1: time<1ms                                 
                      				Reply from ::1: time<1ms                                 
                      				Reply from ::1: time<1ms                                 
                      				Reply from ::1: time<1ms                                 
                                                                               
                      				Ping statistics for ::1:                                 
                          			Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), 
                      				Approximate round trip times in milli-seconds:           
                          			Minimum = 0ms, Maximum = 0ms, Average = 0ms
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost' | Select-Object -ExpandProperty StdOut
 * Description	:  Start a process and only capture the Standard Output
 * Note  	:  
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost'
 * Description	:  Start a process and capture the Standard Output using the parameter names
 * Note  	:  
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost' -WorkingDirectory 'C:\Windows\System32'
 * Description	:  Start a process from a specfic Working Directory
 * Note  	:  
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost' -ReturnObject:$false
 * Description	:  Start a process and capture the Standard Output and Return Output as a Hash Table
 * Note  	:  
    
 * Command	:  Start-NewProcess -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    		   -Full parameter
    
 * Command	:  Start-NewProcess -WalkThrough
 * Description	:  Call Help Information [2]
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the 
    		   -Full parameter
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost' -OutUnEscapedJSON
 * Description	:  Start a process and capture the Standard Output and Return Output as UnEscaped JSON format
 * Note  	:  The OutUnEscapedJSON is used to beatify the JSON return and not Escape any Characters.  Normal return data is a Hash Table.
    
 * Command	:  Start-NewProcess -FileName 'ping.exe' -Arguments 'localhost' -ReturnObject
 * Description	:  Start a process and capture the Standard Output and Return Output an Object
 * Note  	:  The ReturnObject is used to return a PowerShell Object.  This is the default

 ~ Get-BGHelp ~
 * Command	:  \Help
 * Description	:  Start a process and capture the Standard Output and Return Output an Object
 * Note  	:  The ReturnObject is used to return a PowerShell Object.  This is the default

 ~ ScriptDirectory ~
 * Command	:  ScriptDirectory
 * Description	:  Display the ScriptDirectory Path
 * Note  	:  

 * Command	:  ScriptDirectory -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
    		   with the -Full parameter

 ~ ToolsDirectory ~
 * Command	:  ToolsDirectory 
 * Description	:  Display the ToolsDirectory Path
 * Note  	:  

 * Command	:  ToolsDirectory -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
    		   with the -Full parameter

 ~ TranscriptsDir ~
 * Command	:  TranscriptsDir 
 * Description	:  Display the TranscriptsDir Path
 * Note  	:  

 * Command	:  TranscriptsDir -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
    		   with the -Full parameter

 ~ TranscriptsFile ~
 * Command	:  TranscriptsFile 
 * Description	:  Display the TranscriptsFile Path
 * Note  	:  

 * Command	:  TranscriptsFile -Help
 * Description	:  Call Help Information
 * Note  	:  If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
    		   with the -Full parameter

 ~ Show-More ~
 * Command	:  ,$(Get-ChildItem -Path $env:windir\System32 -File | Select-Object -ExpandProperty FullName) | Show-More
 * Description	:  Query C:\Windows\System32 for all files and display the Full Path names 25 lines per page using the Pipeline
 * Notes	:  While sending content over the pipeline you need to use an Unary Comma Operator.
	           As a binary operator, the comma creates an array. As a unary operator, the comma creates an array with one member. Place the comma before the member.
    	
        	   ,$MyArray | More
    
 * Command	:  ,$(Get-ChildItem -Path $env:windir\System32 -File | Select-Object -ExpandProperty FullName) | More
 * Description	:  Query C:\Windows\System32 for all files and display the Full Path names using the Show-More Alias
 * Notes	:  While sending content over the pipeline you need to use an Unary Comma Operator.
	           As a binary operator, the comma creates an array. As a unary operator, the comma creates an array with one member. Place the comma before the member.
    
    		   ,$MyArray | More
    
 * Command	:  ,$(Get-ChildItem -Path $env:windir\System32 -File | Select-Object -ExpandProperty FullName) | More -Suffix ' * ' -LineCount 30
 * Description	:  Display content 30 lines per page request.  Each line item will have a Suffix ' * ' appended.
 * Notes	:  
    
 * Command	:   Show-More -Source $(Get-ChildItem -Path $env:windir\System32 -File | Select-Object -ExpandProperty FullName)
 * Description	:   Query C:\Windows\System32 for all files and display the Full Path names 25 lines per page using the Source Parameter
 * Notes	:
    
 * Command	:   Show-More -Help
 * Description	:   Call Help Information
 * Notes	:   If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
		    with the -Full parameter
    
 * Command	:   Show-More -WalkThrough
 * Description	:   Call Help Information [2]
 * Notes	:   If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called 
		    with the -Full parameter

83rd [Post]
 ~ PostedDate	 	: 12/01/2019
 ~ BuildNum# 	 	: 1911.2501
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.2501
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3071
 ~ Notes  	 	: Focus on ES related issues

				
# Updates #
* [Get-SchTaskInfo] 	- Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Get-SchTaskInfo] 	- Updated the Hash Information to follow the new function standards
* [Get-SchTaskInfo] 	- Added more detailed information to the Return data
* [Get-SchTaskInfo] 	- Rebuilt the ( Commands ) property to be an Array
* [Get-SchTaskInfo] 	- Rebuilt the -FilterType Commands to parse the new array
* [Get-SchTaskInfo] 	- Rebuilt the -FilterType Arguments to parse the new array
* [Get-SchTaskInfo] 	- Rebuilt the -FilterType Hash to parse the new array
* [Get-SchTaskInfo] 	- Updated the Function format to follow the new New Function schema
* [Invoke-NetStat] 	- Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Invoke-NetStat] 	- Updated the Hash Information to follow the new function standards
* [Invoke-NetStat] 	- Added more detailed information to the Return data
* [Invoke-NetStat] 	- Updated the ( Hash ) property for ES
* [Invoke-NetStat] 	- Updated the Function format to follow the new New Function schema
* [Invoke-NetStat] 	- Removed the following properties from the Query list ( Scope, Options, ClassPath, Properties, SystemProperties, Qualifiers, __DERIVATION  )

***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command	:  
 * Description	:  
 * Note  	: 

84th [Post]
 ~ PostedDate	 	: 12/05/2019
 ~ BuildNum# 	 	: 1911.2502
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.2502
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3152
 ~ Notes  	 	: Focus on ES related issues and small bug fixes

				
# Updates #
* [Invoke-NetStat] 	Fixed the search process name issue
* [Invoke-NetStat] 	Added more Properties to filter in FilterType
* [Invoke-NetStat] 	Updated the Help information regarding the new FilterTypes
* [Invoke-NetStat] 	Fixed the Manage-ProcessHash.  The call was giving a True value on return
* [Invoke-NetStat] 	Fixed the Manage-ProcessHash false results when killing a process is really true

* [Manage-ProcessHash] 	Updated the ReturnObject parameter to always be $true
* [Manage-ProcessHash] 	Updated the Output to the new format to support the ReturnObject always being enabled.
* [Manage-ProcessHash] 	Added parameter ( FilterType ) to Filter on both reporting and Process management
* [Manage-ProcessHash] 	Added parameter ( Pattern ) to support RegEx Search patterns 
* [Manage-ProcessHash] 	Added parameter ( TimerLoop ) to set how many loops the terminate process checks for validation
* [Manage-ProcessHash] 	Added parameter ( SleepTime ) to set the sleep time between each loop

* [Get-ChildItemList] 	Updated the Propety Items > Hash Value to (Text) to support Elastic Search
* [Get-ChildItemList] 	Updated the Propety Items > ADS Value to (Text) support Elastic Search
* [Get-ChildItemList] 	Updated the Propety Items > Streams Value to to an (Object) to support Elastic Search
													 
* [Get-ProcessList]	Updated the PID value to always be set to [Int] to support Elastic Search

* [Get-ServiceList]	Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
* [Get-ServiceList] 	Updated the Hash Information to follow the new function standards
* [Get-ServiceList] 	Added more detailed information to the Return data
* [Get-ServiceList] 	Forced Type Cast "Name" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "DesktopInteract" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "PathName" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ServiceType" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "StartMode" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "Caption" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "Description" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "DisplayName" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "Started" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "StartName" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "State" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ProcessName" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ProcessPath" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ProcessCommandLine" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ProcessOwner" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "ServiceExecPath" to [Text] to support Elastic Search
* [Get-ServiceList] 	Forced Type Cast "Hash" to [Text] to support Elastic Search

* [Get-SchTaskInfo] 	Fixed the Count number to only show what number of items returned

***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command	:  
 * Description	:  
 * Note  	: 


85th [Post]
 ~ PostedDate	 	: 12/06/2019
 ~ BuildNum# 	 	: 1911.2503
 ~ Engine Type		: PowerShell 3,4 and 5.x
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.2503
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3282/
 ~ Notes  	 	: Focus on Fixing the (Non Critical error) that gets pulled when processes a Managed Type request and ES compatibility

				
# Updates #
 * [Manage-ProcessHash] Updated the Select-Object references to support PS3,PS4, and PS5.  It was only working correctly in PS5.
 
 * [BluGenie Core] 	Updated the BluGenie Host function called ( Get-ProcessList )	. Read the function help for more details
 * [BluGenie Core] 	Updated the BluGenie Host function called ( Get-ServiceList )	. Read the function help for more details
 
***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command		:  
 * Description	:  
 * Note  		: 


86th [Post]
 ~ PostedDate	 	: 12/08/2019
 ~ BuildNum# 	 	: 1911.2504
 ~ Engine Type		: PowerShell 3,4 and 5.x
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231911.2504
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3284
 ~ Notes  	 	: Focus on ES compatibility
				
# Updates #
 * [Get-COMObjectInfo] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
 * [Get-COMObjectInfo] Updated the Hash Information to follow the new function standards
 * [Get-COMObjectInfo] Added more detailed information to the Return data
 * [Get-COMObjectInfo] Forced Type Cast "OnDisk" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Verified" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Caption" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Hash" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Comment" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_FileVersion" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Description" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Date" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Company" to [Text] to support Elastic Search
 * [Get-COMObjectInfo] Forced Type Cast "Signature_Publisher" to [Text] to support Elastic Search

 * [BluGenie Core]     Updated the BluGenie Client function called ( Get-COMObjectInfo ). Read the function help for more details.
 
***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command		:  
 * Description	:  
 * Note  		: 

87th [Post]
 ~ PostedDate	 	: 12/17/2019
 ~ BuildNum# 	 	: 1912.0901
 ~ Engine Type		: PowerShell 3,4 and 5.x
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231912.0901
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3306/
 ~ Notes  	 	: Focus on Bug Fixes
				
# Updates #
* [Get-COMObjectInfo] 			Removed RuleNames from the Return Hash Table

* [Manage-ProcessHash] 			Updated all the Try Catch statements with more error return data

* [Get-ProcessList] 			Updated the ManageType error controls

* [BluGenie Core] 			Resolved Loop Back process where the responder connects back to itself
* [BluGenie Core] 			Expose Get-Lockedprocess to console and remote commands
* [BluGenie Core] 			Expose Manage-Processhash to console and remote commands

* [Invoke-Netstat] 			Add error control around manage-Process

* [Get-ServiceList] 			Updated the ManageService error controls
* [Get-ServiceList] 			Updated the ManageType error controls
* [Get-ServiceList] 			Added a sub process to track service changes
* [Get-ServiceList] 			Added a sub process to revert tracked service changes

* [Update-FirewallProfileStatus] 	Added a ReportOnly Parameter
* [Update-FirewallProfileStatus] 	Updated the Status Output to only show Profiles that are selected from the ProfileType parameter
* [Update-FirewallProfileStatus] 	Removed Parameter Positions for ( Walkthrough, ReturnObject, and OutUnEscapedJSON ) parameters
 
***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command	:  
 * Description	:  
 * Note  	: 

88th [Post]
 ~ PostedDate	 	: 12/19/2019
 ~ BuildNum# 	 	: 1912.2001
 ~ Engine Type		: PowerShell 3,4 and 5.x
 ~ Git Lab Link 	: https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231912.1601
 ~ Azure WorkItem	: https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3429
 ~ Notes  	 	: 
			  * Error management
			  * Tracking and Reverting the Firewall Service, and Profile changes
			  * BluGenie execution process
				Note:  	You can change the name of the PS3 version of BluGenie.  I renamed and copied it to GITLab.  BluGeniePSx.exe.
					This executable should be able to run with the PS2 version of (BluGenie.exe) without breaking each other.
					I will update the PS2 version to have the same features after some initial testing.
				
# Updates #
* [Update-FirewallProfileStatus] 	Added Comment section to the HashTable
* [Update-FirewallProfileStatus] 	Added more error control  around the Service Restart

* [Get-ErrorAction]			Get-ErrorAction is a function that will round up any errors into a smiple object
					Example: 
					{                                                                                                                      
						"Action":  	"Get-ItemProperty",
						"StackTrace":  	"at Track-FireWallStatus,line 316"
						"Line":  	"$ServiceInfo = Get-ItemProperty -Path 'HKLM:\SOFTWARE\BluGenie\GetFireWallStatus' -Name 'Service' -ErrorAction Stop | Select-Object -ExpandProperty 'Service' | ConvertFrom-Csv"
						"Error": 	"Cannot find path 'HKLM:\SOFTWARE\BluGenie\GetFireWallStatus' because it does not exist."                

* [BluGenie Core]			Add the function [ Get-ErrorAction ] to the allowed and remote commands list
* [BluGenie Core]			Add the function [ Track-FireWallStatus ] to the allowed and remote commands list
* [BluGenie Core]			Updated the core to use default runtime values to figure out where the executable is running from.  
					The process no longer looks for the BluGenie PID to figure out where it is running from.
* [BluGenie Core]			Updated the core to figure out the current executable name using default runtime values.
					This was hard coded before to 'BluGenie'.  

* [Track-FireWallStatus]		Track-FireWallStatus will track and revert the Windows Firewall Service and Profile configuration
 
***  Check the Azure WorkItem for more notes ***
  
# BenchMark #
 * None
 
# Tested Command(s) #
 ~ Get-AutoRuns ~
 * Command		:  
 * Description		:  
 * Note  		: 

89th [Post]
 ~ PostedDate	 	: 01/05/2020
 ~ BuildNum# 	 	: 1912.1602
 ~ Engine Type		: PowerShell 3,4 and 5.x
 ~ Git Lab Link 	: 
 ~ Azure WorkItem	: 
 ~ Notes  	 	: 
			  * Bug Fix for Get-ChildItemList
				
# Updates #
* [UGet-ChildItemList] 	Where-Object -FilterScript missing for [FilterType] other than the 'Name' property

90th [Post]
Posted Build#1912.1604
	•	Posted Date:
		o	02/01/2020
	•	Build Num#:
		o	1912.1602
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231912.1604
	•	Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3937/
	•	Notes:
		o	Focus on adding low level debugging and error management
				
# Updates #
	•	[BluGenie Core] Updated the Blugenie Help Header to the new viewable standard
	•	[BluGenie Core] Log Command line to the Transcript Log
	•	[BluGenie Core] Log Command line length to the Transcript Log
	•	[BluGenie Core] Added a new parameter called [ Debug ] to capture any errors left behind in the $Error variable.
	•	[BluGenie Core] Updated the BluGenie Client function called ( JSON ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Settings ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Wipe ). Read the function help for more details.
	•	[BluGenie Core] Added Write-Host overlay to process Write-Host calls in a different way
	•	[BluGenie Core] Added Out-Default overlay to process Out-Default calls in a different way
	•	[BluGenie Core] Added Out-Host overlay to process Out-Host calls in a different way
	•	[BluGenie Core] Added Write-Output overlay to process Write-Output calls in a different way

	•	[JSON] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
	•	[JSON] Updated the Hash Information to follow the new function standards
	•	[JSON] Added support for the ( JobTimeOut ) parameter
	•	[JSON] Added support for the ( Debug ) parameter
	•	[JSON] Added support for the ( JobID ) parameter

	•	[Settings] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
	•	[Settings] Updated the Hash Information to follow the new function standards
	•	[Settings] Added support for the ( JobTimeOut ) parameter
	•	[Settings] Added support for the ( Debug ) parameter
	•	[Settings] Added support for the ( JobID ) parameter

	•	[Wipe] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
	•	[Wipe] Updated the Hash Information to follow the new function standards
	•	[Wipe] Added support for the ( JobTimeOut ) parameter
	•	[Wipe] Added support for the ( Debug ) parameter
	•	[Wipe] Added support for the ( JobID ) parameter

	•	[Write-Host] Rewrote an Overlay Function for Write-Host.  This will capture anything sent to write-host, and tee the output to the normal command and to the Transcript file.  (Note:  This is embedded into the [Debug Overlay] region but after testing this function it was determined to be no longer needed.  So it is passed over.)  We can enable it at a later point if need be.

	•	[Out-Default] Rewrote an Overlay Function for Out-Default.  This will capture anything sent to Out-Default, and tee the output to the normal command and to the Transcript file.  (Note:  This is embedded into the [Debug Overlay] region but after testing this function it was determined to be no longer needed.  So it is passed over.)  We can enable it at a later point if need be.

	•	[Out-Host] Rewrote an Overlay Function for Out-Host.  This will capture anything sent to Out-Host, and tee the output to the normal command and to the Transcript file.  (Note:  This is embedded into the [Debug Overlay] region but after testing this function it was determined to be no longer needed.  So it is passed over.)  We can enable it at a later point if need be.

	•	[Write-Output]	Rewrote an Overlay Function for Write-Output.  This will capture anything sent to Write-Output, and tee the output to the normal command and to the Transcript file.  (Note:  This is embedded into the [Debug Overlay] region but after testing this function it was determined to be no longer needed.  So it is passed over.)  We can enable it at a later point if need be.

# BenchMark #
	•	None

# Tested Command(s) #
	~ BluGenie CLI ~
	•	Command
		o	BluGenie.exe
	•	Description
		o	Run the below manually in the Console
				Ping <valid system>
				Ping <valid system>
				Ping <Invalid system>
				Get-SystemInfo
				enable-winrmoverwmi -computername <valid system> -returndetails
				enable-winrmoverwmi -computername <invalid system> -returndetails
	•	Note 
		o	Transcript file - Normal data no debug or error information

	•	Command
		o	BluGenie.exe /debug
	•	Description
		o	Run the below manually in the Console
				Ping <valid system>
				Ping <Invalid system>
				Get-SystemInfo
				enable-winrmoverwmi -computername <valid system> -returndetails
				enable-winrmoverwmi -computername <invalid system> -returndetails
	•	Note
		o	Full Console Transcript file - Debug file with a similar name as the default transcript log.  This file has the following (.debug.log) at the end.
		o	You will also notice a new section in the normal transcript log called ( Debug Info ) at the bottom. There you will noticed any errors that are not capture to the normal logs.

	•	Command
		o	BluGenie.exe "run -system '<valid system>','<valid system>' -command 'get-systeminfo'"
	•	Description
		o	Run the BluGenie CLI with 2 valid systems running get-systeminfo
	•	Note
		o	Transcript file - Normal data no debug or error information



	•	Command
		o	BluGenie.exe "/debug run -system '<valid system>','<valid system>' -command 'get-systeminfo'"
	•	Description
		o	Run the BluGenie CLI using debug with 2 valid systems running get-systeminfo
	•	Note
		o	 

	•	Command
		o	BluGenie.exe "/debug run -system '<valid system>','<invalid system>' -command 'get-systeminfo'"
	•	Description
		o	Run the BluGenie CLI using debug with 1 valid and 1 invalid system running get-systeminfo
	•	Note
		o	 

	•	Command
		o	BluGenie.exe "/debug run -system '<invalid system>','<invalid system>' -command 'get-systeminfo'"
	•	Description
		o	Run the BluGenie CLI using debug with 2 invalid systems running get-systeminfo
	•	Note
		o	 

	•	Command
		o	BluGenie.exe "run -jsonjob 'C:\JSONPacks\test.json'"
	•	Description
		o	Run the BluGenie CLI running a JSON job ( No debugging )
	•	Note
		o	 

	•	Command
		o	BluGenie.exe "/debug run -jsonjob 'C:\JSONPacks\test.json'" 
	•	Description
		o	Run the BluGenie CLI using debug running a JSON job
	•	Note
		o	  

91st [Post]
Posted Build#1912.1605
	•	Posted Date:
		o	02/03/2020
	•	Build Num#:
		o	1912.1605
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231912.1605 
	•	Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/3996
	•	Notes:
		o	Focus on adding low level debugging
		o	Error management
		o	Screen resolution error when processing as a noninteractive process
				
# Updates #
	•	[BluGenie Core] Moved the debug overlay up in the process to capture more output in verbose mode
	•	[BluGenie Core] Added the ( NoSetRes ) parameter so to not update the consoles viewable screen size
	•	[BluGenie Core] Updated the parameter data to use $MyInvocation.UnboundArguments instead of using $Args
	•	[BluGenie Core] Updated the Command line parser to parse via regex and if a parameter is found to remove it from the command line string so the BluGenie agent commands get processed correctly.
	•	[BluGenie Core] Added the captured parameter data to the default transcript log file
	•	[BluGenie Core] Added the captured parameter data length to the default transcript log file
	•	[BluGenie Core] Added Debug information to JSON import on the Invoke-Process function
	•	[BluGenie Core] Added JobTimeOut information to JSON import on the Invoke-Process function
	•	[BluGenie Core] Updated the Job data to show RunSpaceTimeOut in Minutes and changed the display name value to JobTimeout
	•	[BluGenie Core] Updated the Job data to show SleepTimer in MS = Milliseconds

*** Check the Azure Work Item for more notes ***
  
# BenchMark #
•	None

# Tested Command(s) #
 ~ BluGenie CLI ~
	•	Command
		o	BluGenie.exe "/NoSetRes"
	•	Description
		o	Disable Setting the Screen size and buffer information
	•	Note 

	•	Command
		o	BluGenie.exe "/debug /NoSetRes"
	•	Description
		o	 Run NoSetRes while processing debug information
	•	Note 
		o	 

	•	Command
		o	 BluGenie.exe "/debug /NoSetRes /Verbose"
	•	Description
		o	 Run NoSetRes while processing debug information with verbose messaging
	•	Note 
		o	 

	•	Command
		o	 BluGenie.exe "/debug /NoSetRes /Verbose Invoke-Process -System <valid computer> -Command 'get-systeminfo'"
	•	Description
		o	Process a normal job with a valid computer while running NoSetRes, debug, and verbose messaging	
	•	Note 
		o	 

	•	Command
		o	BluGenie.exe "/debug /NoSetRes /Verbose Invoke-Process -System <Invalid computer> -Command 'get-systeminfo'"
	•	Description
		o	Process a normal job with an invalid computer while running NoSetRes, debug, and verbose messaging
	•	Note 
		o	 
	•	Command
		o	BluGenie.exe "/debug /NoSetRes /Verbose Invoke-Process -System '<valid computer>','<Invalid computer>' -Command 'get-systeminfo'"
	•	Description
		o	Process a normal job with a valid and an invalid computer while running NoSetRes, debug, and verbose messaging
	•	Note 
		o	 

	•	Command
		o	BluGenie.exe "/debug /Verbose"
	•	Description
		o	Run Console mode while enabling debugging and verbose messaging
	•	Note 
		o	 

	•	Command
		o	BluGenie.exe "/debug Invoke-Process -System '<valid computer>','<Invalid computer>' -Command 'get-systeminfo'"
	•	Description
		o	Process a normal job with a valid and an invalid computer while running debug
	•	Note 
		o	 

	•	Command
		o	BluGenie.exe "Invoke-Process -System '<valid computer>','<Invalid computer>' -Command 'get-systeminfo'"
	•	Description
		o	Process a normal job with a valid and an invalid computer
	•	Note 
		o	 

	•	Command
		o	BluGenie.exe "run -jsonjob 'C:\JSONPacks\Test.JSON'"
	•	Description
		o	Process a normal JSON job
	•	Note 
		o	 JSON Config
			{
				"systems":  [
					"valid system",
					"valid system",
					"invalid system"
					],
				"trap":  "False",
				"threadcount":  5,
				"jobid":  "12345",
				"commands":  [
					"get-systeminfo"
				],
				"range":  [
				],
				"debug":  "True",
				"postcommands":  [
				],
				"parallelcommands":  [
				],
				"jobtimeout":  1
			}


92nd [Post]
Posted Build#1912.1606
	•	Posted Date:
		o	02/05/2020
	•	Build Num#:
		o	1912.1606
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%231912.1606
	•	Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire2.1/_workitems/edit/4026
	•	Notes:
		o	Focus on adding debugging
		o	Add features to the WinRM configuration function
		o	Remove all Screen position updates when processing the /NoSetRes parameter
				
# Updates #
	•	[BluGenie Core] Updated the Console check to validate only once.  Console validation was happing in the BluGenie Core and in the Invoke-Process function
	•	[BluGenie Core] Updated the BluGenie Client function called (Enable-WinRMoverWMI ). Read the function help for more details.
	•	[BluGenie Core] Updated the /NoSetRes parameter to disable all Screen position updates if enabled

	•	[Enable-WinRMoverWMI] Updated the Help information to the new standard for Invoke-Walkthrough (External Call)
	•	[Enable-WinRMoverWMI] Updated the Hash Information to follow the new function standards
	•	[Enable-WinRMoverWMI] Added more detailed information to the Return data
	•	[Enable-WinRMoverWMI] Changed the query process to detect WinRM first and not WMI

*** Check the Azure Work Item for more notes ***
  
# BenchMark #
	•	None
	

# Tested Command(s) #
	~ Enable-WinRMoverWMI ~
	•	Command
		o	BluGenie Console
				Enable-WinRMoverWMI -OutUnEscapedJSON -ComputerName <valid_computer> -ReturnDetails 
	•	Description
		o	Return a full list of details about the connection broker
	•	Note 
		o	Sample Output below.
		
			WinRMEnabled": {
				"Enabled": true,
				"Config": [
				  "AllowRemoteShellAccess = true",
				  "IdleTimeout = 7200000",
				  "MaxConcurrentUsers = 100",
				  "MaxShellRunTime = 2147483647",
				  "MaxProcessesPerShell = 2147483647",
				  "MaxMemoryPerShellMB = 2147483647",
				  "MaxShellsPerUser = 2147483647"
				],
				"PSVersion": "3",
				"ElapsedTime": {
				  "Days": 0,
				  "Hours": 0,
				  "Milliseconds": 422,
				  "Minutes": 0,
				  "Seconds": 3
				},
				"OrgConnectionBroker": "WinRM",
				"loopcount": 0,
				"Comments": [],
				"EndTime": "Wednesday, February 5, 2020 8:39:07 AM",
				"ParameterSetResults": {
				  "ComputerName": "win7sp1002",
				  "ReturnDetails": {
					"IsPresent": true
				  },
				  "SetValues": {
					"IsPresent": true
				  },
				  "MaxConcurrentUsers": 100,
				  "MaxProcessesPerShell": 2147483647,
				  "MaxMemoryPerShellMB": 2147483647,
				  "MaxShellsPerUser": 2147483647,
				  "MaxShellRunTime": 2147483647
				},
				"ValidComputerName": {
				  "value": "WIN7SP1002",
				  "PSComputerName": "win7sp1002",
				  "RunspaceId": "31f95f2e-0cea-4ae3-bf42-0542b2568ced",
				  "PSShowComputerName": true
				}

	•	Command
		o	BluGenie Console
				Enable-WinRMoverWMI -OutUnEscapedJSON -ComputerName <Invalid_computer> -ReturnDetails 
	•	Description
		o	Return a full list of details about the connection broker on a machine that has the Firewall turned on and WinRM disabled
	•	Note 
		o	 

	•	Command
		o	BluGenie Console
				Enable-WinRMoverWMI -OutUnEscapedJSON -ComputerName <valid_computer> -ReturnDetails 
	•	Description
		o	Return a full list of details about the connection broker on a machine that has the Firewall turned on, WinRM disabled, WMI disabled
	•	Note 
		o	 

	~ BluGenie CLI ~
	•	Command
		o	BluGenie.exe "/debug /nosetres run -jsonjob .\jsonpacks\test.json"
	•	Description
		o	 Run NoSetRes while processing debug information and processing all commands from a job script.
	•	Note 
		o	2 valid computers
		o	1 Invalid computer
		o	Timeout is set to 1 min
		o	Command is set to (Get-SystemInfoi)


93rd [Post]
Posted Build#2002.1001
	•	Posted Date:
		o	02/23/2020
	•	Build Num#:
		o	2002.1001
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	 
	•	Azure Work Item:
		o	 
	•	Notes:
		o	WinRM error management
		o	Load JSON at Runtime (The default behavior was to run a JSON job when processing “Invoke-Process or Run”
		o	CLI manageability
				
# Updates #
	•	[BluGenie Console] – Rebuilt the /Verbose command to be parsed easier
	•	[BluGenie Console] – Rebuilt the /Help command to be parsed easier
	•	[BluGenie Console] – Rebuilt the /Debug command to be parsed easier
	•	[BluGenie Console] – Rebuilt the /NoSetRes command to be parsed easier
	•	[BluGenie Console] – Added the /NoExit parameter.  This parameter keeps the Console opened even after running an automated JSONJob.  Helps with troubleshooting, etc. 
	•	[BluGenie Console] – Added the /NoBanner parameter.  This parameter will disable the BluGenie Banner from showing
	•	[BluGenie Console] – Added the /OC parameter.  This parameter will enable the older BluGenie Console.  This is also the default for the console being ran on a PS3 system.
	•	[BluGenie Console] – Added the /Hidden parameter.  This parameter will launch BluGenie with no screen.  This is good for sessions with no users logged in.
		o	This also automatically enabled /NoSetRes.  So no updates to the screen will be processed.  As there is no viewable screen
	•	[BluGenie Console] – The Entire console was rewritten
		o	Added a much easier parameter management process.  New parameters can be easily added.
		o	2 Console engines now exist.
				The default using the Read-Host function.
				•	The biggest downfall was the commands had to be memorized.  Somewhat difficult to know what commands could be ran without running a full /Help process to understand everything.
				The new Console engine is identical to how PowerShell runs
				•	Custom Tab Completion (for BluGenie Commands Only)
				•	Syntax checking
				•	Full History that can be viewed at a glance, sorted, filtered, and pushed back into the console.
				•	Visual Command List that can be viewed at a glance, sorted, filtered, and pushed back into the console.
				•	Visual Help tied directly into the Interactive Help Sub system
*** Check the Azure Work Item for more notes ***
  
# BenchMark #
•	None

# Tested Command(s) #
 ~ BluGenie.exe ~
	•	Command
		o	.\BluGenie.exe "/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose"
		o	.\BluGenie.exe /debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" /verbose
		o	.\BluGenie.exe /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose
		o	.\BluGenie.exe "/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""" /verbose"
		o	.\BluGenie.exe """/debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" /verbose"""
		o	.\BluGenie.exe """/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose"""
		o	.\BluGenie.exe "/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json' /verbose"
		o	.\BluGenie.exe /debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json" /verbose
		o	.\BluGenie.exe /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json' /verbose
		o	.\BluGenie.exe "/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json""" /verbose"
		o	.\BluGenie.exe """/debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json" /verbose"""
		o	.\BluGenie.exe """/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSON Packs\test.json' /verbose"""
		o	.\BluGenie.exe "/jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'"
		o	.\BluGenie.exe /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json"
		o	.\BluGenie.exe /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'
		o	.\BluGenie.exe "/jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""""
		o	.\BluGenie.exe """/jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""""
		o	.\BluGenie.exe """/jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'"""
		o	.\BluGenie.exe "/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose run -system win7sp1002 -command 'get-systeminfo'"
		o	.\BluGenie.exe /debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" /verbose run -system win7sp1002 -command 'get-systeminfo'
		o	.\BluGenie.exe /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose run -system win7sp1002 -command 'get-systeminfo'
		o	.\BluGenie.exe "/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""" /verbose run -system win7sp1002 -command 'get-systeminfo'"
		o	.\BluGenie.exe "/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""" /verbose run -system win7sp1002 -command """get-systeminfo""""
		o	.\BluGenie.exe """/debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" /verbose run -system win7sp1002 -command 'get-systeminfo'"""
		o	.\BluGenie.exe """/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' /verbose run -system win7sp1002 -command 'get-systeminfo'"""
		o	.\BluGenie.exe " /verbose run -system win7sp1002 -command 'get-systeminfo' /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'"
		o	.\BluGenie.exe /verbose run -system win7sp1002 -command 'get-systeminfo' /debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json"
		o	.\BluGenie.exe /verbose run -system win7sp1002 -command 'get-systeminfo' /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'
		o	.\BluGenie.exe "/verbose run -system win7sp1002 -command 'get-systeminfo'/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""""
		o	.\BluGenie.exe "/verbose run -system win7sp1002 -command 'get-systeminfo'/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""""
		o	.\BluGenie.exe """/verbose run -system win7sp1002 -command 'get-systeminfo'/debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""""
		o	.\BluGenie.exe """/verbose run -system win7sp1002 -command 'get-systeminfo'/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'"""
		o	.\BluGenie.exe
		o	.\BluGenie.exe "/debug /verbose"
		o	.\BluGenie.exe """/debug /verbose"""
		o	.\BluGenie.exe /debug /verbose
		o	.\BluGenie.exe run -system win7sp1002 -command get-systeminfo
		o	.\BluGenie.exe "/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run"
		o	.\BluGenie.exe /debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" run
		o	.\BluGenie.exe /debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run
		o	.\BluGenie.exe "/debug /jsonjob="""C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json""" run"
		o	.\BluGenie.exe """/debug /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json" run"""
		o	.\BluGenie.exe """/debug /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run"""
		o	.\BluGenie.exe run -system win7sp100 -command get-systeminfo /debug /nobanner /noexit
		o	.\BluGenie.exe ping win7sp100 /debug /nobanner /noexit /oc 
		o	.\BluGenie.exe run -system win7sp1002 -command get-systeminfo
		o	.\BluGenie.exe run -system win7sp1002 -command get-systeminfo /noexit
		o	.\BluGenie.exe run -system win7sp1002 -command get-systeminfo /hidden /debug
		o	.\BluGenie.exe /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'
		o	.\BluGenie.exe /jsonjob="C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json"
		o	.\BluGenie.exe """/jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json'"""
		o	.\BluGenie.exe /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run 
		o	.\BluGenie.exe /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run /noexit
		o	.\BluGenie.exe /jsonjob='C:\Source\kgkzcode\blugenie\2002.1001\bin\x64\JSONPacks\test.json' run /noexit /oc
	•	Description
		o	 (54) different ways to run BluGenie from the CLI.  Every one of them has tested successfully.
	•	Note 
		o	All the commands were tested using 
				Windows Run Command
				Command Prompt
				PowerShell Console


94th [Post]
Posted Build#2002.2401
	•	Posted Date:
		o	02/25/2020
	•	Build Num#:
		o	2002.2401
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2401
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4286
	•	Notes:
		o	Bug fixes
				Get-SystemInfo -  Task 4037 in Azure
				Get-ChildItemList – Task 4124 in Azure
				Get-ProcessList – Task 4228 in Azure
				Console Update 
				
# Updates #
	•	[Get-SystemInfo] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
	•	[Get-SystemInfo] Updated the Hash Information to follow the new function standards
	•	[Get-SystemInfo] Added more detailed information to the Return data
	•	[Get-SystemInfo] Updated the Code to the '145' column width standard
	•	[Get-SystemInfo] Fixed the (CompletedWithErrors) issue when there were no logged on users.
	•	[Get-SystemInfo] Updated the Logged on User call.  It was originally only showing active sessions.  Now it queries any logged on session ever.
	•	[Get-SystemInfo] Added a new process to show Interactive Sessions with Process ID and Session ID information.
	•	[Get-SystemInfo] Updated the (SystemStartTime) to a readable date string
	•	[Get-SystemInfo] Updated the LoggedOnUsers (StartTime) to a readable date string
	•	[Get-SystemInfo] Updated the InteractiveSessions (LoggedOnSince) to a readable date string
	•	[Get-SystemInfo] Added a new parameter (-ShowUpdates) to gather Windows Updates 
	•	[Get-ChildItemList] Updated the directory search process to capture directories that have different attribute value other than just Directory Example: 'ReadOnly, Directory',Etc.
	•	[Get-ChildItemList] Updated the Code to the '145' column width standard
	•	[Get-ProcessList] Updated the Code to the '145' column width standard
	•	[Get-ProcessList] Updated the ManageType processes to not execute if there are no system processes found
	
*** Check the Azure Work Item for more notes ***
  
# BenchMark #
	•	None

# Tested Command(s) #
 ~ * ~
	•	Command
		o	 
	•	Description
		o	 
	•	Note 
		o	 


95th [Post]
Posted Build#2002.2601
	•	Posted Date:
		o	02/28/2020
	•	Build Num#:
		o	2002.2601
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2601
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4333
	•	Notes:
		o	Bug fixes
				Get-SchTaskInfo – Azure Task 4300
				Get-ServiceList – Azure Task 4053
				Invoke-NetStat – Azure Task 4122
				Manage-ProcessHash – Azure Task 4055
				Get-WindowsUpdates – Testing Issues, no ticket assigned
				
# Updates #
	•	[Get-SchTaskInfo] Updated the "NextRunTime and LastRunTime" properties to show a valid date string.
	•	[Get-SchTaskInfo] Updated the Code to the '145' column width standard
	•	[Get-ServiceList] Updated the Code to the '145' column width standard
	•	[Get- ServiceList] Fixed the false positive error when removing a service.  Prior a valid removal would trigger an error that the service could not be found.
	•	[Invoke-NetStat] Updated the Code to the '145' column width standard
	•	[Invoke-NetStat] Updated the (State) filter to query all NetStat Connections using the (.) regex pattern.
	•	[Manage-ProcessHash] Updated the Code to the '145' column width standard
	•	[Manage-ProcessHash] Updates the Suspend and Resume function to process multiple PID's based on Hash query
	•	[Get-WindowsUpdates] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
	•	[Get-WindowsUpdates] Updated the Hash Information to follow the new function standards
	•	[Get-WindowsUpdates] Updated the function to the new function tempatle
	•	[Get-WindowsUpdates] Added more detailed information to the Return data
	•	[Get-WindowsUpdates] Updated the Code to the '145' column width standard
	•	[Get-WindowsUpdates] Added a path check for 'HKLM:\SOFTWARE\Classes\Installer\Patches' so there are no path errors
	•	[Get-WindowsUpdates] Added the HotFix values to the returning Hash Table. This was only viewable using ReturnObject switch

*** Check the Azure Work Item for more notes ***
  
# Benchmark #
	

# Tested Command(s) #
 ~ BluGenie.exe ~
	•	Command
		o	 
	•	Description
		o	 
	•	Note 
		o	 

96th [Post]
Posted Build#2002.2602
	•	Posted Date:
		o	03/03/2020
	•	Build Num#:
		o	2002.2602
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	
	•	Azure Work Item:
		o	
	•	Notes:
		o	Bug fixes
				Get-ChildItemList – Azure Task 4124
				Get-ServiceList – Azure Task 4053
				Get-SystemInfo – Azure Task 4053
				
# Updates #
	•	[Get-ChildItemList] Injected the new function into BluGenie.  There is a bug in Primal Script Studio that doesn’t copy and paste correctly.
	•	 [Get-ServiceList] Added a new check to determine if the service exits.  Prior, Get-Service with Service name would generate an error even if you selected -ErrorAction to SilentlyContinue if the service did not exist.  
	•	[Get-ServiceList] Updated the ManageServiceType sub function to not run unless a service is found.  This way there are no generated errors if a service is not found even if the service list is (Zero)
	•	[Get-SystemInfo] Updated the Get-WindowsUpdate call while using the –ShowUpdates switch to pull the hash table instead of the object.  Data is now showing correctly.

*** Check the Azure Work Item for more notes ***
  
# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~
	•	Command
		o	 
	•	Description
		o	 
	•	Note 
		o	 

97th [Post]
Posted Build#2002.2603
	•	Posted Date:
		o	03/10/2020
	•	Build Num#:
		o	2002.2603
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2603 
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4431 
	•	Notes:
		o	Bug fixes
				Azure Task – 4417 (Get-SchTaskInfo)
				Azure Task – 4419 (BGConsole – PSVersion Detection)
				
# Updates #
	•	[Invoke-Parallel] Updated the Error capture event to report more detailed error information to the .CSV Log
	•	[Get-ServiceList] Added a new check to determine if the service exits.  Prior, Get-Service with Service name would generate an error even if you selected -ErrorAction to SilentlyContinue if the service did not exist.
	•	[Get-ServiceList] Updated the ManageServiceTyper sub function to not run unless a service is found.  This way there are no generated errors if a service is not found even if the service list is (Zero)
	•	[Get-SchTaskInfo] Fixed the Hash property when calling an instance with no valid file on disk.  Prior the value was based on the previous files hash and wasn’t valid.

*** Check the Azure Work Item for more notes ***
  
# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~
	•	Command
		o	 
	•	Description
		o	 
	•	Note 
		o

Posted Build#2002.2604
	•	Posted Date:
		o	03/30/2020
	•	Build Num#:
		o	2002.2604
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2604
	•	Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4717
	•	Notes:
		o	Bug fixes
				Azure Task – 4419 (BGConsole - PSVersionDetection)
				Azure Task – 4121 (Get-ChildItemList)
				Fixed the $CurSystem value to be set with either FQDN or Hostname, similar to build 1607.
		o	Created a new JSONPacks\TestingFramework direcotory.
		o	Structure
				Directory -> (CmdLet / Function Name)
	•	Directory -> (Description)
		o	FileName -><Key Header Section>_<Parameters Used>
		o	Example:
				Get-ChildItemList
				•	Search_Root_C_for_Directories_Only
					o	 Commands_SearchType-SearchPath.JSON
					o	Commands_SearchType-SearchPath-Quick.JSON
					o	ParallelCommands_SearchType-SearchPath.JSON
					o	ParallelCommands_SearchType-SearchPath-Quick.JSON
					o	PostCommands_SearchType-SearchPath.JSON
					o	PostCommands_SearchType-SearchPath-Quick.JSON

				
# Updates #
	•	[BluGenie Core] Updated the BluGenie Client function called ( Get-ChildItemList ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Enable-WinRMoverWMI ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Get-HashInfo ). Read the function help for more details.
	•	[BluGenie Core] Updated the New console to only run when Set-PSReadlineKeyHandler and PowerShell Version is greater than 5.1
	•	[Get-ChildItemList] Fixed the Quick Directory Query
	•	[Get-ChildItemList] Updated the error management around $RedirectErrOutput
	•	[Get-ChildItemList] Updated the RegEx filter for SearchType [File / Directory / and Any]
	•	[Get-ChildItemList] Fixed the Attribute analyzer from Get-Item to [System.IO.FileInfo].  Get-Item code uses the 			
								GetFileAttributes function to determine whether a file exists. Because it's returning -1 
								for in use system files, the FileSystemProvider is behaving as though the file doesn't exist.
	•	[Get-ChildItemList] Updated hash information header with comment section for errors
	•	[Get-ChildItemList] Updated the error capture event to save all errors to the new Hash information header
	•	[Enable-WinRMoverWMI] Fixed the $CurSystem value to be set with either FQDN or Hostname.  Similar to build 1607.
	•	[Get-HashInfo] Fixed the Get-Item file information check to [System.IO.FileInfo].  Get-Item code uses the GetFileAttributes 
							function to determine whether a file exists. Because it's returning -1 for	in use system files, the FileSystemProvider is behaving as though the file doesn't exist.
	•	[Get-HashInfo] Updated the Help Information to the new External format
	•	[Get-HashInfo] Added Error reporting to Comment Section
	
*** Check the Azure Work Item for more notes ***
  
# Benchmark #
	•	None

# Tested Command(s) #
	 ~ BluGenie.exe ~
		•	Command
			o	 Get-ChildItemList -SearchType File -SearchPath 'c:\'
		•	Description
			o	 File Search on the Root directory
		•	Note 
			o	 

		•	Command
			o	 Get-ChildItemList -SearchType File -SearchPath 'c:\' -Quick
		•	Description
			o	 File Search on the Root directory using the Quick parameter
		•	Note
			o	  

		•	Command
			o	 Get-ChildItemList -SearchType Directory -SearchPath 'c:\'
		•	Description
			o	 Directory Search on the Root directory
		•	Note 
			o	 

		•	Command
			o	 Get-ChildItemList -SearchType Directory -SearchPath 'c:\' -Quick
		•	Description
			o	Directory Search on the Root directory using the Quick parameter
		•	Note 
			o	 
 	 
Posted Build#2002.2605
	•	Posted Date:
		o	04/05/2020
	•	Build Num#:
		o	2002.2605
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2605 
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/create/User%20Story 
	•	Notes:
		o	Bug fixes
				Azure Task 4774 - Error Trapping for Non-exist files
				Azure Task 4772 – Branding
				
# Updates #
	•	[Get-HashInfo] Updated the Get-ErrorAction return to make sure there is an $error value before running
	•	[Get-ChildItemList] Fixed the $Null error msg when a file was not found
	•	[Get-ChildItemList] Added new commnets for missing files
	
	*** Check the Azure Work Item for more notes ***
  
# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~
	•	Command
		o	 Get-HashInfo –Path C:\Dummy.exe
	•	Description
		o	 Search for a non-existing file
	•	Note 
		o	 

	•	Command
		o	 Get-ChildItemList –SearchType File –SearchPath ‘C:\’ -Pattern ‘dummy.exe’
	•	Description
		o	 Search for a non-existing file
	•	Note 
		o	 
		
		
Posted Build#2002.2606
	•	Posted Date:
		o	04/24/2020
	•	Build Num#:
		o	2002.2606
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2606
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5044
	•	Notes:
		o	Consolidated the Output Directories by removing
			•	CompletedWithErrors
			•	OutOfMemory
			•	TimedOut

		o	Bug fixes
			•	Azure Task 4990 – Add PID Information to JSON
			•	Azure Task 4992 – Add PID and Job ID to Trap File Name
			•	Azure Task 4775 – BG Console – Error Handling
			•	Azure Task 4868 – Invalid Registry Path
			•	Azure Task 4809 – Console PS Version detect
			•	Azure Task 4406 – Get-ChildItem – Locking Process

				
# Updates #
	•	[BluGenie Core] Updated the Error management around Posh 3,4, and 5 console execution.  This was causing the console to fail when running on an older version of Posh.  This is a Host related issues, not a remote client posh error.
	•	[BluGenie Core] Added the PID information to JSON Computer Job file
	•	[BluGenie Core] Added the PID and the Job ID to the JSON file trap data name
	•	[BluGenie Core] Updated the BluGenie Client function called ( Get-Registry ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Get-LockingProcess ). Read the function help for more details.
	•	[BluGenie Core] Updated the BluGenie Client function called ( Start-NewProcess ). Read the function help for more details.	
	•	[BluGenie Core] Updated the BluGenie Client function called ( Invoke-Process ). Read the function help for more details.
	•	[Get-Registry] Updated the parameter value ( MatchValue ) to ( MatchValueName ).  Conform to the real registry value name
	•	[Get-Registry] Updated the data return value name ( Value ) to ( ValueName ).  Conform to the real registry value name
	•	[Get-Registry] Added the Alias ( MatchValue ) to ( MatchValueName ) so older function calls still work 
	•	[Get-Registry] Added the Alias ( Path ) to ( StartKey ) to make the command cleaner and still support the older calls
	•	[Get-Registry] Added type information for each data value returned
	•	[Get-Registry] Updated the StartKey search to run a cleaner -Match RegEx pattern
	•	[Get-Registry] Added Get-ErrorAction to all subfunction for error management
	•	[Get-Registry] Updated the Output to always return some data, previously it was set to return nothing if the key didn't exist
	•	[Get-Registry] Removed all Throw errors and errors are now being managed by Get-ErrorAction
	•	[Get-Registry] Added a Hive key check.  If the key doesn't exist, the registry is not queried
	•	[Get-Registry] Updated the Help information to the new standard for Invoke-Walkthrough (External Call)
	•	[Get-Registry] Updated the Hash Information to follow the new function standards
	•	[Get-Registry] Added more detailed information to the Return data
	•	[Get-Registry] Updated the Code to the '145' column width standard
	•	[Get-Registry] Added the -ExcludePattern parameter which is used in conjunction with -Pattern.  It will allow you to reparse found items based on the given pattern and then exclude any instances you no longer want.
	•	[Get-Registry] Updated the Binary data to be consolidated.  This compresses the binary data value.
	•	[Get-Registry] Added a Test path process to the StartKey/Path value.
	•	[Get-Registry] Updated the ( Remove ) process to search for the new type identifier to help identify how to remove the Key or ValueName registry data
	•	[Get-LockingProcess] Added the missing parameter for handle.exe --> accepteula
	•	[Start-NewProcess] Updated the WindowStyle property to --> 'Hidden'
	•	[Start-NewProcess] Updated the CreateNoWindow property to --> $true
	•	[Invoke-Process] Consolidated the Output Directories by removing
		o	CompletedWithErrors
		o	OutOfMemory
		o	TimedOut


  
# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~

	•	Command: 
		o	Get-Registry -StartKey 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly
	•	Description: 
		o	Query Keys Only, Process the Root with No Sub Keys, Using the StartKey Param, Using the Short Hand Hive name
	•	Notes: 

	•	Command: 
		o	Get-Registry -StartKey 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly -Pattern 'run'
	•	Description: 
		o	Specify a specific pattern to search for, Query Keys Only, Process the Root with No Sub Keys
	•	Notes: 

	•	Command: 
		o	Get-Registry -StartKey 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly -Pattern 'run' -ExcludePattern 'once'
	•	Description: 
		o	Specify a specific pattern to search for while using an Exclude pattern, Query Keys Only, Process the Root with No Sub Keys
	•	Notes: 

	•	Command: 
		o	Get-Registry -StartKey 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly -Pattern 'run' -ExcludePattern 'once'  -ReturnObject
	•	Description: 
		o	Return Data as an Object
	•	Notes: 

	•	Command: 
		o	Get-Registry -StartKey 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly -Pattern 'run' -ExcludePattern 'once'  -ReturnObject -FormatView csv
	•	Description: 
		o	Return Data as an Object, Reformat the Object as CSV,JSON,CustomObject,UnEscapedJSON.
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion' -MatchKey -RootKeyOnly
	•	Description: 
		o	Query Keys Only, Process the Root with No Sub Keys, Using the Path Param, Using the Long Name Hive Name
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths'
	•	Description: 
		o	Query Value Names (Default), Process Sub Keys, Using the Long Name Hive Name
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths' -MatchKey -Pattern 'Write' -Remove
	•	Description: 
		o	Query Key Names, Process Sub Keys, Using the Long Name Hive Name, Remove Keys Found
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths' -MatchData -Pattern 'Word' -Remove
	•	Description: 
		o	Query Data Values, Process Sub Keys, Using the Long Name Hive Name, Remove ValueNames Found
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -MatchValueName -Pattern '(?=.*Auto)(?=.*Logon)' -ExcludePattern 'Sid|Count'
	•	Description: 
		o	RegEx Search Pattern and Exclude Pattern
	•	Notes: 

	•	Command: 
		o	Get-Registry -Path 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -OutUnEscapedJSON -MatchValueName -Pattern '(?=.*Auto)(?=.*Logon)' -ExcludePattern 'Sid|Count'
	•	Description: 
		o	RegEx Search Pattern and Exclude Pattern, Output UnEscaped JSON
	•	Notes:


Posted Build#2002.2607
	•	Posted Date:
		o	05/10/2020
	•	Build Num#:
		o	2002.2607
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2607
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5241
	•	Notes:
		o	Bug fixes
			•	Azure Task 5127 – JobID – Not working in BluGenie PS3
			•	Azure Task 5128 – JobID – Not working in BluGenie PS2
			•	Azure Task 5130 – BG Execution Failing on 2k12R2 Posh 5.1 and Posh 3.0
			•	Azure Task (Not Assigned) – Memory of 1 job is too large to process more jobs.
		o	Added Features
			•	Set memory limit cap to manage resources
			•	Set CPU Affinity 
			•	Set Process Priority
			•	Unlocker to allow for running Posh commands and BG commands together
			•	PSReadLine 2.0 is now installed enabled on the fly for all Posh 5.x versions and above.
			•	New open source Posh Modules can now be injected at runtime into the BluGenie process.

				
# Updates #
	•	[BluGenie Core] Added support for memory cap limiting on job creation
	•	[BluGenie Core] Created a new BluGenie Host function called ( Set-ProcessCPUAffinity )
	•	[BluGenie Core] Created a new BluGenie Host function called ( Set-ProcessPriority )
	•	[BluGenie Core] Updated the BluGenie Host function called ( Invoke-Parallel )
	•	[BluGenie Core] New CLI parameter ( Unlock ) to unlock Posh functions to BG
	•	[BluGenie Core] New CLI parameter ( Cores ) to set which Core to run BG on 
	•	[BluGenie Core] New CLI parameter ( Priority ) to set BG’s Process Priority
	•	[BluGenie Core] New CLI parameter ( Memory ) to set BG’s Memory Limit per job.
	•	[Set-ProcessCPUAffinity] Set the Processor affinity for a running Process by specifying the CPU Cores that it can run on, and the name or PID of a Process(s)
	•	[Set-ProcessPriority] Set the Processor Priority for a running Process based on 6 different priority levels.


 *** Check the Azure Work Item for more notes ***
  
# Benchmark #
		None

# Tested Command(s) #
	 ~ BluGenie.exe ~
	•	Command
		o	Blugenie.exe /unlock
	•	Description
		o	Run BG in Unlocked mode which will let you control Posh commands as well as BG Commands
	•	Notes:
		o	 

	•	Command
		o	Blugenie.exe /cores=2 /priority=5
	•	Description
		o	Run BluGenie on Core 2, with Priority 'RealTime'
	•	Notes:
		o	 

	•	Command
		o	BluGenie.exe /cores=1 /memory=512 /priority=1
	•	Description
		o	BluGenie on Core 1, Memory cap set to 512, with Priority 'Below normal'
	•	Notes
		o	 

	•	Command
		o	BluGenie.exe /memory=1024 /priority=0
	•	Description
		o	BluGenie, Memory cap set to 1024, with Priority 'Low'
	•	Notes
		o	 

	•	Command
		o	BluGenie.exe /memory=512 /priority=1 /cores=1 /jsonjob=.\JSONPacks\2kplustest.JSON run
	•	Description
		o	Memory cap set to 1024, with Priority 'Below normal', Core 1, Processing a JSON job and automatically execute the job
	•	Notes
		o	 


Posted Build#2002.2608
	•	Posted Date:
		o	05/19/2020
	•	Build Num#:
		o	2002.2608
	•	Engine Type:
		o	PowerShell 3,4 and 5.x
	•	Git Lab Link:
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/tree/BuildNum%232002.2608
	•	 Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5317
	•	Notes:
		o	Bug fixes
		•	5314 /cores arguments with multiples values failing - PS3
		•	5138 Adding Static ID to Transcripts log - PS3
		•	5139 Adding Static ID to Transcripts log - PS2
		•	4775 BG Console - Error Handling -PS2,PS3 (Module was missing, there is no code change needed)
		•	 5313 Invoke-Process failed with new CLI- POSH3Added Features
		o	Features
			•	97 Internal commands ported to a new BluGenie Module
			•	Main framework went from over 60,000 lines of code to a more managable framework of 2500
			•	Any Module / Resouce can be copied to a remote system and ran as a locally installed module
			•	Modules can be left behind, updated, or removed
			•	All Modules are copied over WinRM so SMB is not needed
			•	Modules get copied in function segments so you are less likely to see WinRM bandwidth issues
			•	BluGenie managed modules do not get installed in Posh's default location and are only triggered with BluGenie or manual

				
# Updates #
	•	[BluGenie Core] Removed the entire core function list and ported them to a BluGenie Module
	•	[BluGenie Module] 97 internal functions have been ported to a standard PowerShell Module

 *** Check the Azure Work Item for more notes ***
  
# Benchmark #
	•	None

# Tested Command(s) #
	•	Check the Jupyter Notebook (Build 2002.2608.ipynb)


Posted Build#20.02.2609
	•	Posted Date:
		o	06/24/2020
	•	Build Num#:
		o	20.02.2609
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/BuildNum%2320.02.2609
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5649  
	•	Notes:
		o	Bug fixes
			•	Azure Task 5130 – BG Execution failing on 2K12R2(PS5.1,4.0)and 2K12(3.0), - PS3
			•	Azure Task 4989 - Add PID Information to JSON - Posh 2
			•	Azure Task 4991 - Add PID Information to Trap File Name - Posh 2
			•	Azure Task 4809 - BG- Console PS Version detect -PS2
			•	Azure Task 5128 - JOBID - Notworking in BluGenie-  PS2
			•	Azure Task 5139 - Adding Static ID to Transcripts log - PS2
				
# Updates #
		•	Single JSON for Posh 2 and up.  No longer separate JSON files.
		•	Fixed - Parallel commands were failing to run in the previous build.
		•	Fixed - Memory information info posted to the screen is not working
		•	Fixed - Modules fail to copy to Posh 2 systems
		•	NoSetRes is now triggered automatically so if the Windows Frame is resized manually BluGenie will update the NoSetRes variable automatically so there are no errors.
		•	Fixed – PSM1 failed to load on Posh2 since the module followed the Posh3 standards
		•	Fixed – Get-BluGenieHostingVersion was failing to show to the screen if the module is loaded without BluGenie.exe.  This has been updated work using the Posh Module with no Blugenie.exe
		•	Fixed - Get-BluGenieSessionFunctionList to work process when running in the new Module format
		•	Updated the Get-BluGenieSettings function to track more information.  Also load and manage any global variable needed by the BluGenie framework while using the Module only.
		•	Updated the below framework functions to work while using the Module only.
			o	JSON -> Edit-BluGenieJSON
			o	Wipe -> Invoke-BluGenieWipe
			o	Run -> Invoke-BluGenieProcess
			o	Commands -> Set-BluGenieCommands
			o	ParallelCommands -> Set-BluGenieParallelCommands
			o	PostCommands -> Set-BluGeniePostCommands
			o	SetDebug -> Set-BluGenieDebugger
			o	JobId -> Set-BluGenieJobId
			o	JobTimeout -> Set-BluGenieJobTimeout
			o	Range -> Set-BluGenieRange
			o	Systems -> Set-BluGenieSystems
			o	ThreadCount -> Set-BluGenieThreadCount
			o	SetTrap -> Set-BluGenieTrapping

  
# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~

	•	Command: 
		o	 
	•	Description: 
		o	 
	•	Notes: 
		o	 
		
Posted Build#20.02.2609
	•	Posted Date: 
			07/05/2020 
	•	Build Num#: 
		o	20.06.2701
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/BuildNum%2320.06.2701
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5689  
	•	Notes: 
		o	Bug fixes 
				Azure Task 5674 - /NoSetRes failing with JSON input - 20.02.2609
				Azure Task 5688 - Get-Childitemlist -2609
				Azure Task 4574 - Get-Systeminfo  - PS2
				Azure Task 5667 - JSON settings values failed to import by JSON -Import - 20.02.2609
				Azure Task 5328 - Modules import failed due to Restricted execution policy - POSH3
           
# Updates #
	•	Updated the search function for older systems from /a-o-l to /a-l based on older systems not having the parameter /a-o
	•	Added a check to the (.GetRelated) method to only run on Posh 3 and up.
		o	Manoj - As it never failed for me.  But failed for you I could not test this action.  
	•	Added all the missing JSON/Setting properties.  Info was missing when picking a .JSON file from the File Explorer.  It was working when using the CLI or the file was ran via command
	•	Updated remote code to update the Execution Policy while importing BluGenie Modules.  The Execution policy is set back to the original setting after the modules are loaded

# Benchmark #
	•	None

# Tested Command(s) #
 ~ BluGenie.exe ~

	•	Command: 
		o	 
	•	Description: 
		o	 
	•	Notes: 
		o	 

Posted Build#20.07.0601
	•	Posted Date: 
		o	08/03/2020 
	•	Build Num#: 
		o	20.07.0601 
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/BuildNum%2320.07.0601 
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/5728
	•	Notes: 
		o	Bug fixes 
				Task 5674 - /NoSetRes failing with JSON input
				Task 5673 – Aliases failed to load in Parallel Runspaces
				Task 5319 – Create and manage reporting on the remote system – PS2
				Task 5318 – Create and manage reporting on the remote system – PS3
           
# Updates #
	•	Get-BluGenieTrapData will report back any captured BluGenie trap logs.  Functions as follows
		o	List - Display a list of all the Blugenie Logs captured on the remote machine
		o	Path - Specificy a path to query for Blugenie Logs (By defautl this is %SystemDrive%\Windows\Temp)
		o	FileName - Specifically select which file you want to report on (By default the last file created is picked).  The file name can be picked using RegEx.
		o	JobID - Specify which file you want to remote on using the Job ID (Be default this is the last log created with the Job ID specified.  You can have more then one log with the same Job ID)
		o	Remove - Remove a Specific log file
		o	RemoveAll - Remove BluGenie log files including the Debugging Log files
		o	Overwrite - Return the current JSON Job data to look just like the Trapped Log data for easier reporting and parsing
		
*** Check the Azure Work Item for more notes ***

Posted Build#20.11.0201
	•	Posted Date: 
		o	11/15/2020 
	•	Build Num#: 
		o	20.11.0201
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2320.11.1301
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_backlogs/backlog/BluSapphire3.5%20Team/Features/
	•	High Level Notes: 
		o	GetChildItem update to bypass junction points adn a faster search filter
		o	GUI added (60%) complete
		
# Updates #
	• [Michael Arroyo] - [psd1] - Moved the Module Help information to this script.  This will no longer be captured in the BluGenie.ps1
	• [Michael Arroyo] - [Core Module] - Added a GUI to BluGenie.  To start the GUI, type one of the following commands
					~ Show-BluGenieGUI
					~ Show-GUI
					~ GUI
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated the search function for older systems from /a-o-l to /a-l based on older systems not having the parameter /a-o
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added a Recursive method to detect Junction points.  This stops endless loops when detecting Junctions Point.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated function to the newest Function Template (20.05.2201) 
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Consolidation of over 500 lines of code.  
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Update to the Permissions method.  Permissions were not grabbing the array of permission, which is now being captured.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated the FilterType list to 'Path','PathIncludeAll','Name','NameIncludeAll','Type','TypeIncludeAll','Hash','HashIncludeAll','ADS','ADSIncludeAll'
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added a new search Algorithm to each FilterTyper
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated the Permissions method to remove extra spaces at the end of the strings.  This was causing the return to be on multiple lines.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated the ShowStreamContent method to remove extra spaces at the end of the strings.  This was causing the return to be on multiple lines.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Set the $SearchPath default value to the scripts current running location.
	• [Michael Arroyo] - [Get-BluGenieSystemInfo] - Removed [Tab]s' from the help section and replaced them with spaces.		 
	• [Michael Arroyo] - [Get-BluGenieTrapData] - 	Get-BluGenieTrapData will report back any captured BluGenie trap logs.  Functions as follows
					* List - Display a list of all the Blugenie Logs captured on the remote machine
					* Path - Specificy a path to query for Blugenie Logs (By defautl this is %SystemDrive%\Windows\Temp)
					* FileName - Specifically select which file you want to report on (By default the last file created is picked).  The file name can be picked using RegEx.
					* JobID - Specify which file you want to remote on using the Job ID (Be default this is the last log created with the Job ID specified.  You can have more then one log with the same Job ID)
					* Remove - Remove a Specific log file
					* RemoveAll - Remove BluGenie log files including the Debugging Log files
					* Overwrite - Return the current JSON Job data to look just like the Trapped Log data for easier reporting and parsing	
	• [Michael Arroyo] - [Get-BluGenieSettings] - Updated the Console Debug variable to capture the information correctly.
	• [Michael Arroyo] - [Edit-BluGenieJSON] - Updated the BGNoSetRes process to also disable the Console updates if enabled.
	• [Michael Arroyo] - [Get-BluGenieCurrentSessionAliases] - Get-BluGenieCurrentSessionAliases will display the current powershell sessions alias list
	• [Michael Arroyo] - [Get-BluGenieRunSpaceSessionAliases] - Get-BluGenieRunSpaceSessionAliases will display, the default powershell sessions Alias list
	• [Michael Arroyo] - [Get-BluGenieSessionAliasList] - Get-BluGenieSessionAliasList will display, remove, and export all user defined Aliases for the current powershell session
	• [Michael Arroyo] - [Invoke-BluGenieProcess] - Updated the detection method for BGDebugger
	• [Michael Arroyo] -  [Invoke-BluGenieWalkThrough] - Removed the Alias [Invoke-WalkThrough] and copied this script over to a Function Script called [Invoke-Walkthrough].  Other scripts are looking for a function
					named [Invoke-Walkthrough], not an Alias.
	• [Michael Arroyo] - [Invoke-BluGenieWalkThrough] - Removed the Alias [Invoke-WalkThrough] and copied this script over to a Function Script called [Invoke-Walkthrough].  Other scripts are looking for a function
					named [Invoke-Walkthrough], not an Alias.
	• [Michael Arroyo] - [Set-BluGenieDebugger] - Updated the detection method for BGDebugger
	• [Michael Arroyo] - [Show-BluGenieGUI] - This is the new function to Enable the Graphical Interface
	• [Michael Arroyo] - [Start-BluGenieRunSpace] - Added Alias injection into the new Runspace.  This will fix any issues while calling the old
					Blugenie commands as well as providing a clone of the parent PowerShell Env.
		
*** Check the Azure Work Item for more notes ***


Posted Build#20.11.1601
	•	Posted Date: 
		o	11/23/2020 
	•	Build Num#: 
		o	20.11.1601
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/BuiildNum%2320.11.1601-
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4007 
	•	High Level Notes: 
		o	Updated the BluGenie.exe Core to grab Windows PID and Handle information
		o	Added the AutoIt Module - This will help in Interactive Automation
		o	GUI Update
		o	Get-BluGeniChildItemList fix to support ES
		o	Added new functions
				Set-BluGenieSessionInfo (Read Command Help for more information)
				New-BluGenieSessionInfo (Read Command Help for more information)
		
# Updates #
	• [Michael Arroyo] - [BluGenie Exe] Captured the first launch PID into a new Environment variable $Env:BgPid
	• [Michael Arroyo] - [BluGenie Exe] Updated the Library version to pull the version number of the BluGenie Framework instead of the BluGenie.exe.
	• [Michael Arroyo] - [BluGenie Exe] Captured the PID for the Controlling Windows Frame of BluGenie into a new Environment variable $env:BgWinPid
	• [Michael Arroyo] - [BluGenie Exe] Captured the Windows Framework Handle into a new Environment variable $env:BgWinHandle
	• [Michael Arroyo] - [Folder Structrue] Added .\Blubin\Help > to house all the new MarkDown help files
	• [Michael Arroyo] - [MarkDown Help] Created Markdown help (Get-BluGenieSystemInfo.md) for function Get-BluGenieSystemInfo
	• [Michael Arroyo] - [Module Update] Added support for the AutoItX (AutoIt) Module 
	• [Michael Arroyo] - [GUI] The Graphical interface can now be detached (ran as a seperate process from the BluGenie Console) using the command (Show-BluGenieGUI -Detach)
	• [Michael Arroyo] - [GUI] Added the PID and Handle information for all BluGenie processes in the Administration > Console tab
	• [Michael Arroyo] - [GUI] While using the -Detach parameter when running the GUI if you send commands to the Console it will now send those commands directly to the BluGenie Console.
	• [Michael Arroyo] - [GUI] Fixed the hidden errors on load issue
	• [Michael Arroyo] - [GUI] Fixed error trapping (Use -Detach) for better error control. Note:  This is with or without (Send Console commands to the BluGenie Console) being checked in the Administration\Console Tab
	• [Michael Arroyo] - [GUI] Update the returning data to have a cleaner format
	• [Michael Arroyo] - [GUI] Updated the Console > Clear Error's button to run $Error.Clear() either in the current GUI session or to send that command to the BluGenie Console.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added FullName property value back for Elastic Search specific searches
    • [Michael Arroyo] - [Get-BluGeniChildItemList] Renamed the { Found } key value back to FoundItems for Elastic Search specific searches
	• [Michael Arroyo] - [Invoke-WalkThrough] Updated the function name in the script from Invoke-BluGenieWalkThrough to Invoke-WalkThrough for older function support
	• [Michael Arroyo] - [Set-BluGenieSessionInfo] Added a new Function called ( Set-BluGenieSessionInfo ) that will set a Current Session Environment varialbe to be passed to each new PSSession Runspace automatically
	• [Michael Arroyo] - [New-BluGenieSessionInfo] Added a new Function called ( New-BluGenieSessionInfo ) that will query a Current Session Environment varialbe and build Posh variables back into new PSSession Runspaces
	• [Michael Arroyo] - [Show-BluGenieGUI] Added the Detach parameter.  This param will run the GUI as a separate process allowing to still interacte with the BluGenie Console.
	• [Michael Arroyo] - [BluGenie.psm1] Removed the Invoke-WalkThrough alias.  As it was converted back to a separate function for older commands calls
	• [Michael Arroyo] - [BluGenie.psm1] Added Alias Set-SessionInfo
	• [Michael Arroyo] - [BluGenie.psm1] Added Alias New-SessionInfo
	
		
*** Check the Azure Work Item for more notes ***


Posted Build#20.11.2301
	•	Posted Date: 
		o	11/23/2020 
	•	Build Num#: 
		o	20.11.2301
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2320.11.2301
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4007
	•	High Level Notes: 
		o	Updated the BluGenie.exe Core to function without WinRM or a valid IP address when running a job against the (localhost)
		
# Updates #
	• [Michael Arroyo] - [BluGenie Exe] Updated the Job execution process to run on the local host by using the name (localhost) in the systems list
	• [Michael Arroyo] - [BluGenie Exe] If LocalHost is used in the systems list, WinRM can be disabled (Only for the localhost)
	• [Michael Arroyo] - [BluGenie Exe] If LocalHost is used in the systems list, WinRM, the Service, and the WinRM Configuration will not be parsed or updated (Only for the localhost)
	• [Michael Arroyo] - [BluGenie Exe] If LocalHost is used in the systems list, the IP info can be (169.* or 127.*) (Only for the localhost)
	• [Michael Arroyo] - [BluGenie Exe] If LocalHost is used in the systems list, Modules will not be copied or reloaded (Only for the localhost)
	• [Michael Arroyo] - [BluGenie Exe] If LocalHost is used in the systems list, the Returned JSON is named (LocalHost.JSON) (Only for the localhost)
	
		
*** Check the Azure Work Item for more notes ***



Posted Build#20.11.2302
	•	Posted Date: 
		o	12/14/2020 
	•	Build Num#: 
		o	20.11.2302
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2320.11.2302
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_backlogs/backlog/BluSapphire3.5%20Team/Features/
	•	High Level Notes: 
		o	
		
# Updates #
	• [Michael Arroyo] - [BluGenie.exe (Core)] Removed the dependency scanner to load all dependency modules on launch.  This happens in the Module itself now
	• [Michael Arroyo] - [BluGenie.exe (Core)] Removed the Allowed Commands section.  This code is no longer needed.  BG now runs all Posh commands
	• [Michael Arroyo] - [BluGenie.exe (Core)] Lib information is now posted in BG as the Module version and not the Compiled EXE version
	• [Michael Arroyo] - [BluGenie Module] Module directory consists of Core Commands and Dependency Commands. This helps with running the module without BluGenie.exe
	• [Michael Arroyo] - [BluGenie Module] Loaded Modules, Variables, and Functions are now tracked in a variable called $BluGenieInfo
	• [Michael Arroyo] - [BluGenie Module] Updated the Posh 2.0 Alias information to have the new commands
	• [Michael Arroyo] - [BluGenie Module] Added the Posh 3 and up Alias information to allow for Commands to use BG instead of BluGenie in the command name.
							Example: Get-BGChildItemList
	• [Michael Arroyo] - [BluGenie Module] Added a process to dynamically Export Aliases from the Module to the Current PS Session
	• [Michael Arroyo] - [BluGenie Module] Added support module dependencies for all versions of Posh.  2.0, 3.0, 4.0, 5.0, 5.1, 6.0, 6.2, 7.0, 7.1
	• [Michael Arroyo] - [BluGenie Module] 3rd Party Modules added
							* AutoItX - For GUI Control and Windows Automation
							* PSnmap - NMap for Posh (Added but no BluGenie defined functions added
							* PSSQLite - Added and Tested but no BluGenie defined functions added
							* powershell-yaml - Used for file caching / and much cleaner output
	• [Michael Arroyo] - [BluGenie Module] New function added (Get-BluGenieFileADS).  Query for a files Alternate Data Stream Names.
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Get-BluGenieFilePermissions).  Query file(s) for NTFS Permissions.
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Get-BluGenieFileStreams).  Query file(s) for NTFS ADS Content
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Invoke-BluGenieThreadLock).  Create a named Mutex
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Remove-BluGenieFile).  Remove file
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Test-BluGenieIsFileLocked).  Test to see if a file locked by another process
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Test-BluGenieIsMutexAvailable).  Wait, up to a timeout value, to check if current thread is able to 
							acquire an exclusive lock on a system mutex.
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Clear-BlugenieMemory).  Garbage Collection in PowerShell to Speed up Scripts and help lower memory consumption
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [BluGenie Module] New function added (Convert-BluGenieSize).  Convert a value from Bytes, KB, MB, GB, TB to [TB/GB/MB/KB/Bytes]
							Note:  This function used the new template which uses the new parameters (UseCache, RemoveCache, CachePath, 
							ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Fixed ParameterSetResults, which now shows a valid output instead of a PowerShell Object reference
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added new parameters (UseCache, RemoveCache, CachePath, ClearGarbageCollecting, OutYaml, and FormatView)
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Updated Help and Example Information to details the new parameters
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support for (Clean-BluGenieMemory).  This will clean up any garbage collecting done by PowerShell
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support to save found artifacts to disk instead of memory using the -UseCache parameter
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support to change the Cache Path.  The default path is %WinDir%\Temp.
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support to remove cached data using the -RemoveCache parameter.  By default this is disabled.
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support to Output the detailed return data to Yaml
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added support to FormatView to change the Objects returned while using -Returnobject to a Yaml format
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added CachePath information to the Detailed report
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added a Dynamic parameter update process to change set parameters if a version of Posh 2 is installed.
							Currently Caching is not supported in Posh2.
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Updated the Sub function (Recurse) to a valid (Verb-Noun) function name called Start-Recurse
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Added a Remove property to the Return data Object / Information
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (Permission Info) to an External function called Get-BluGenieFilePermissions
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (ADS Info) to an External function called Get-BluGenieFileADS
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (Stream Info) to an External function called Get-BluGenieFileStreams
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (Remove File) to an External function called Remove-BluGenieFile
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (Permission) to an External function called Get-BluGenieFilePermissions
	• [Michael Arroyo] - [Get-BluGenieChildItemList] Moved the Sub Process (Permission) to an External function called Get-BluGenieFilePermissions
	• [Michael Arroyo] - [Get-BluGenieHashInfo] Changed the validation set for Algorithm from using (Double Quotes) to (Single Quotes)
	• [Michael Arroyo] - [Get-BluGenieHashInfo] Updated the ParameterSetResutls Hash table to have the value defined as an Array before the value is posted
	• [Michael Arroyo] - [Get-BluGenieHashInfo] Updated the Get-LiteralPath command to Get-BluGenieLiteralPath
	• [Michael Arroyo] - [Get-BluGenieHashInfo] Added a check to see if the file is locked prior to Generating the Hash value.  Added a Return if the file is
							locked instead of returning nothing like prior versions.
	• [Michael Arroyo] - [Get-BluGenieLockingProcess] Changed the validation set for Algorithm from using (Double Quotes) to (Single Quotes)
	• [Michael Arroyo] - [Get-BluGenieLockingProcess] Added the FormatView parameter including the new FormatView Output process
	• [Michael Arroyo] - [Get-BluGenieLockingProcess] Added the current local path to the Tool Search path process to find Handle.exe in the current path
	• [Michael Arroyo] - [Get-BluGenieLockingProcess] Updated the Get-Item call to the .NET call [System.IO.File] to better manage the file information process
	• [Michael Arroyo] - [Get-BluGenieSignature] Changed the validation set for Algorithm from using (Double Quotes) to (Single Quotes)
	
		
*** Check the Azure Work Item for more notes ***



Posted Build#20.12.1401
	•	Posted Date: 
		o	12/18/2020 
	•	Build Num#: 
		o	20.12.1401
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2320.12.1401
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_backlogs/backlog/BluSapphire3.5%20Team/Features/
	•	High Level Notes: 
		o	Bug Fix: Corrupt JSON return.  Return JSON was being rebuilt with an invalid string.
		o	Bug Fix: Core (EXE) files were getting copied every time a job ran
		o	Bug Fix: Sub Function Build-Command was missing.  
		o	Bug Fix: Progress bars for file copies were overwhelming the display causing high memory utilization when sending Modules and Core (EXE) files to a high number of systems.
		o	Added Feature: Yara support added for both x86 and x64.  Supported in Posh 2.0 and up.
								Yara Rules are posted to the Module directory under .\Tools\Blubin\Modules\BluGenie\Configs\YaraRules\ to be copied with the Modules on Job Load
		
# Updates #
	• [Michael Arroyo] - [BluGenie.exe (Core)] Added support to only overwrite core (EXE) files being copied to the remote machine if the $BGUpdateMods = $true  (This speeds up new job tasks)
	• [Michael Arroyo] - [Config.JSON] Now supports AutoRunSC (x86 and x64),  SigCheck (x86 and x64), Handle (x86 and x64), and Yara (x86 and x64)
	• [Michael Arroyo] - [BluGenie Module] Added Alias information to Support the new Yara function.  Yara, Invoke-BGYara call Invoke-BluGenieYara
	• [Michael Arroyo] - [BluGenie Module] Added the old Alias Build-Command back which calls New-BluGenieCommand
	• [Michael Arroyo] - [BluGenie Module] Removed Function ConvertTo-BluGenieJson.  This function was causing issues with JSON reporting.  It was build for Posh 2 but is no longer needed
	• [Michael Arroyo] - [BluGenie Module] Removed Alias ConvertTo-BGJson.  This Alias was causing issues with JSON reporting.  It was build for Posh 2 but is no longer needed
	• [Michael Arroyo] - [BluGenie Module] Removed Alias ConvertTo-JSON.  This Alias was causing issues with JSON reporting.  It was build for Posh 2 but is no longer needed
	• [Michael Arroyo] - [BluGenie Module] Removed the Version identifier from the Dependency module PsNmap.  Version identifiers do not work in Posh 2.  
	• [Michael Arroyo] - [Send-BluGenieItem] Bug Fix - When copying a file even if the file is there but the force switch is not set, the file will be updated.  The change is if you 
							set the Destination as the full path including the file name a pre-check will validate if the file already exists.  This bug was only when running Copy-Item 
							over WinRM / ToSession.
	• [Michael Arroyo] - [Send-BluGenieItem] Added a new parameter ( ShowProgress ).  This is to manage the Progress Bar Display.  In powershell by defauult this is always enabled.  
							Now you can choose to show the progress bar or by default for this function the progress bar will be disabled and disabled for all calling functions.
	• [Michael Arroyo] - [Invoke-BluGenieYara] New function created.  Invoke-BluGenieYara is a wrapper around the YARA tool.  The Yara tools is designed to help malware researchers identify
							and	classify malware samples. It’s been called the pattern-matching Swiss Army knife for security researchers (and everyone else). Read the function help for more
							information.
	
		
*** Check the Azure Work Item for more notes ***

Posted Build#21.01.0401
	•	Posted Date: 
		o	01/17/2021 
	•	Build Num#: 
		o	21.01.0401
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.01.0401
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_backlogs/backlog/BluSapphire3.5%20Team/Features/
	•	High Level Notes: 
		o	Bug Fix: Get-BGChildItemList help is not working
		o	Added Feature: SQL Database functionality to Get-BGChildItemList
		o	Added support for PSScriptAnalyzerSettings.psd1 which uses VSCode and PSScriptAnalyzer as the Linter to manage the entire project.
		
# Updates #
	• [Michael Arroyo] - [BluGenie Module] 			Added a new configuration folder called (SQL) to the path .\Tools\Blubin\Modules\BluGenie\Configs that manages SQL Query scripts
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added SQLite functionality
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added new parameters (DBName, DBPath, UpdateDB, and ForceDBUpdate).
														Please read the parameter help section for more information 
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Fixed the Help information region. Moved the ( Build Version Details ) from main help.
														There is a Char limit and PSHelp could not read all the information correctly which also created
														issues using the ( WalkThrough ) parameter as well.
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Updated this function / script based on the new Linter ( PSScriptAnalyzerSettings )
	• [Michael Arroyo] - [Get-BluGeniChildItemList] Added Alias 'Get-BGChildItemList' directly to the Function
	• [Michael Arroyo] - [Get-BluGeniHashInfo] 		Fixed false return when a file was set to Read-Only.  Now the hash information is captured correctly
	• [Michael Arroyo] - [Get-BluGeniHashInfo] 		Fixed the Help information region. Moved the ( Build Version Details ) from main help.
														There is a Char limit and PSHelp could not read all the information correctly which also created
														issues using the ( WalkThrough ) parameter as well.
	• [Michael Arroyo] - [Get-BluGeniHashInfo] 		Updated this function / script based on the new Linter ( PSScriptAnalyzerSettings )
	• [Michael Arroyo] - [Get-BluGeniHashInfo] 		Added Alias 'Get-BGHashInfo' directly to the Function
	• [Michael Arroyo] - [Invoke-BluGenieSQLLQuery] Invoke-BluGenieSQLLQuery is a shim function to ( Invoke-SqliteQuery ) which helps manage SQL queries and gives us a correctly
														formatted return for BluGenie reporting
	• [Michael Arroyo] - [BluGenie Module Manifest] Added Aliases ( 'Invoke-SQLLQuery', 'Invoke-BGSQLLQuery', 'SQLLQ' ) to the Alias list
	• [Michael Arroyo] - [BluGenie Module Manifest] Updated this function / script based on the new Linter ( PSScriptAnalyzerSettings )
	
	
		
*** Check the Azure Work Item for more notes ***

Posted Build#21.01.0402
	•	Posted Date: 
		o	02/09/2021 
	•	Build Num#: 
		o	21.01.0402
	•	Engine Type: 
		o	PowerShell 3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.01.0402
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/4007
	•	High Level Notes: 
		o	New BluGenie (Windows Service)

		
# Updates #
	• [Michael Arroyo] - [BluGenie Module]	Set new Alias in the Module for 
		* Name 'Get-BGServiceStatus' Value 'Get-BluGenieServiceStatus'
		* Name 'New-BGService' Value 'New-BluGenieService'
		* Name 'Remove-BGService' Value 'Remove-BluGenieService'
		* Name 'Stop-BGService' Value 'Stop-BluGenieService'
	• [Michael Arroyo] - [BluGenie Core Exe]  Build Version Details "Moved from main help.  
			There is a Char limit and PSHelp could not read all the information correctly":
		* Added support for ServiceJob
		* Added CLI Parameter for ServiceJob
		* Added new variable $BGServiceJobFile which captures all of the BluGenie Settings and saves it as a 
			Job file for the BluGenie Service to use on the remote system
		* Updated the LocalIP call on the remote system to action with WMI.  The new process looks for IP V4 Addresses
			that have a valid GateWay assigned as well.  This helps resolve the 169 address lookup.
		* JSONReturn has been cleaned up.  No difference to Output.
		* Updated the /Debug action to Output debugging information on the remote machine.
			* All Arguments sent to the machine are capture to a single log file called %SystemDrive%\Windows\Temp\BluGenieArgs.txt
			* All Tools Configuration sent to the machine are capture to a single log file called %SystemDrive%\Windows\Temp\BluGenieToolsConfig.txt
		* Process BG Settings as a Service Job if the setting is set to True.  The option can be set with the Console or the CLI
			If the machine is Not PowerShell 3 or above and the Service is not running, the normal query job will take place.
	• [Michael Arroyo] - [Get-BluGenieServiceStatus]	Report on the Status of the BluGenie Windows Service
		Report includes 
		* Jobs that are currently waiting to run
		* Processing Jobs
		* Completed Jobs
		* Completed JSON reports
		* Service State
		* Service CPU Resources
		* Service Memory Resources
		* BluGenie Service Event Viewer Logs
	• [Michael Arroyo] - [Get-BluGenieSettings]	Added support for the ( ServiceJob ) parameter
	• [Michael Arroyo] - [New-BluGenieService]	Create a New Windows Service called BluGenie
		Service binary resides in the Module Directory

		Once started 3 directories will be created.
			~ .\Logs
			~ .\Jobs
			~ .\Processing

		Log Information
			~ All verbose logging is captured to the Windows Event Log under the Application Log.
			~ The source is named ( BGService )

		Polling Period and Performance
			~ Polling period is set to 60 seconds.  A scan for a BluGenie JSON Job file will be queried in the 
			.\Jobs directory.  Once found the actions are processed
	• [Michael Arroyo] - [Remove-BluGenieService]	Remove the Windows Service called BluGenie
	• [Michael Arroyo] - [Stop-BluGenieService]	Stop the Windows Service called BluGenie
		This is not a permenant stop.  This is until the next restart.  If you want to stop the service even after 
		a system restart you should remove the BGServcie with Remove-BGService.	
	• [Michael Arroyo] - [Edit-BluGenieJSON]	Added support for the ( ServiceJob ) parameter
	• [Michael Arroyo] - [Invoke-BluGenieProcess]	Added support for the ( ServiceJob ) parameter
	• [Michael Arroyo] - [Invoke-BluGenieWipe]	Added support for the ( ServiceJob ) parameter
	• [Michael Arroyo] - [Invoke-BluGenieYara]	Updated the JSON call to no longer use ConvertTo-BluGenieJson and to use the normal ConvertTo-Json
	
		
*** Check the Azure Work Item for more notes ***

Posted Build#21.02.0901
	•	Posted Date: 
		o	02/14/2021 
	•	Build Num#: 
		o	21.02.0901
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.02.0901
	•	 Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7050
	•	High Level Notes: 
		o	Get-BluGenieProcessList has been updated to support Caching and SQLite DB
		o	Get-BluGenieServiceList has been updated to support Caching and SQLite DB

		
# Updates #
	• [Michael Arroyo] - [Get-BluGenieChildItemList]
		o Updated mispelling of Variable ( TalbeColumns -> TableColumns )
		o Updated mispelling of DB Column Type ( INTERGER -> INTEGER )
	• [Michael Arroyo] - [PSScriptAnalyzerSettings.psd1]
		o 
	• [Michael Arroyo] - [Get-BluGenieProcessList]
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added supoort for SQLite DB
		o [Michael Arroyo] Updated Process Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added supprt for the -Verbose parameter.  The query return will no longer shows extended debugging info
							unless you manually set the -Verbose parameter.
	• [Michael Arroyo] - [Get-BluGenieServiceList]
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added supoort for SQLite DB
		o [Michael Arroyo] Updated Service Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added supprt for the -Verbose parameter.  The query return will no longer shows extended debugging info
							unless you manually set the -Verbose parameter.
		
*** Check the Azure Work Item for more notes ***

Posted Build#21.02.1501
	•	Posted Date: 
		o	02/23/2021 
	•	Build Num#: 
		o	21.02.1501
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.02.1501
	•	Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7110/?workitem=7110
	•	High Level Notes: 
		o	BluGenie.exe is now a Stub file.  It has no code but to execute the BluGenie.ps1.
				The BluGenie.exe is an entirely new project called (Stub).  The term Stub is from an auto execution process used for MSI packaging to control when new profiles or new application get installed to other user profiles on a machine.  This Stub.exe can run any PowerShell script with the same name in the same directory.  It can completely bypass normal PowerShell security all without having to compile the Exe over again when changes are needed.  
		o	Ported over several commands to support Caching, YAML, and SQLite.

			
# Updates #
	•	[Michael Arroyo] - [BluGenie.ps1]
		o	Core structure change to support the new executable
		o	Removed the (New-MemoryMappedFile) Function as it’s no longer used
		o	Removed the (Open-MemoryMappedFile) Function as it’s no longer used
		o	Removed the (Out-MemoryMappedFile) Function as it’s no longer used
		o	Removed the (Read-MemoryMappedFile) Function as it’s no longer used
		o	Removed the (Remove-MemoryMappedFile) Function as it’s no longer used
		o	Updated the Bound Parameters to use the $Env:Stub* variables.  The Stub variables are created at runtime for the Stub.exe -> BluGenie.exe for the current session only.
		o	Moved all the Sub Processes out of the $Setup script block so they run during the BluGenie.exe launch.  They no longer need to be processes as a script block in a new PowerShell session.
		o	Update the parameter /NoExit -> /BGNoExit so to not conflict with the Stub.exe –Blugenie.exe /NoExit.
		o	Removed region 001BluGenie Env Variable which sets all the Memory mapping in PowerShell’s new session.
		o	Removed the New PowerShell session creation in the Start Core Engine region.  This is managed by Stub.exe -> Blugenie.exe now.
		o	As BluGenie is no longer stored in memory to pass from session to session on the host.  Updating the BluGenie.exe no longer needs a system restart.
		o	Roughly downsized the BluGenie.ps1 by 500 lines of code with this update.
		o	If BluGenie.ps1 needs to be updated, you no longer have to compile to BluGenie.exe which speeds up development.
	•	[Michael Arroyo] - [BluGenie Core]
		o	Updated the Config.JSON to support and copy the new file (vcruntime140.dll) needed to support Yara*.exe to remote nodes
		o	Added the file (vcruntime140.dll) to the (.\Tools\Blubin\Yara) directory to be copied over to the remote nodes to support Yara*
	•	[Michael Arroyo] - [Get-BluGenieSystemInfo]
		o	Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o	Moved Build Notes out of General Posh Help section
		o	Added support for Caching
		o	Added support for Clearing Garbage collecting
		o	Added support for SQLite DB
		o	Updated Process Query and Filtering
		o	Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info unless you manually set the -Verbose parameter.
		o	Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
	•	[Michael Arroyo] - [Get-BluGenieServiceList]
		o	Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
	•	[Michael Arroyo] - [Get-BluGenieSchTaskInfo]
		o	Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o	Moved Build Notes out of General Posh Help section
		o	Added support for Caching
		o	Added support for Clearing Garbage collecting
		o	Added support for SQLite DB
		o	Updated Process Query and Filtering
		o	Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info unless you manually set the -Verbose parameter.
		o	Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
	•	[Michael Arroyo] - [Get-BluGenieProcessList]
		o	Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o	Moved Build Notes out of General Posh Help section
		o	Added support for Caching
		o	Added support for Clearing Garbage collecting
		o	Added support for SQLite DB
		o	Updated Process Query and Filtering
		o	Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info unless you manually set the -Verbose parameter.
		o	Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
	•	[Michael Arroyo] - [Get-BluGenieChildItemList]
		o	Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
			
*** Check the Azure Work Item for more notes ***

Posted Build#21.02.2201
	•	Posted Date: 
		o	03/04/2021 
	•	Build Num#: 
		o	21.02.2201
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.02.2201
	•	Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7178
	•	High Level Notes: 
		o	General Updates to Get Commands

			
# Updates #
	• [BluGenie.psd1]
		o [Michael Arroyo] Updated the Code to the '145' column width standard
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
	• [PSScriptAnalyzerSettings.psd1]
		o [Michael Arroyo] Fixed ExcludeRules item 'PSAlignAssignmentStatement'
		o [Michael Arroyo] Fixed ExcludeRules item 'PSPossibleIncorrectComparisonWithNull',
		o [Michael Arroyo] Added ExcludeRules item 'PSUseApprovedVerbs'
	• [Get-BluGenieAuditProcessTracking]
		o [Michael Arroyo] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
		o [Michael Arroyo] Updated the Hash Information to follow the new function standards
		o [Michael Arroyo] Updated the function to the new function tempatle
		o [Michael Arroyo] Added more detailed information to the Return data
		o [Michael Arroyo] Updated the Code to the '145' column width standard
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added support for SQLite DB
		o [Michael Arroyo] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
							unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
	• [Get-BluGenieChildItemList]
		o [Michael Arroyo] Fixed bug with -NewDBTable not dropping the original DB and creating a new one.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Fixed the -RemoveCache switch so now the Cache file gets removed if selected.
	• [Get-BluGenieFirewallRules]
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Ravi Vinod Dubey] Added support for Caching
		o [Ravi Vinod Dubey] Added support for Clearing Garbage collecting
		o [Ravi Vinod Dubey] Added support for SQLite DB
		o [Ravi Vinod Dubey] Updated Process Query and Filtering
		o [Ravi Vinod Dubey] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
	• [Get-BluGenieProcessList]
		o [Michael Arroyo] Fixed bug with -NewDBTable not dropping the original DB and creating a new one.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Fixed the -RemoveCache switch so now the Cache file gets removed if selected.
	• [Get-BluGenieRegistryProcessTracking]
		o [Michael Arroyo] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
		o [Michael Arroyo] Updated the Hash Information to follow the new function standards
		o [Michael Arroyo] Updated the function to the new function tempatle
		o [Michael Arroyo] Added more detailed information to the Return data
		o [Michael Arroyo] Updated the Code to the '145' column width standard
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added supoort for SQLite DB
		o [Michael Arroyo] Updated Service Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added supprt for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the PrefetchService name now called (SysMain) on Windows 10 Build 1809 and later.
		o [Michael Arroyo] Updated the registry call to grab (EnablePrefetcher) on some newer Windows Builds to detminer the
			Prefect statues
		o [Michael Arroyo] Rebuilt Object reference to support Caching and DB injection
	• [Get-BluGenieSchTaskInfo]
		o [Michael Arroyo] Fixed bug with -NewDBTable not dropping the original DB and creating a new one.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Fixed the -RemoveCache switch so now the Cache file gets removed if selected.
	• [Get-BluGenieServiceList]
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Fixed the -RemoveCache switch so now the Cache file gets removed if selected.
		o [Michael Arroyo] Updated the Dependencies section in the Help region with the correct syntax
	• [Get-BluGenieSystemInfo]
		o [Michael Arroyo] Fixed bug with -NewDBTable not dropping the original DB and creating a new one.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Fixed the -RemoveCache switch so now the Cache file gets removed if selected.
	• [Get-BluGenieWindowsUpdates]
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added supoort for SQLite DB
		o [Michael Arroyo] Updated Service Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added supprt for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
			
*** Check the Azure Work Item for more notes ***

Posted Build#21.03.0401
	•	Posted Date: 
		o	03/05/2021 
	•	Build Num#: 
		o	21.03.0401
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.03.0401
	•	Azure Work Item: 
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7183
	•	High Level Notes: 
		o	General Updates to Get Commands

			
# Updates #
	• [Invoke-BluGenieYara]
		o [Michael Arroyo] Updated the function to the new function template
		o [Michael Arroyo] Added more detailed information to the Return data
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added support for SQLite DB
		o [Michael Arroyo] Updated Service Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Tools path updated with $('{0}\Tools\Yara\{1}' -f $(Get-Location | Select-Object -ExpandProperty Path), $Yara)
		o [Michael Arroyo] Updated the CommandlineOptions switch process to pull from the parameters directly instead of the
			PSBoundParameters. This is cleaner and also allows you to test in real time.  The old way using PSBoundParameters
			is only valid at runtime or debug mode.
	
			
*** Check the Azure Work Item for more notes ***

Posted Build#21.03.0801
	•	Posted Date: 
		o	03/29/2021
	•	Build Num#: 
		o	21.03.0801
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.03.0801
	•	Azure Work Item:
		o	
	•	High Level Notes: 
		o	Decouple dependent files and folders to any locked files and folders do not corrupt the BluGenie remote installation or updates
			
# Updates #
	•	[BluGenie Core]
		o	[Michael Arroyo] Tools directory moved from the Root of BluGenie.exe to .\BluBin\Modules\Tools.  This is to extent the support of copying files to a remote system
			1) By copying files 1 by 1 so if a file or directory is locked on the remote side it will not stop other files or directories from getting copied.
			2) Allow Tools to be used and copied while using just the Module and not just the BluGenie.exe 
	•	[Config.JSON]
		o	[Michael Arroyo] Removed Drop Bucket Configuration.  There are 2 Static directories (Completed / InProgress) 
		o	[Michael Arroyo] Added a new section called SysinternalsSuite.  This is to manage what SysInternal Tools you want to keep once the Tools have been downloaded from Microsoft.
		o	[Michael Arroyo] Added a new section called ExcludedCopyFiles.  This is to manage what files under .\BluBin get copied to the remote system.  This section is also managed using RegEx.  
	•	[BluGenie.psm1]
		o	[Michael Arroyo] Moved the Transcript Start Logging to variable $BluGenieInfo.ScriptSettings.Log.  This change was necessary because of how the Module is now ran as an external or secondary process
		o	[Michael Arroyo] Moved Global Module Variables and Project Information from the core exe to the .psm1
		o	[Michael Arroyo] Set up a dynamic method to detect the module running in the ISE/Console and BluGenie’s Console
		o	[Michael Arroyo] Set up a new method to edit and update the ToolsConfig properties in both the Module and the BG Exe.
		o	[Michael Arroyo] SysInternal Tools, SysMon, WinLogBeat, etc are now detected from the .\Blubin\Tools directory from inside the module
		o	[Michael Arroyo] Removed $BGRemoveMods variable.  This is now managed by a new function
		o	[Michael Arroyo] Moved the entire Remote Script Block execution into the Module.  This is no longer being managed by the BluGenie.exe.  This now gives you full access to run even remote deployments and jobs via the ISE or the normal PowerShell Console.
		o	[Michael Arroyo] Added new Alias Remove-BGModule for Remove-BluGenieModule
		o	[Michael Arroyo] Added the missing region footer to the (Update Function List with 3rd party Module Functions) region
		o	[Michael Arroyo] Removed the Remote Script Block (Remove Mods) section of code.  
	•	[BluGenie.psd1]
		o	[Michael Arroyo] Updated the Build reference
		o	[Michael Arroyo] Cleaned up the Build Notes to fit to the 145 column line limit 
	•	[Get-BluGenieSettings]
		o	 [Michael Arroyo] Removed the flag for RemoveMods 
	•	[Send-BluGenieItem]
		o	[Michael Arroyo] Modified the Build Notes to the new standard
		o	[Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o	[Michael Arroyo] Updated the WalkThrough Function to the latest version
		o	[Michael Arroyo] Updated parameter Source to allow multiple sources to be copied to a single system at once without using a Directory or Container as the parent copy item
		o	[Michael Arroyo] Added a new parameter called RelativePath.  This string will help remove the current source path and replace it with the new Destination path while keeping the entire directory tree intact.
		o	[Michael Arroyo] Updated all the parameters to no longer have a position parameter path.  This is no longer needed.  Meaning the Parameters had to be in a specific order if no named parameter was set.  
		o	[Michael Arroyo] Added Clean Garbage to the overall process to help clean up memory after the function runs.
		o	[Michael Arroyo] Added Parameter OutYaml to return a Yaml specific output
		o	[Michael Arroyo] Added Parameter FormatView to give a bigger selection of output formats
		o	[Michael Arroyo] Added a new HashReturn property called Command.  This property will show each command line ran to copy a file to the remote machine.
		o	[Michael Arroyo] Added a new HashReturn property called Process.  This property will show which file(s) have been copied to the remote machine
		o	[Michael Arroyo] Added the Standard Functions Dynamic parameter update region
		o	[Michael Arroyo] Updated the core process to run a ForEach on the Source list.  If copying to or from a session the computer name will have a remote connection established only once and all files and or folders will be copied as needed without creating new sessions per file like before.
	•	 [Update-BluGenieSysinternals]
		o	[Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o	[Michael Arroyo] Moved Build Notes out of General Posh Help section
		o	[Michael Arroyo] Updated Tools path to (Blubin\Modules\Tools)
		o	[Michael Arroyo] Updated the Walkthrough / Help region with the current Help process
		o	[Michael Arroyo] Updated $Destination to $Global:ToolsDirectory.  This changes now works with Importing the Module itself and not running the BluGenie.exe if you don’t want to
		o	[Michael Arroyo] Updated $BaseDir to $Global:ToolsDirectory.  This changes now works with Importing the Module itself and not running the BluGenie.exe if you don’t want to
		o	[Michael Arroyo] Added Parameter called NoCleanUp.  This will leave all the SysInternal Tools that are downloaded and extracted.  If this flag isn’t set, only the items in the Config.JSON are kept and saved.  All other files will be removed to save space. 
	•	[Edit-BluGenieJSON]
		o	[Michael Arroyo] Removed all references for the flag RemoveMods 
	•	[Remove-BluGenieModule]
		o	[Michael Arroyo] New function to replace the RemoveMods flag in the JSON file.  This is now an external function that can also return what files have been removed or failed to remove.
		o	[Michael Arroyo] This new function will detect and track if the BluGenie Service was running.  If it was running the Service will be Stopped with a wait time of 2 min, and then the Service will be removed. 

*** Check the Azure Work Item for more notes ***

Posted Build#21.03.2901
	•	Posted Date: 
		o	04/06/2021
	•	Build Num#: 
		o	21.03.2901
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.03.2901
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7351
	•	High Level Notes: 
		o	Reconfigured how External Modules are detected and triggered for the BluGenie host.  This speeds up load times.
		o	Added Module (Hawk -> Powershell Based tool for gathering information related to O365 intrusions and potential Breaches)
		o	Added Azure and Office 365 External Modules
			- AzureAD
			- MSOnline
			- PSAppInsights
			- CloudConnect
			- PSFramework
			- RobustCloudCommand
			
# Updates #
	•	[BluGenie Core]
		o	[Michael Arroyo] Added support for Config.JSON to also run as Config.YAML
		o	[Michael Arroyo] Made Config.YAML the default configuration type
		o	[Michael Arroyo] Added Module (Hawk -> Powershell Based tool for gathering information related to O365 intrusions and potential Breaches)
		o	[Michael Arroyo] Added Azure and Office 365 External Modules
			- AzureAD
			- MSOnline
			- PSAppInsights
			- CloudConnect
			- PSFramework
			- RobustCloudCommand
	•	[BluGenie.psd1]
		o	[Michael Arroyo] Updated the Build Version
	•	[BluGenie.psm1]
		o	[Michael Arroyo] Added a detection method to look for either Config.JSON or Config.YAML file.
		o	[Michael Arroyo] Moved the Load Config region to action after the External Module injection region is run.
								This is to support YAML as a primary configuration engine.  But will also provide more functionality in the future.
		o	[Michael Arroyo] Moved the WSMan Configuration region to action after the External Module injection region is run.
		o	[Michael Arroyo] Moved the Copy Downloaded Tools region to action after the External Module injection region is run.
		o	[Michael Arroyo] Moved the Detect Needed Project Files region to action after the External Module injection region is run.
		o	[Michael Arroyo] Added an If Block to determine if the ToolsConfig exists and if it doesn't not no longer process the following regions as they are only needed for the Host.
								- Load Config region
								- WSMan Configuration region
								- Copy Downloaded Tools region
								- Detect Needed Project Files region
		o	[Michael Arroyo] Added a Remove-Module process for the 3rd pary modules to make sure the BluGenie 3rd party modules always get loaded without conflicts
		
*** Check the Azure Work Item for more notes ***


Posted Build#21.04.0701
	•	Posted Date:
		o	04/15/2021
	•	Build Num#:
		o	21.04.0701
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.04.0701
	•	Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7386
	•	High Level Notes:
		o	JSONPacks is now called Job Packs
		o	Yaml is now supported for both (Job Pack Files) and the Core configuration.
				Yaml is now the default configuration.  But JSON is still acceptable.
		o	Added support for Troubleshooting remote job issues.
		o	Major help information updates for the CLI, and the BluGenie Help process
                                               
# Updates #
	•	[BluGenie Core]
		o	[Michael Arroyo] The JSONPacks directory has been renamed to Job Packs
		o	[Michael Arroyo] YAML is now supported for both Job Pack Files and the Core configuration.
		o	[Michael Arroyo] HelpMnu.dat has been updated with changes made to this build
	•	[BluGenie.ps1]
		o	[Michael Arroyo] Updated the Loading screen to show how to run the new Help process
		o	[Michael Arroyo] Removed the Help Flag BgHidefromHelp.  This is now managed by the CLI Process
		o	[Michael Arroyo] Updated the CLI Help screen to show a clearer overview of how to run BluGenie.exe
		o	[Michael Arroyo] Updated all the CLI commands to run as abbreviations as well as the full command names
	•	[BluGenie.psd1]
		o	[Michael Arroyo] Updated Version information
		o	[Michael Arroyo] Updated Build notes
	•	[BluGenie.psm1]
		o	[Michael Arroyo] Updated the Create Hash footer to match the header
		o	[Michael Arroyo] Update the (Update Module Path) region to look for BluGenie\\Modules instead of just 	BluGenie.  If the user account had the name BluGenie in it, the search for the BluGenie module would fail to select the correct module directory.
		o	[Michael Arroyo] Renamed the BluGenieArg.txt debug log on the remote system to BluGenieDebug.txt which is captured in %SystemRoot%\Windows\Temp if Debug is set to True.
		o	[Michael Arroyo] Added capture of all the BluGenie Arguments, BluGenie Settings Variables, and Run-Time System Variables to the BluGenieDebug.txt.  This helps in the overall troubleshooting of the BluGenie process.  You can now see what variables BluGenie is using at Run Time on the remote system.
	•	 [Get-BluGenieSettings.ps1]
		o	[Michael Arroyo] Updated the Output Type to support YAML, JSON, and OutUnescapedJSON.  The default return is now YAML.  Note:  This is only noticed in the Console view when using the Settings, Get-BGSettings, or Get-BluGenieSettings command.
		o	[Michael Arroyo] Updated script based on (PSScriptAnalyzerSettings.psd1) linter configuration
		o	[Michael Arroyo] Build Version Details "Moved from main help.  There is a Char limit and PSHelp could not read all the information correctly"
	•	[Edit-BluGenieJSON.ps1]
		o	[Michael Arroyo] Updated script based on (PSScriptAnalyzerSettings.psd1) linter configuration
		o	[Michael Arroyo] Build Version Details "Moved from main help.  There is a Char limit and PSHelp could not read all the information correctly"
		o	[Michael Arroyo] Added support for Importing, Editing, Reviewing and Exporting YAML job files.
		o	[Michael Arroyo] Added Parameter ExportType to determine which type to use for export.  Note: The default is YAML
		o	[Michael Arroyo] Updated Help and Example information based on the new changes
		o	[Michael Arroyo] Added Alias Edit-BGJSON
		o	[Michael Arroyo] Added Alias Edit-BGYAML
		o	[Michael Arroyo] Added Alias Edit-JSON
		o	[Michael Arroyo] Added Alias Edit-YAML
		o	[Michael Arroyo] Added Alias YAML
		o	[Michael Arroyo] Added Alias Edit-BluGenieYAML
		o	[Michael Arroyo] Added Alias Edit-BGJobPack
		o	[Michael Arroyo] Added Alias Edit-JobPack
		o	[Michael Arroyo] Added Alias JobPack
		o	[Michael Arroyo] Added Alias Edit-BluGenieJobPack
		o	[Michael Arroyo] Updated the FileBrowser function to look for YAML as well as JSON
		o	[Michael Arroyo] Removed all references of JSON from the verbose messaging and set it to just (Job).
		o	[Michael Arroyo] Auto-detect the imported file type without a parameter
	•	[Get-BluGenieHelp.ps1]
		o	[Michael Arroyo] Updated script based on the (PSScriptAnalyzerSettings.psd1)
		o	[Michael Arroyo] Moved the Build Notes out of the General Posh Help section
		o	[Michael Arroyo] Added a new parameter called (Force) to forcefully create a new help cache file if one already exists.
		o	[Michael Arroyo] Removed the position property from the (Search) parameter.  This forces the use of the parameter name.
		o	[Michael Arroyo] Removed the position property from the (Help) parameter.  This forces the use of the parameter name.
		o	[Michael Arroyo] Added a new Alias called (BGHelp)
		o	[Michael Arroyo] Added a process to disable the Posh Progress bar while parsing Help information headers.
	•	[Connect-BluGenieToSystem.ps1]
		o	[Michael Arroyo] Updated the Description with more function detail
		o	[Michael Arroyo] Updated The ComputerName parameter to support multiple computers
		o	[Michael Arroyo] Added the missing parameter help header for (Force).
		o	[Michael Arroyo] Added a new parameter called (CopyModules).  This copies the BluGenie Module content to the remote host over WinRM without starting a Job.
		o	[Michael Arroyo] Added a new parameter called (SystemtModulePath).  When Copying the BluGenie Module content, set the save path to the default Windows PowerShell Module directory
				Notes: The path is $env:\ProgramFiles\WindowsPowerShell\Modules\BluGenie.
		o	[Michael Arroyo] Fixed the Help information region. Moved the (Build Version Details) from main help.  There is a Char limit and PSHelp could not read all the information correctly which also created issues using the (WalkThrough) parameter as well.
		o	[Michael Arroyo] Updated this function / script based on the new Linter (PSScriptAnalyzerSettings)
		o	[Michael Arroyo] Added a new Alias called (Connect-BGToSystem)
 
*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1301
	•	Posted Date: 
		o	05/13/2021
	•	Build Num#: 
		o	21.05.1301
	•	Engine Type: 
		o	PowerShell 2,3,4 and 5.x 
	•	Git Lab Link: 
		o	https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/commit/c0dd1576018e44c2e9c5e67608b2f47442658ae7
	•	Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7477
	•	High Level Notes: 
		o	API / (JSON and YAML) Jobs are now referenced as Artifacts
		o	Added new ways to call Systems from the CLI / API
		o	Added support for BGAnalyzer formally called Seatbelt			
		
# Updates #
	•	[BluGenie.ps1]
		o	[Michael Arroyo] Added CLI System lookup “/system | /sys” to call selected systems outside of the artifact file
		o	[Michael Arroyo] Added CLI Artifact lookup “/artifact | /a” to call a specific Artifact file
		o	[Michael Arroyo] Updated all JSON and YAML job references to Artifacts 
	•	[BluGenie.psm1]
		o	[Michael Arroyo] Removed all JSON and YAML job commands and aliases 
		o	[Michael Arroyo] Added Alias Name 'Publish-BGArtifact' Value 'Publish-BluGenieArtifact' 
		o	[Michael Arroyo] Added Alias Name ‘BGArtifact' Value 'Publish-BluGenieArtifact' 
		o	[Michael Arroyo] Added Alias Name 'Artifact' Value 'Publish-BluGenieArtifact'
		o	[Michael Arroyo] Added Alias Name 'Invoke-Analyzer' Value 'Invoke-BluGenieAnalyzer' 
		o	[Michael Arroyo] Added Alias Name 'Invoke-BGAnalyzer' Value 'Invoke-BluGenieAnalyzer'
		o	[Michael Arroyo] Added Alias Name 'Get-BGADGroups' Value 'Get-BluGenieADGroups' 
		o	[Michael Arroyo] Added Alias Name 'Get-BGADG' Value 'Get-BluGenieADGroups'
		o	[Michael Arroyo] Added Alias Name 'ADG' Value 'Get-BluGenieADGroups'
		o	[Michael Arroyo] Added Alias Name 'Get-BGADGroupMembers' Value 'Get-BluGenieADGroupMembers'
		o	[Michael Arroyo] Added Alias Name 'Get-BGADGM' Value 'Get-BluGenieADGroupMembers'
		o	[Michael Arroyo] Added Alias Name 'ADGM' Value 'Get-BluGenieADGroupMembers'
	•	[Core Framework]
		o	[Michael Arroyo] Added a sub folder called Artifacts to house the new Artifact files
		o	[Michael Arroyo] Added a sub folder called Collections to house files containing collections of systems
		o	[Michael Arroyo] Added 14 new Artifact files in reference to the new command Invoke-BGAnalyzes 
		•	[Get-BluGenieADGroupMembers.ps1]
		o	[Michael Arroyo] Created a new tool to Query Active Directory via LDAP without the need for RSAT to be installed.
				This tool will Query Groups for members.  This will help to maintain Computer Groups/Collections in AD. 
	•	[Publish-BluGenieArtifact.ps1]
		o	[Michael Arroyo] Created a new tool to Import, Export, and Review Artifact data from a JSON/YAML file.  
				Artifacts are constructed logic to query local and remote systems for a specific Indicator of compromise or IOC.  
				IOC is a forensic term that refers to the evidence on a device that points out to a security breach. 
				The data of IOC is gathered after a suspicious incident, security event or unexpected call-outs from the network.	
	•	[Set-BluGenieSystems.ps1]
		o	[Michael Arroyo] Updated the script based on the Current PSScriptAnalyzerSettings.psd1 settings
		o	[Michael Arroyo] Updated the script based on the new Function template to add more support for the interactive help
		o	[Michael Arroyo] Updated the WalkThrough function to the latest
		o	[Michael Arroyo] Added support to querying Domain Groups for computer objects
		o	[Michael Arroyo] Added support to querying Files for computer objects
	•	[BGAnalyzer.exe]
		o	[Michael Arroyo] .NET application forked from SeatBelt.  This tool is wrapped and managed by Invoke-BluGenieAnalyzer.ps1
		o	[Michael Arroyo] .NET 3.5 and 4.0 versions compiled
	•	[Invoke-BluGenieAnalyzer.ps1]
		o	[Michael Arroyo] Invoke-BluGenieAnalyzer is a wrapper around the BGAnalyzer tool.  BGAnalyzer is a C# project that performs a number of security oriented host-survey "safety checks" relevant from both offensive and defensive security perspectives.
				Items that can be queried:
				AMSIProviders - Providers registered for AMSI
				AntiVirus - Registered antivirus (via WMI)
				AppLocker - AppLocker settings, if installed
				ARPTable - Lists the current ARP table and adapter information (equivalent to arp -a)
				AuditPolicies - Enumerates classic and advanced audit policy settings
				AuditPolicyRegistry - Audit settings via the registry
				AutoRuns - Auto run executables/scripts/programs
				ChromiumBookmarks - Parses any found Chrome/Edge/Brave/Opera bookmark files
				ChromiumHistory - Parses any found Chrome/Edge/Brave/Opera history files
				ChromiumPresence - Checks if interesting Chrome/Edge/Brave/Opera files exist
				CloudCredentials - AWS/Google/Azure/Bluemix cloud credential files
				CloudSyncProviders - All configured Office 365 endpoints (tenants and teamsites) which are synchronised by OneDrive.
				CredEnum - Enumerates the current user's saved credentials using CredEnumerate()
				CredGuard - CredentialGuard configuration
				Dir - Lists files/folders. By default, lists users' downloads, documents, and desktop folders
				DNSCache - DNS cache entries (via WMI)
				DotNet - DotNet versions
				DpapiMasterKeys - List DPAPI master keys
				EnvironmentPath - Current environment %PATH$ folders and SDDL information
				EnvironmentVariables - Current environment variables
				ExplicitLogonEvents - Explicit Logon events (Event ID 4648) from the security event log. Default of 7 days
				ExplorerMRUs - Explorer most recently used files (last 7 days)
				ExplorerRunCommands - Recent Explorer "run" commands
				FileZilla - FileZilla configuration files
				FirefoxHistory - Parses any found FireFox history files
				FirefoxPresence - Checks if interesting Firefox files exist
				Hotfixes - Installed hotfixes (via WMI)
				IdleTime - Returns the number of seconds since the current user's last input.
				IEFavorites - Internet Explorer favorites
				IETabs - Open Internet Explorer tabs
				IEUrls - Internet Explorer typed URLs (last 7 days)
				InstalledProducts - Installed products via the registry
				InterestingFiles - "Interesting" files matching various patterns in the user's folder. Note: takes non-trivial time.
				InterestingProcesses - "Interesting" processes - defensive products and admin tools
				InternetSettings - Internet settings including proxy configs and zones configuration
				KeePass - Finds KeePass configuration files
				LAPS - LAPS settings, if installed
				LastShutdown - Returns the DateTime of the last system shutdown (via the registry).
				LocalGPOs - Local Group Policy settings applied to the machine/local users
				LocalGroups - Local groups
				LocalUsers - Local users, whether they're active/disabled, and pwd last set
				LogonEvents - Logon events (Event ID 4624) from the security event log. Default of 10 days.
				LogonSessions - Windows logon sessions
				LOLBAS - Locates Living Off the Land Binaries and Scripts (LOLBAS) on the system. Note: takes non-trivial time.
				LSASettings - LSA settings (including auth packages)
				MappedDrives - Users' mapped drives (via WMI)
				McAfeeConfigs - Finds McAfee configuration files
				McAfeeSiteList - Decrypt any found McAfee SiteList.xml configuration files.
				MicrosoftUpdates - All Microsoft updates (via COM)
				NamedPipes - Named pipe names and any readable ACL information.
				NetworkProfiles - Windows network profiles
				NetworkShares - Network shares exposed by the machine (via WMI)
				NTLMSettings - NTLM authentication settings
				OfficeMRUs - Office most recently used file list (last 7 days)
				OracleSQLDeveloper - Finds Oracle SQLDeveloper connections.xml files
				OSInfo - Basic OS info (i.e. architecture, OS version, etc.)
				OutlookDownloads - List files downloaded by Outlook
				PoweredOnEvents - Reboot and sleep schedule based on the System event log EIDs 1, 12, 13, 42, and 6008. Default of 7 days
				PowerShell - PowerShell versions and security settings
				PowerShellEvents - PowerShell script block logs (4104) with sensitive data.
				PowerShellHistory - Searches PowerShell console history files for sensitive regex matches.
				Printers - Installed Printers (via WMI)
				ProcessCreationEvents - Process creation logs (4688) with sensitive data.
				Processes - Running processes with file info company names that don't contain 'Microsoft'
				ProcessOwners - Running non-session 0 process list with owners
				PSSessionSettings - Enumerates PS Session Settings from the registry
				PuttyHostKeys - Saved Putty SSH host keys
				PuttySessions - Saved Putty configuration (interesting fields) and SSH host keys
				RDCManFiles - Windows Remote Desktop Connection Manager settings files
				RDPSavedConnections - Saved RDP connections stored in the registry
				RDPSessions - Current incoming RDP sessions
				RDPsettings - Remote Desktop Server/Client Settings
				RecycleBin - Items in the Recycle Bin deleted in the last 30 days - only works from a user context!
				Reg - Registry key values (HKLM\Software)
				RPCMappedEndpoints - Current RPC endpoints mapped
				SCCM - System Center Configuration Manager (SCCM) settings, if applicable
				ScheduledTasks - Scheduled tasks (via WMI) that aren't authored by 'Microsoft'
				SearchIndex - Query results from the Windows Search Index, default term of 'passsword'.
				SecPackageCreds - Obtains credentials from security packages
				SecurityPackages - Enumerates the security packages currently available using EnumerateSecurityPackagesA()
				Services - Services with file info company names that don't contain 'Microsoft'
				SlackDownloads - Parses any found 'slack-downloads' files
				SlackPresence - Checks if interesting Slack files exist
				SlackWorkspaces - Parses any found 'slack-workspaces' files
				SuperPutty - SuperPutty configuration files
				Sysmon - Sysmon configuration from the registry
				SysmonEvents - Sysmon process creation logs (1) with sensitive data.
				TcpConnections - Current TCP connections and their associated processes and services
				TokenGroups - The current token's local and domain groups
				TokenPrivileges - Currently enabled token privileges (e.g. SeDebugPrivilege/etc.)
				UAC - UAC system policies via the registry
				UdpConnections - Current UDP connections and associated processes and services
				UserRightAssignments - Configured User Right Assignments (e.g. SeDenyNetworkLogonRight, SeShutdownPrivilege, etc.)
				WindowsAutoLogon - Registry autologon information
				WindowsCredentialFiles - Windows credential DPAPI blobs
				WindowsDefender - Windows Defender settings (including exclusion locations)
				WindowsEventForwarding - Windows Event Forwarding (WEF) settings via the registry
				WindowsFirewall - Firewall rules - (allow/deny/tcp/udp/in/out/domain/private/public)
				WindowsVault - Credentials saved in the Windows Vault (i.e. logins from Internet Explorer and Edge).
				WMIEventConsumer - Lists WMI Event Consumers
				WMIEventFilter - Lists WMI Event Filters
				WMIFilterBinding - Lists WMI Filter to Consumer Bindings
				WSUS - Windows Server Update Services (WSUS) settings, if applicable	
	•	[Get-BluGenieADGroups.ps1]
		o	[Michael Arroyo] Query for Active Directory Groups via LDAP without the need for RSAT to be installed.

*** Check the Azure Work Item for more notes ***


Posted Build#21.05.1701
	•	Posted Date:
		o	06/13/2021
	•	Build Num#:
		o	21.05.1701
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1701
	•	 Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7621
	•	Notes:
		o	High Level Notes
	•	Added a Portable Python Engine
	•	Updated the Format-BGEvent function to query for all event data and allowing parsing using EQL or SQL.
# Updates #
	•	[Invoke-BluGeniePython]
		o	[Michael Arroyo] Invoke-BluGeniePython will enable a BluGenie Managed Portable version of Python
	•	[Format-BluGenieEvent]
		o	[Michael Arroyo] Format-BluGenieEvent will Format a Windows System Event Log with new properties from the Message field.  An Event has a Message that is one big string.  This function will parse that information and convert any valid line item into a new Object Property and         bind it back to the original PsObject.
		o	[Michael Arroyo] Added Parameter –Schema.  Use a Schema file to change or remap any property name in any Windows Event your trying to Query
		o	[Michael Arroyo] Added Parameter –NoMsgPrefix.  By Default, the Event Message content is parsed and all properties have a Prefix called (Msg).  This option will force the normal property names without (Msg).
		o	[Michael Arroyo] Added Parameter –RemoveCache.  Remove Cache data on completion.  Notes: Cache information is removed right before the data is returned to the calling process
								Items Removed:
									•	JSON Output for EQL Query
									•	SQLite DB if you do not use the -DBPath = ':MEMORY:' parameter.  Note: The DB in memory is the default option for SQL
		o	[Michael Arroyo] Added Parameter –ClearGarbageCollecting.  Garbage Collection in PowerShell to Speed up Scripts and help lower memory consumption
		o	[Michael Arroyo] Updated the Function to the latest template which includes new parameters (Walkthrough, ReturnObject, OutUnEscapedJSON, OutYaml)
		o	[Michael Arroyo] Added Parameter –OutJSON.  Return detailed information in JSON Format
		o	[Michael Arroyo] Added Parameter –ExportPath.  The Path to Export / Save parsed event data to the local disk
		o	[Michael Arroyo] Added Parameter –EQLQuery.  Use EQL Queries to parse the data
		o	[Michael Arroyo] Added Parameter –SQLQuery.  Use SQL Queries to parse the data
		o	[Michael Arroyo] Added Parameter –DBName.  Database name used when parsing using SQL and Setting the DBPath to a local disk path
		o	[Michael Arroyo] Added Parameter –DBTableName.  Database table name when parsing using SQL.
		o	[Michael Arroyo] Added Parameter –DBPath.  Database Path when parsing using SQL
		o	[Michael Arroyo] Added Parameter –PropsOnly.  Used to only parse and display the Properties of an Event Message field.  No other event data will be captured.
		o	[Michael Arroyo] Added Parameter –FormatView.  Automatically format the Return Object to any of the following formats.  ‘Table', 'Custom', 'CustomModified', 'None', 'JSON', 'OutUnEscapedJSON', 'CSV', 'Yaml'
	•	[Install-BluGenieSysMon]
		o	[Michael Arroyo] Updated the function to Install, Update, or Uninstall the SysMon SysInternals tool.  The function will no longer copy the tool to the remote system.
		o	[Michael Arroyo] Updated Source parameter to SourcePath.  The Source location of the SysMon tools
		o	[Michael Arroyo] Added Parameter –ConfigFile.  Full file path for a SysMon Configuation XML
		o	[Michael Arroyo] Added Parameter –Uninstall.  Stop and Remove the SysMon Service
		o	[Michael Arroyo] Added Parameter –ForceInstall.  Overwrite the current installation and remove and reinstall the service.
		o	[Michael Arroyo] Updated the Function to the latest template which includes new parameters (Walkthrough, ReturnObject, OutUnEscapedJSON, OutYaml, DBName, DBPath, UpdateDB, ForceDBUpdate, NewDEBTable, ClearGarbageCollecting, OutYaml, FormatView)
	•	[BluGenie.psd1]
		o	[Michael Arroyo] Updated the Build Notes and Version information
	•	[BluGenie.psm1]
		o	[Michael Arroyo] Added Alias (Name 'Invoke-BGPython' Value 'Invoke-BluGeniePython')
		o	[Michael Arroyo] Added Alias (Name 'BGPython' Value 'Invoke-BluGeniePython')
		o	[Michael Arroyo] Added Alias (Name 'Format-BGEvent' Value 'Format-BluGenieEvent')
		o	[Michael Arroyo] Added Alias (Name 'BGEvent' Value 'Format-BluGenieEvent')

*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1702
	•	Posted Date:
		o	06/23/2021
	•	Build Num#:
		o	21.05.1702
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1702
	•	 Azure Work Item:
		o	 https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7663
	•	High Level Notes
			* Bug Fixes
			* Added support for RabbitMQ
# Updates #
	•	[Set-BluGenieScriptCredentials]
		o	[Michael Arroyo] Posted - Set Credentials in runtime without using Get-Credentials and being prompted for a password
	•	[BluGenie Core]
		o	[Michael Arroyo] - Added Module ( RabbitMQTools - Ver 1.3 -> https://github.com/RamblingCookieMonster/RabbitMQTools/archive/master.zip )
		o 	[Michael Arroyo] - Added Config/Script location for EQLQueries files 	-> .\Blubin\Modules\BluGenie\Configs\EQLQueries
		o 	[Michael Arroyo] - Added Config/Script location for Python files 		-> .\Blubin\Modules\BluGenie\Configs\Python
		o 	[Michael Arroyo] - Added Config/Script location for Schema files 		-> .\Blubin\Modules\BluGenie\Configs\Schema
		o	[Michael Arroyo] - Added Config/Script location for SQLQueries files 	-> .\Blubin\Modules\BluGenie\Configs\SQLQueries
		o 	[Michael Arroyo] - Added Comments to the Config.Yaml
	•	[Get-BluGenieAutoRuns]
		o 	[Ravi Vinod Dubey] Moved Build Notes out of General Posh Help section
		o 	[Ravi Vinod Dubey] Added support for Caching
		o 	[Ravi Vinod Dubey] Added support for Clearing Garbage collecting
		o 	[Ravi Vinod Dubey] Added support for SQLite DB
		o 	[Ravi Vinod Dubey] Updated Process Query and Filtering
		o 	[Ravi Vinod Dubey] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
								unless you manually set the -Verbose parameter.
		o 	[Ravi Vinod Dubey] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o 	[Ravi Vinod Dubey] Change the script to check the AutoRuns tools in ..\Tools\SysinternalsSuite\.
		o 	[Ravi Vinod Dubey] Change the script to check the AutoRuns $ToolPath.
		o 	[Michael Arroyo] Updated the ArrToolPath scriptblock
		o 	[Michael Arroyo] Updated the HideSigned PARAMETER help information.  Removed ValidateSet information.
		o 	[Michael Arroyo] Removed all parameter position flags.  These options are no longer needed.
		o 	[Michael Arroyo] Updated the function based on the PSScriptAnalyzerSettings configuration.
		o 	[Michael Arroyo] Added funtion Alias ( Get-BGAutoRuns )
	•	[Invoke-BluGenieYara]
		o 	[Ravi Vinod Dubey] Change the script to check the AutoRuns tools in ..\Tools\Yara\.
		o 	[Ravi Vinod Dubey] Change the $ToolPath from Temp to the $ToolsPathDirectory\Yara.
		o 	[Michael Arroyo] Updated the ArrToolPath scriptblock
	•	[Get-BluGenieSignature]
		o 	[Michael Arroyo] Updated the function based on the PSScriptAnalyzerSettings configuration.
		o	 [Michael Arroyo] Added funtion Alias ( Get-BGSignature )
		o 	[Michael Arroyo] Updated the ArrToolPath scriptblock
	•	[Test-BluGenieIsFileLocked]
		o 	[Michael Arroyo] Updated the function based on the PSScriptAnalyzerSettings configuration.
	•	[Invoke-BluGeniePython]
		o 	[Michael Arroyo] Added a Dynamic Path process to update the pyvenv.cfg file based on where the BGPython directory is located
		o 	[Michael Arroyo] -Remove will now search the current env:path to make sure you didn't load the BluGenie Python into the
								normal env.  If so, it will remove it as well as the BGPython Directory.
		o 	[Michael Arroyo] Successful setup is now based on checks to the $env:Path and the pyvenv.cfg to make sure they match
		o 	[Michael Arroyo] Once BGPython is setup you can now run Python commands in the BGConsole without running BluGenie commands
								Example: Python --version
								Example: Python $env:temp\MyScript.py

*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1703
	•	Posted Date:
		o	06/28/2021
	•	Build Num#:
		o	21.05.1703
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1703
	•	 Azure Work Item:
		o	 Not Posted as of yet..  Error when updating Azure.
	•	High Level Notes
			* Bug Fixes
			
# Updates #
	•	[Invoke-BluGeniePython]
		o [Michael Arroyo] Added parameter WinPyConsole.  This will open up the WinPython Command Prompt.
		o [Michael Arroyo] Added $ToolsDirectory\BGPython\scripts to the env path
		o [Michael Arroyo] Updated the env to support EQL calls directly
		o [Michael Arroyo] Updated the env to support EQLLib calls directly
		o [Michael Arroyo] Updated the env to support Python calls directly
		o [Michael Arroyo] Added env startup script to rebuild or add to the env dynamically by adding Lib / Pip installs to ->
			$ToolsDirectory\BGPython\settings\BGSetup.ps1
	•	[BluGenie Core]
		o [Michael Arroyo] Fixed the Config.YAML config.  The RemoteWSManConfig: section had a space in front of it which caused the file
			not to load.
	•	[Expand-BluGenieArchivePS2]
		o [Michael Arroyo] Fixed parameter $NoErrorMsg in the (Set Extraction Flags) region.
			It was not set as it should, so when calling it the parameter would cause a process failure.

*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1704
	•	Posted Date:
		o	07/01/2021
	•	Build Num#:
		o	21.05.1704
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1704
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7679
	•	High Level Notes
			* Bug Fixes
			
# Updates #
	•	[Format-BluGenieEvent]
		o [Michael Arroyo] Added ForceEQLGenericQuery switch to Force an EQL Generic Query even if EQL has a known Schema type
		o [Michael Arroyo] Rebuilt Event Object using (ConvertTo-JSON | ConvertFrom-JSON)
		o [Michael Arroyo] Updated the BG Schema mapping change to also work on -PropsOnly
		o [Michael Arroyo] Updated the EQL json output to have a list view even if the Object has a single item.
			By default a single item in the json Array would not stay a list.  But EQL needs a list format no matter what.
		o [Michael Arroyo] Fixed the Parsed Count item.  It was coming back as null
		o [Michael Arroyo] Added new Examples for the new EQL Query types
	•	[BluGenie Core]
		o [Michael Arroyo] Added a new Schema file for SysMon Event ID 3

*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1705
	•	Posted Date:
		o	07/26/2021
	•	Build Num#:
		o	21.05.1705
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
		o   Python 3.8
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1705
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7755
	•	High Level Notes
			* Bug Fixes
			
# Updates #
	•	[Format-BluGenieEvent]
		o [Michael Arroyo] Added new Parameter UseInputFile - Force Query from a previously saved file and not the Windows Event Log
			The supported file formats are EVT, EVTX, and JSON
		o [Michael Arroyo] Updated the ExportPath parameter to have the default path $env:systemdrive\Windows\Temp\BGFE_<GUID>.json
		o [Michael Arroyo] Added new Parameter Export - Enable the Export of Filtered data for later use
		o [Michael Arroyo] Updated the PropsOnly parameter to work with imported data as well as the Event Viewer Log Data
		o [Michael Arroyo] Added new Parameter ExcludeFilter - Use an ExcludeFilter Yaml file to remove items that you do not want to
			include in the Event Search.
	•	[Invoke-BluGeniePython]
		o [Michael Arroyo] Removed Progress Bar while processing BGPython Extract to speed up performance.
		o [Michael Arroyo] Fixed some of the region headers in Main
		o [Michael Arroyo] Updated BGSetup.ps1 to support Local Wheel installs
		o [Michael Arroyo] Added a new directory to house the local wheel installs $ToolsDirectory\BGPython\settings\localwheels
		o [Michael Arroyo] Added local wheel install (psutil-5.8.0-cp38-cp38-win_amd64.whl)
		o [Michael Arroyo] Added local wheel install (pywin32-301-cp38-cp38-win_amd64.whl)
		o [Michael Arroyo] Added local wheel install (regex-2021.7.6-cp38-cp38-win_amd64.whl)
		o [Michael Arroyo] Added local wheel install (WMI-1.5.1-py2.py3-none-any.whl)
		o [Michael Arroyo] Added Verbose Logging to the BGSetup.ps1 if -Verbose is used with Invoke-BluGeniePython

*** Check the Azure Work Item for more notes ***

Posted Build#21.05.1706
	•	Posted Date:
		o	08/08/2021
	•	Build Num#:
		o	21.05.1706
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
		o   Python 3.8
	•	Git Lab Link:
		o	 https://morpheus.g14researchlabs.com/r2/genie/blugenie/-/tree/Build%2321.05.1706
	•	 Azure Work Item:
		o	https://dev.azure.com/kiran0651/BluSapphire3.5/_workitems/edit/7799
	•	High Level Notes
			* Bug Fixes
			* (18) New Artifacts for Format-BluGenieEvent
			
# Updates #
	•	[Format-BluGenieEvent]
		o [Michael Arroyo] Renamed Parameter FilterHashTable to LogName
		o [Michael Arroyo] Added a new Parameter called (ID) to handle the Event ID's instead of adding them to the LogName string
		o [Michael Arroyo] Updated the Help information to the new Event, MaxEvent, and LogID parameter values
		o [Michael Arroyo] Converted FilterHashTable for Get-WinEvent to use a Switch Statement
		o [Michael Arroyo] Created a new Parameter called (AppendEventHash) - Query based on more Event Filter Hash Table information
		o [Michael Arroyo] Parse each message field and auto correct Type information to rebuild [Int] types if captured as [String]
		o [Michael Arroyo] Set the default location for an EQLQuery file.  The default lookup location is
							$BluGenieModulePath\BluGenie\Configs\EQLQueries\
		o [Michael Arroyo] Set the default location for an SQLQuery file.  The default lookup location is
							$BluGenieModulePath\BluGenie\Configs\SQLQueries\
		o [Michael Arroyo] Set the default location for an Exclude file.  The default lookup location is
							$BluGenieModulePath\BluGenie\Configs\Schema\
	•	[Invoke-BluGeniePython]
		o [Michael Arroyo] Set the $Global:ProgressPreference on Start and End of this funtion

*** Check the Azure Work Item for more notes ***

Posted Build#21.11.0801
	•	Posted Date:
		o	11/09/2021
	•	Build Num#:
		o	21.11.0801
	•	Engine Type:
		o	PowerShell 2,3,4 and 5.x
		o   Python 3.8
	•	Git Link:
		o	https://github.com/kvangaveti/blugenie/tree/Build_21.11.0801
	•	 Azure Work Item:
		o 	N/A	
	•	High Level Notes
			* Bug Fixes
			* Update to all the functions running the Console Settings List
			
# Updates #
	[BluGenie]
		o [Michael Arroyo] Updated HelpMnu.dat to include the new Help Module information
		o [Michael Arroyo] Added Walk as an Alias for Invoke-WalkThrough
		o [Michael Arroyo] Added Trap to the Alias list (This is to support the BluGenie Console Settings functions)
		o [Michael Arroyo] Added new function [Set-BGVerbose] to manage the Verbose Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieNoSetRes] to manage the NoSetRes Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieNoExit] to manage the NoExit Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieNoBanner] to manage the NoBanner Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieUpdateMods] to manage the UpdateMods Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieServiceJob] to manage the ServiceJoib Setting value in the BluGenie Console
		o [Michael Arroyo] Added new function [Set-BluGenieCores] to manage the Cores Setting value in the BluGenie Console
	[BluGenie.psm1]
		o [Michael Arroyo] Consolidated Code (Removed 800 plus lines of code with this update)
		o [Michael Arroyo] Updated all ForEach-Object references to ForEach to determine speed updates (only gained 3 seconds in load time)
	[BluGenie.psm1]
		o [Michael Arroyo] Updated the /Core CLI parameter help information.
	[Set-BluGenieJobId]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through Function to the newest standard
	[Set-BluGenieCommands]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through Function to the newest standard
	[Set-BluGenieParallelCommands]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through Function to the newest standard
	[Set-BluGeniePostCommands]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through Function to the newest standard
	[Set-BluGenieSystems]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through Function to the newest standard
	[Set-BluGenieThreadCount]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through
	[Get-BluGenieAutoRuns]
		o [Ravi Vinod Dubey] Moved Build Notes out of General Posh Help section
		o [Ravi Vinod Dubey] Added support for Caching
		o [Ravi Vinod Dubey] Added support for Clearing Garbage collecting
		o [Ravi Vinod Dubey] Added support for SQLite DB
		o [Ravi Vinod Dubey] Updated Process Query and Filtering
		o [Ravi Vinod Dubey] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Ravi Vinod Dubey] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Ravi Vinod Dubey] Change the script to check the AutoRuns tools in ..\Tools\SysinternalsSuite\
	[Get-BluGenieFirewallRules]
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Ravi Vinod Dubey] Added support for Caching
		o [Ravi Vinod Dubey] Added support for Clearing Garbage collecting
		o [Ravi Vinod Dubey] Added support for SQLite DB
		o [Ravi Vinod Dubey] Added support for OutYaml
		o [Ravi Vinod Dubey] Updated Process Query and Filtering
		o [Ravi Vinod Dubey] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Ravi Vinod Dubey] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
	[Invoke-BluGenieYara]
		o [Michael Arroyo] Updated the function to the new function template
		o [Michael Arroyo] Added more detailed information to the Return data
		o [Michael Arroyo] Updated script based on the ( PSScriptAnalyzerSettings.psd1 )
		o [Michael Arroyo] Moved Build Notes out of General Posh Help section
		o [Michael Arroyo] Added support for Caching
		o [Michael Arroyo] Added support for Clearing Garbage collecting
		o [Michael Arroyo] Added support for SQLite DB
		o [Michael Arroyo] Updated Service Query and Filtering (10x faster when processing)
		o [Michael Arroyo] Added support for the -Verbose parameter.  The query return will no longer shows extended debugging info
			unless you manually set the -Verbose parameter.
		o [Michael Arroyo] Added support for the -NewDBTable parameter.  This will delete and recreate the DB Table.
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -ForceDBUpdate is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to enable -UpdateDB if -NewDBTable is used
		o [Michael Arroyo] Updated the Dynamic parameter update region to disable -UpdateDB if running under PowerShell 2
		o [Michael Arroyo] Tools path updated with $('{0}\Tools\Yara\{1}' -f $(Get-Location | Select-Object -ExpandProperty Path), $Yara)
		o [Michael Arroyo] Updated the CommandlineOptions switch process to pull from the parameters directly instead of the
			PSBoundParameters. This is cleaner and also allows you to test in real time.  The old way using PSBoundParameters
			is only valid at runtime or debug mode.
	[Set-BluGenieDebugger]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through
	[PSScriptAnalyzerSettings]
		o [Michael Arroyo] Updated to look like the below.
							PSPlaceCloseBrace = @{
								Enable             = $true
								NoEmptyLineBefore  = $true
								IgnoreOneLineBlock = $false
								NewLineAfter       = $false
							}
							PSPlaceOpenBrace = @{
								Enable             = $true
								OnSameLine         = $true
								NewLineAfter       = $false
								IgnoreOneLineBlock = $false
							}
	[Set-BluGenieJobTimeout]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through
	[Set-BluGenieTrapping]
		o [Michael Arroyo] Consolidated Code
		o [Michael Arroyo] Updated the Parameter and Example Help Header Information
		o [Michael Arroyo] Updated the Description Information for Help content
		o [Michael Arroyo] Updated the Walk Through
	[Set-BGVerbose]
		o [Michael Arroyo] (Initial Post) Set-BluGenieVerbose is an add-on to manage the Verbose status in the BluGenie Console.
	[Set-BluGenieNoSetRes]
		o [Michael Arroyo] Set the NoSetRes value so to not update the frame of the Console.  Use the OS's default command prompt size.
	[Set-BluGenieNoExit]
		o [Michael Arroyo] Setting this option will stay in the Console after executing an automated Job or command from the CLI.
	[Set-BluGenieNoBanner]
		o [Michael Arroyo] Do not display the BluGenie Welcome Screen.
	[Set-BluGenieUpdateMods]
		o [Michael Arroyo] Force all managed BluGenie files and folders to be updated on the remote machine
	[Set-BluGenieServiceJob]
		o [Michael Arroyo] Send the artifact to the remote machine to be run by the BluGenie Service.
							Note: This will only work if the BluGenie service is running. If not, the artifact will fallback to the remote connection execution process.	
	[Set-BluGenieCores]
		o [Michael Arroyo] Set-BluGenieCores is an add-on to control how many Cores to use while in the BluGenie Console
							Select the amount of cores you want this job to use.  Default is (ALL).
							Core information is pulled from the ($env:NUMBER_OF_PROCESSORS) variable.