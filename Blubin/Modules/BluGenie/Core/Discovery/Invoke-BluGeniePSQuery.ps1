#region Invoke-BluGeniePSQuery (Function)
Function Invoke-BluGeniePSQuery
{
<#
    .SYNOPSIS
        Invoke-BluGeniePSQuery will sweep one or more IP addresses to determine if PowerShell 3 or higher is installed.

    .DESCRIPTION
        Invoke-BluGeniePSQuery will query system information over WMI for one or more IP addresses to determine if PowerShell 3 or higher is installed.
        A report is generated by default in the Transcripts directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"

        Captured Data fields
            Address                     - Remote IP Address                   ( 10.20.136.121 )
            ComputerName                - Remote Host Name                    ( win7sp1001 )
            FQDN                        - Fully Qualified Domain Name         ( WIN7SP1001.TestLab.Com )
            FreePhysicalMemoryGB        - Free Physical Memory Quote in GB    ( .54 )
            FreePhysicalMemoryMB        - Free Physical Memory Quote in MB    ( 558 )
            Online                      - Online Status                       ( True or False )
            OS                          - Operating System Name               ( Microsoft Windows 7 Enterprise )
            OSVersion                   - Operating Version                   ( 6.1.7601 )
            Compliant                   - PowerShell Version 3 or Higher      ( True )
            PowerShellVer               - Installed PowerShell Version        ( 2.0 )
            TotalPhysicalMemoryGB       - Total Physical Memory Quote in GB   ( 6 )
            TotalPhysicalMemoryMB       - Total Physical Memory Quote in MB   ( 6291000 )
            TotalVirtualMemorySizeGB    - Total Virtual Memory Quote in GB    ( 12 )
            TotalVirtualMemorySizeMB    - Total Virtual Memory Quote in MB    ( 12285 )

    .PARAMETER System
        Description: IP Address or Host name to Query
        Notes: System names can also be called from BluGenie's system list if the System parameter is not set.
        Alias:
        ValidateSet:  

    .PARAMETER Range
        Description: Range of IP Addresses to Query 
        Notes: Range information can also be called from BluGenie's range list if the Range parameter is not set.
        Alias:
        ValidateSet:  

    .PARAMETER PingTimeOut
        Description: [TTL] - Time to live ping setting 
        Notes: The default is 15ms 
        Alias:
        ValidateSet: 

    .PARAMETER Force
        Description: Force connect without trying to run an ICMP (Internet Control Message Protocol)
        Notes:  
        Alias:
        ValidateSet: 

    .PARAMETER PassThrough
        Description: Update the BGConsole System Array list with all systems that match the filtered information
        Notes:  
        Alias:
        ValidateSet: 

    .PARAMETER JSONJob
        Description: Use a JSON job file to import settings
        Notes:  
        Alias:
        ValidateSet: 

    .PARAMETER FilterType
        Description:  Which property to filter by
        Notes:  
                Filter Option = Address                     - Remote IP Address                   ( 10.20.136.121 )
                Filter Option = ComputerName                - Remote Host Name                    ( win7sp1001 )
                Filter Option = FQDN                        - Fully Qualified Domain Name         ( WIN7SP1001.TestLab.Com )
                Filter Option = FreePhysicalMemoryGB        - Free Physical Memory Quote in GB    ( .54 )
                Filter Option = FreePhysicalMemoryMB        - Free Physical Memory Quote in MB    ( 558 )
                Filter Option = Online                      - Online Status                       ( True or False )
                Filter Option = OS                          - Operating System Name               ( Microsoft Windows 7 Enterprise )
                Filter Option = OSVersion                   - Operating Version                   ( 6.1.7601 )
                Filter Option = Compliant                 - PowerShell Version 3 or Higher      ( True or False ) **Default Search Field**
                Filter Option = PowerShellVer               - Installed PowerShell Version        ( 2.0 )
                Filter Option = TotalPhysicalMemoryGB       - Total Physical Memory Quote in GB   ( 6 )
                Filter Option = TotalPhysicalMemoryMB       - Total Physical Memory Quote in MB   ( 6291000 )
                Filter Option = TotalVirtualMemorySizeGB    - Total Virtual Memory Quote in GB    ( 12 )
                Filter Option = TotalVirtualMemorySizeMB    - Total Virtual Memory Quote in MB    ( 12285 )
        Alias:
        ValidateSet: 'Name','Address','ComputerName','FQDN','FreePhysicalMemoryGB','FreePhysicalMemoryMB','Online','OS','OSVersion','Compliant','PowerShellVer','TotalPhysicalMemoryGB','TotalPhysicalMemoryMB','TotalVirtualMemorySizeGB','TotalVirtualMemorySizeMB'

    .PARAMETER Pattern
        Description: Search Pattern using RegEx
        Notes: Using -SearchHidden will convert the Pattern to RegEx Automatically but without the comma or the -SearchHidden the -Pattern is viewed as as a Command Console Search pattern.  You can use (*) wildcards. 
        Alias:
        ValidateSet:  
    
    .PARAMETER Run
        Description: Process any command(s) from the JSON Job file on any of the systems filtered by PSQuery.
        Notes: 
        Alias:
        ValidateSet: 

    .PARAMETER LogPath
        Description: Path to save the Log File
        Notes: Default is the ( $TranscriptsDir ) Transcript Directory
        Alias:
        ValidateSet: 

    .PARAMETER LogName
        Description: Name of the Report(s)
        Notes: There are 2 reports that get generated (*.CSV, and *.JSON).  The default file name is ( PingReport_D<Current Date>_T<Current Time>G_<5 Digit UID> )
        Alias:
        ValidateSet: 

    .PARAMETER Walkthrough
        Description:  Start the dynamic help menu system to help walk through the current command and all of the parameters
        Notes:  
        Alias: Help
        ValidateSet: 

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -System 10.20.136.51
        Description: Scan the ip address specified and pull System and PowerShell information if the computer is Online!
        Notes: A report is generated by default in the Transcripts directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -Range "10.20.136.50-10.20.136.100"
        Description: Scan the ip address range specified and pull System and PowerShell information if the computer is Online!
        Notes: A report is generated by default in the Transcripts directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -System "10.20.136.1","10.20.136.2","10.20.136.3","10.20.136.4","10.20.136.5","10.20.136.10","10.20.136.11","10.20.136.50","10.20.136.51","10.20.136.52"
        Description: Scan multiple ip addresses specified and pull System and PowerShell information if the computer is Online!
        Notes: A report is generated by default in the Transcripts directory called "PingReport_D<DATE>_T<TIME>G<GUID>.CSV"

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -System 'TestPC001','TestPC002','TestPC003' -Force
        Description: Scan the hosts and pull System and PowerShell information. Do not process an [ICMP / Ping] request prior to trying to connect.
        Notes: 

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -System 'TestPC001','TestPC002','TestPC003' -PassThrough
        Description: Scan the hosts and updates the BluGenie Systems list with any remote computer that is PowerShell 3 or higher (Default Filter)
        Notes: 

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -Range "10.20.136.50-10.20.136.100" -PingTimeOut 5
        Description: Scan the ip address range specified, and update the Ping Time Out to 5 ms.
        Notes: This speeds up the process for systems that are not online.  The default value is 15 which is still very fast.

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON'
        Description: Import settings from a JSON job file and Scan the specified systems from the JSON file and pull System and PowerShell information if the computer is Online!
        Notes: 

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON' -PassThrough
        Description: Import settings from a JSON job file, Scan the specified systems from the JSON file, and update the BluGenie Systems list with any remote computer that is PowerShell 3 or higher
        Notes: -FilterType is set to filter (Compliant) by default and -Pattern is set to (True) so only machines with PowerShell 3 or higher will be found.

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON' -PassThrough -FilterType OS -Patter 'Windows\s10'
        Description: Import settings from a JSON job file, Scan the specified systems from the JSON file, and update the BluGenie Systems list with any remote computer that is (Windows 10)
        Notes:

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON' -PassThrough -FilterType OS -Patter 'Windows\s10' -Run
        Description: Import settings from a JSON job file, Scan the specified systems from the JSON file, update the BluGenie Systems list with any remote computer that is (Windows 10) and Run all remote commands on the updates computer list
        Notes:

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON' -LogName 'BG_System_Query'
        Description: Import settings from a JSON job file, Scan the specified systems from the JSON file, and save a report named (BG_System_Query.CSV and BG_System_Query.JSON) to the Current Transcript Directory
        Notes:

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -JSONJob '<Path>\Job.JSON' -LogName 'BG_System_Query' -LogPath 'C:\Temp'
        Description: Import settings from a JSON job file, Scan the specified systems from the JSON file, and save a report named (BG_System_Query.CSV and BG_System_Query.JSON) to the Current Transcript Directory
        Notes:

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -Help
        Description: Call Help Information
        Notes: If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the -Full parameter

    .EXAMPLE
	    Command: Invoke-BluGeniePSQuery -WalkThrough
        Description: Call Help Information [2]
        Notes: If Help / WalkThrough is setup as a parameter, this script will be called to setup the Dynamic Help Menu if not the normal Get-Help will be called with the -Full parameter

    .OUTPUTS
        TypeName: System.Collections.Hashtable

    .NOTES
        
        * Original Author           : Michael Arroyo
        * Original Build Version    : 1905.2201
        * Latest Author             : Michael Arroyo
        * Latest Build Version      : 1911.0701
        * Dependencies              :
                                        ~ Invoke-WalkThrough            - Dynamic Help Function
                                        ~ JSON                          - JSON Import and Management Function
                                        ~ New-Guid                      - Generate a New Unique ID
        * Build Version Details     :
                                        ~ 1910.1001: * [Michael Arroyo] Posted
                                        ~ 1911.0401: * [Michael Arroyo] Added Support for calling information from an external JSON file
                                                     * [Michael Arroyo] Added new parameter ( JSONJob ) Use a JSON job file to import settings
                                                     * [Michael Arroyo] Added new parameter ( FilterType ) Fiter by Custom objects properties
                                                     * [Michael Arroyo] Added new parameter ( Pattern ) Search Pattern using RegEx
                                                     * [Michael Arroyo] Added new parameter ( Run )Process any command(s) from the JSON Job file on any of the systems filtered by Invoke-BluGeniePSQuery
                                                     * [Michael Arroyo] Updated the Help information to the new standard for Invoke-WalkThrough (External Call)
                                        ~ 1911.0701: * [Michael Arroyo] Added Support for saving the PS Query report to an external JSON file
                                                     * [Michael Arroyo] Added new parameter ( LogPath ) Path to save the Log File.  Default is the ( $TranscriptsDir ) Transcript Directory
                                                     * [Michael Arroyo] Added new parameter ( LogName ) Name of the Report(s).  There are 2 reports that get generated (*.CSV, and *.JSON).  The default file name is ( PingReport_D<Current Date>_T<Current Time>G_<5 Digit UID> )
#>
    [Alias('Invoke-PSQuery')]
    Param
    (
        [Parameter(Position=0)]
        [Alias('CN','__Server','IPAddress','Server','Computer','Name','ComputerName')]
        [String[]]$System = $global:ConsoleSystems,

        [Parameter(Position=1,
        ParameterSetName='Range')]
        [String[]]$Range = $global:ConsoleRange,

        [Parameter(Position=2)]
        [Switch]$PassThrough,

        [Parameter(Position=3)]
        [Int]$PingTimeOut = 15,

        [Parameter(Position=4)]
        [Switch]$Force,

        [Parameter(Position=5)]
        [string]$JSONJob,

        [Parameter(Position = 6)]
        [ValidateSet('Name','Address','ComputerName','FQDN','FreePhysicalMemoryGB','FreePhysicalMemoryMB','Online','OS','OSVersion','Compliant','PowerShellVer','TotalPhysicalMemoryGB','TotalPhysicalMemoryMB','TotalVirtualMemorySizeGB','TotalVirtualMemorySizeMB')]
        [Alias('Filter')] 
        [string]$FilterType = 'Compliant',

        [Parameter(Position = 7)]
        $Pattern = 'True',

        [Parameter(Position=8)]
        [switch]$Run,

        [Parameter(Position=9)]
        [String]$LogPath = $TranscriptsDir,

        [Parameter(Position=10)]
        [String]$LogName = $($('PingReport_D{0}G_{1}' -f $(New-TimeStamp), $(New-UID -NumPerSet 5 -NumOfSets 1)) -replace '(\d)_(\d)','$1_T$2'),

        [Parameter(Position=11)]
        [Alias('Help')]
        [Switch]$Walkthrough
    )

    #region WalkThrough (Dynamic Help)
        If
        (
            $Walkthrough
        )
        {
            If
            (
                $($PSCmdlet.MyInvocation.InvocationName)
            )
            {
                $Function = $($PSCmdlet.MyInvocation.InvocationName)
            }
            Else
            {
                If
                (
                    $Host.Name -match 'ISE'
                )
                {
                    $Function = $(Split-Path -Path $psISE.CurrentFile.FullPath -Leaf) -replace '((?:.[^.\r\n]*){1})$'
                }
            }

            If
            (
                Test-Path -Path Function:\Invoke-WalkThrough -ErrorAction SilentlyContinue
            )
            {
                If
                (
                    $Function -eq 'Invoke-WalkThrough'
                )
                {
                    #Disable Invoke-WalkThrough looping
                    Invoke-Command -ScriptBlock { Invoke-WalkThrough -Name $Function -RemoveRun }
                    Return
                }
                Else
                {
                    Invoke-Command -ScriptBlock { Invoke-WalkThrough -Name $Function }
                    Return
                }
            }
            Else
            {
                Get-Help -Name $Function -Full
                Return
            }
        }
    #endregion WalkThrough (Dynamic Help)

    #region Global Information
        $ScriptInfo = @{
            HKLMHive = 2147483650
            PS3Values = @{
                RegPath = 'SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine'
                RegValue = 'PowerShellVersion'
            }
            PS1Values = @{
                RegPath = 'SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine'
                RegValue = 'PowerShellVersion'
            }
        }

        [System.Collections.ArrayList]$ArrCusObjects = @()
    #endregion Global Information

    #region Manage Range of IP Address
        If
        (
            $Range
        )
        {
            $Range | ForEach-Object `
            -Process `
            {
                $CurRange = $_
                $ipStart,$ipEnd = $CurRange.Split('-')
                $System += $(Get-IPrange -start $ipStart -end $ipEnd) | Select-Object -Unique
            }
        }

        [Int]$SystemCount = $System.Count -1
    #endregion

    #region Main
        #region Import JSON Job
            If
            (
                $JSONJob
            )
            {
                JSON -Job $JSONJob
                JSON -Import

                Switch
                (
                    $null
                )
                {
                    { $global:ConsoleSystems }
                    {
                        [String[]]$System += $global:ConsoleSystems
                    }

                    { $global:ConsoleRange }
                    {
                        [String[]]$Range += $global:ConsoleRange
                    }
                }
            }
        #endregion Import JSON Job

        #region Gather Remote Information
            If
            (
                $System
            )
            {
                #region Create CSV Header
                    #region Data Collector
                        $DataCollector = New-Object -TypeName PSObject -Property @{
                            'Address' = $null
                            'Online' = $false
                            'ComputerName' = $null
                            'FQDN' = $null
                            'OS' = $null
                            'OSVersion' = $null
                            'Compliant' = $null
                            'PowerShellVer' = $null
                            'TotalPhysicalMemoryMB' = $null
                            'TotalPhysicalMemoryGB' = $null
                            'FreePhysicalMemoryMB' = $null
                            'FreePhysicalMemoryGB' = $null
                            'TotalVirtualMemorySizeMB' = $null
                            'TotalVirtualMemorySizeGB' = $null
                            'SysCount' = $null
                        }
                    #endregion Data Collector

                    $OutPut = $('{0}.csv' -f $(Join-Path -Path $LogPath -ChildPath $LogName))
                    $DataCollector | ConvertTo-Csv -NoTypeInformation | Select-Object -First 1 | Out-File -FilePath $OutPut -Force
                #endregion Create CSV Header

                #region Pull System Information
                    $System | ForEach-Object `
                    -Process `
                    {
                        $CurSystem = $_

                        #region Data Collector
                            $CurObject = New-Object -TypeName PSObject -Property @{
                                'Address' = $null
                                'Online' = $false
                                'ComputerName' = $null
                                'FQDN' = $null
                                'OS' = $null
                                'OSVersion' = $null
                                'Compliant' = $null
                                'PowerShellVer' = $null
                                'TotalPhysicalMemoryMB' = $null
                                'TotalPhysicalMemoryGB' = $null
                                'FreePhysicalMemoryMB' = $null
                                'FreePhysicalMemoryGB' = $null
                                'TotalVirtualMemorySizeMB' = $null
                                'TotalVirtualMemorySizeGB' = $null
                                'SysCount' = $null
                            }
                        #endregion Data Collector

                        $CurObject.SysCount = $SystemCount
                        $SystemCount -= 1
            
                        #region Online Check
                            $IpInfo = Resolve-BgDnsName -ComputerName $CurSystem -TimeToLive $PingTimeOut -TestConnection -ReturnObject
                            $CurObject.Online = $IpInfo.Results -match 'Up'

                            $CurObject.OS = $IpInfo.OS
                            $CurObject.Address = $IpInfo.IP
                            $CurObject.ComputerName = $IpInfo.ComputerName

                            If
                            (
                                $Force -and $CurObject.Online -eq $false
                            )
                            {
                                $CurObject.Online = 'Bypass'
                                $CurObject.OS = 'Bypass'
                            }

                                
                        #endregion Online Check

                        #region Query System
                            If
                            (
                                $CurObject.Online -ne $false
                            )
                            {
                                If
                                (
                                    $CurObject.OS -eq 'Windows' -or $CurObject.OS -eq 'Bypass'
                                )
                                {
                                    #region Query for Windows OS Information
                                        $OperatingSystem = Get-WmiObject -ComputerName $CurSystem -Class Win32_OperatingSystem | Select-Object -Property Caption, CSName, Version, FreePhysicalMemory, TotalVirtualMemorySize
                                        $ComputerSystem = Get-WmiObject -ComputerName $CurSystem -Class Win32_ComputerSystem | Select-Object @{Name='FQDN';Expression={$('{0}.{1}' -f $_.DNSHostName,$_.Domain)}}, DNSHostName, TotalPhysicalMemory
                                        $CurObject.FQDN = $ComputerSystem.FQDN
                                        $CurObject.OS = $OperatingSystem.Caption
                                        $CurObject.OSVersion = $OperatingSystem.Version
                                    #endregion Query for Windows OS Information

                                    #region Memory Information
                                        Try
                                        {
                                            $CurObject.TotalPhysicalMemoryMB = ($ComputerSystem.TotalPhysicalMemory / 1024).ToString("#.")
                                            $CurObject.TotalPhysicalMemoryGB = ($ComputerSystem.TotalPhysicalMemory / 1GB).ToString("#.##")
                                        }
                                        Catch
                                        {
                                        }

                                        Try
                                        {
                                            $CurObject.FreePhysicalMemoryMB = ($OperatingSystem.FreePhysicalMemory / 1024).ToString("#.")
                                            $CurObject.FreePhysicalMemoryGB = ($OperatingSystem.FreePhysicalMemory / 1MB).ToString("#.##")
                                        }
                                        Catch
                                        {
                                        }

                                        Try
                                        {
                                            $CurObject.TotalVirtualMemorySizeMB = ($OperatingSystem.TotalVirtualMemorySize / 1024).ToString("#.")
                                            $CurObject.TotalVirtualMemorySizeGB = ($OperatingSystem.TotalVirtualMemorySize / 1MB).ToString("#.##")
                                        }
                                        Catch
                                        {
                                        }
                                    #endregion Memory Information

                                    #region WMI Query
                                        $StdRegProv = Get-WmiObject -List -Namespace "root\default" -ComputerName $($CurObject.ComputerName) | Where-Object -FilterScript {$_.Name -eq "StdRegProv"}
                                        $CurObject.PowerShellVer = $StdRegProv.GetStringValue($($ScriptInfo.HKLMHive),$($ScriptInfo.PS3Values.RegPath),$($ScriptInfo.PS3Values.RegValue)).sValue
        
                                        If
                                        (
                                            $CurObject.PowerShellVer
                                        )
                                        {
                                            $CurObject.Compliant = $true
                                        }
                                        Else
                                        {
                                            $CurObject.Compliant = $false
                                            $CurObject.PowerShellVer = $StdRegProv.GetStringValue($($ScriptInfo.HKLMHive),$($ScriptInfo.PS1Values.RegPath),$($ScriptInfo.PS1Values.RegValue)).sValue
                                        }
                                    #endregion WMI Query
                                }
                            }
                        #endregion Query System

                        #region Append data to Output
                            $null = $ArrCusObjects.Add($CurObject)
                            $CurObject | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 -First 1 | Out-File -FilePath $OutPut -Append
                            Write-Host "`n"
                            $($($CurObject | Format-List) | Out-String).Trim()
                        #endregion Append data to Output
                    }
                #endregion Pull System Information
            }
        #endregion Gather Remote Information

        #region Convert CSV Output to JSON
            Get-Content -Path $OutPut -ErrorAction SilentlyContinue | ConvertFrom-Csv | ConvertTo-Json -Depth 10 -Compress -ErrorAction SilentlyContinue | Out-File -FilePath $('{0}.JSON' -f $(Join-Path -Path $LogPath -ChildPath $LogName)) -Encoding utf8 -Force
        #endregion Convert CSV Output to JSON

        #region PassThrough System references and rebuild System List
            If
            (
                $PassThrough
            )
            {
                [System.Collections.ArrayList]$global:ConsoleSystems = @()
                $global:ConsoleSystems += $($ArrCusObjects | Where-Object -Property $FilterType -match $Pattern | Select-Object -ExpandProperty ComputerName)
            }
        #endregion PassThrough System references and rebuild System List

        #region Run commands against the new system list
            If
            (
                $Run
            )
            {
                $global:ConsoleSystems = $ArrCusObjects | Where-Object -Property $FilterType -match $Pattern | Select-Object -ExpandProperty ComputerName

                Invoke-Process
            }
        #endregion Run commands against the new system list
    #endregion Main
}
#endregion Invoke-BluGeniePSQuery (Function)